// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.animation_data.v1.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "nvidia_ace.animation_id.v1.pb.h"
#include "nvidia_ace.audio.v1.pb.h"
#include "nvidia_ace.status.v1.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nvidia_5face_2eanimation_5fdata_2ev1_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
namespace nvidia_ace {
namespace animation_data {
namespace v1 {
class AnimationData;
struct AnimationDataDefaultTypeInternal;
extern AnimationDataDefaultTypeInternal _AnimationData_default_instance_;
class AnimationDataStream;
struct AnimationDataStreamDefaultTypeInternal;
extern AnimationDataStreamDefaultTypeInternal _AnimationDataStream_default_instance_;
class AnimationDataStreamHeader;
struct AnimationDataStreamHeaderDefaultTypeInternal;
extern AnimationDataStreamHeaderDefaultTypeInternal _AnimationDataStreamHeader_default_instance_;
class AnimationData_MetadataEntry_DoNotUse;
struct AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal;
extern AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal _AnimationData_MetadataEntry_DoNotUse_default_instance_;
class AudioWithTimeCode;
struct AudioWithTimeCodeDefaultTypeInternal;
extern AudioWithTimeCodeDefaultTypeInternal _AudioWithTimeCode_default_instance_;
class Camera;
struct CameraDefaultTypeInternal;
extern CameraDefaultTypeInternal _Camera_default_instance_;
class Float3;
struct Float3DefaultTypeInternal;
extern Float3DefaultTypeInternal _Float3_default_instance_;
class Float3ArrayWithTimeCode;
struct Float3ArrayWithTimeCodeDefaultTypeInternal;
extern Float3ArrayWithTimeCodeDefaultTypeInternal _Float3ArrayWithTimeCode_default_instance_;
class Float3WithTimeCode;
struct Float3WithTimeCodeDefaultTypeInternal;
extern Float3WithTimeCodeDefaultTypeInternal _Float3WithTimeCode_default_instance_;
class FloatArrayWithTimeCode;
struct FloatArrayWithTimeCodeDefaultTypeInternal;
extern FloatArrayWithTimeCodeDefaultTypeInternal _FloatArrayWithTimeCode_default_instance_;
class FloatWithTimeCode;
struct FloatWithTimeCodeDefaultTypeInternal;
extern FloatWithTimeCodeDefaultTypeInternal _FloatWithTimeCode_default_instance_;
class QuatF;
struct QuatFDefaultTypeInternal;
extern QuatFDefaultTypeInternal _QuatF_default_instance_;
class QuatFArrayWithTimeCode;
struct QuatFArrayWithTimeCodeDefaultTypeInternal;
extern QuatFArrayWithTimeCodeDefaultTypeInternal _QuatFArrayWithTimeCode_default_instance_;
class QuatFWithTimeCode;
struct QuatFWithTimeCodeDefaultTypeInternal;
extern QuatFWithTimeCodeDefaultTypeInternal _QuatFWithTimeCode_default_instance_;
class SkelAnimation;
struct SkelAnimationDefaultTypeInternal;
extern SkelAnimationDefaultTypeInternal _SkelAnimation_default_instance_;
class SkelAnimationHeader;
struct SkelAnimationHeaderDefaultTypeInternal;
extern SkelAnimationHeaderDefaultTypeInternal _SkelAnimationHeader_default_instance_;
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nvidia_ace {
namespace animation_data {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SkelAnimationHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.SkelAnimationHeader) */ {
 public:
  inline SkelAnimationHeader() : SkelAnimationHeader(nullptr) {}
  ~SkelAnimationHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SkelAnimationHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline SkelAnimationHeader(const SkelAnimationHeader& from) : SkelAnimationHeader(nullptr, from) {}
  inline SkelAnimationHeader(SkelAnimationHeader&& from) noexcept
      : SkelAnimationHeader(nullptr, std::move(from)) {}
  inline SkelAnimationHeader& operator=(const SkelAnimationHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkelAnimationHeader& operator=(SkelAnimationHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkelAnimationHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkelAnimationHeader* internal_default_instance() {
    return reinterpret_cast<const SkelAnimationHeader*>(
        &_SkelAnimationHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SkelAnimationHeader& a, SkelAnimationHeader& b) { a.Swap(&b); }
  inline void Swap(SkelAnimationHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkelAnimationHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkelAnimationHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SkelAnimationHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SkelAnimationHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SkelAnimationHeader& from) { SkelAnimationHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SkelAnimationHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.SkelAnimationHeader"; }

 protected:
  explicit SkelAnimationHeader(::google::protobuf::Arena* arena);
  SkelAnimationHeader(::google::protobuf::Arena* arena, const SkelAnimationHeader& from);
  SkelAnimationHeader(::google::protobuf::Arena* arena, SkelAnimationHeader&& from) noexcept
      : SkelAnimationHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlendShapesFieldNumber = 1,
    kJointsFieldNumber = 2,
  };
  // repeated string blend_shapes = 1;
  int blend_shapes_size() const;
  private:
  int _internal_blend_shapes_size() const;

  public:
  void clear_blend_shapes() ;
  const std::string& blend_shapes(int index) const;
  std::string* mutable_blend_shapes(int index);
  void set_blend_shapes(int index, const std::string& value);
  void set_blend_shapes(int index, std::string&& value);
  void set_blend_shapes(int index, const char* value);
  void set_blend_shapes(int index, const char* value, std::size_t size);
  void set_blend_shapes(int index, absl::string_view value);
  std::string* add_blend_shapes();
  void add_blend_shapes(const std::string& value);
  void add_blend_shapes(std::string&& value);
  void add_blend_shapes(const char* value);
  void add_blend_shapes(const char* value, std::size_t size);
  void add_blend_shapes(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& blend_shapes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_blend_shapes();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_blend_shapes() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_blend_shapes();

  public:
  // repeated string joints = 2;
  int joints_size() const;
  private:
  int _internal_joints_size() const;

  public:
  void clear_joints() ;
  const std::string& joints(int index) const;
  std::string* mutable_joints(int index);
  void set_joints(int index, const std::string& value);
  void set_joints(int index, std::string&& value);
  void set_joints(int index, const char* value);
  void set_joints(int index, const char* value, std::size_t size);
  void set_joints(int index, absl::string_view value);
  std::string* add_joints();
  void add_joints(const std::string& value);
  void add_joints(std::string&& value);
  void add_joints(const char* value);
  void add_joints(const char* value, std::size_t size);
  void add_joints(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& joints() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_joints();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_joints() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_joints();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.SkelAnimationHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> blend_shapes_;
    ::google::protobuf::RepeatedPtrField<std::string> joints_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class QuatF final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.QuatF) */ {
 public:
  inline QuatF() : QuatF(nullptr) {}
  ~QuatF() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuatF(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuatF(const QuatF& from) : QuatF(nullptr, from) {}
  inline QuatF(QuatF&& from) noexcept
      : QuatF(nullptr, std::move(from)) {}
  inline QuatF& operator=(const QuatF& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuatF& operator=(QuatF&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuatF& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuatF* internal_default_instance() {
    return reinterpret_cast<const QuatF*>(
        &_QuatF_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(QuatF& a, QuatF& b) { a.Swap(&b); }
  inline void Swap(QuatF* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuatF* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuatF* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QuatF>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuatF& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuatF& from) { QuatF::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuatF* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.QuatF"; }

 protected:
  explicit QuatF(::google::protobuf::Arena* arena);
  QuatF(::google::protobuf::Arena* arena, const QuatF& from);
  QuatF(::google::protobuf::Arena* arena, QuatF&& from) noexcept
      : QuatF(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRealFieldNumber = 1,
    kIFieldNumber = 2,
    kJFieldNumber = 3,
    kKFieldNumber = 4,
  };
  // float real = 1;
  void clear_real() ;
  float real() const;
  void set_real(float value);

  private:
  float _internal_real() const;
  void _internal_set_real(float value);

  public:
  // float i = 2;
  void clear_i() ;
  float i() const;
  void set_i(float value);

  private:
  float _internal_i() const;
  void _internal_set_i(float value);

  public:
  // float j = 3;
  void clear_j() ;
  float j() const;
  void set_j(float value);

  private:
  float _internal_j() const;
  void _internal_set_j(float value);

  public:
  // float k = 4;
  void clear_k() ;
  float k() const;
  void set_k(float value);

  private:
  float _internal_k() const;
  void _internal_set_k(float value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.QuatF)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float real_;
    float i_;
    float j_;
    float k_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FloatWithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.FloatWithTimeCode) */ {
 public:
  inline FloatWithTimeCode() : FloatWithTimeCode(nullptr) {}
  ~FloatWithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FloatWithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline FloatWithTimeCode(const FloatWithTimeCode& from) : FloatWithTimeCode(nullptr, from) {}
  inline FloatWithTimeCode(FloatWithTimeCode&& from) noexcept
      : FloatWithTimeCode(nullptr, std::move(from)) {}
  inline FloatWithTimeCode& operator=(const FloatWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatWithTimeCode& operator=(FloatWithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatWithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const FloatWithTimeCode*>(
        &_FloatWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(FloatWithTimeCode& a, FloatWithTimeCode& b) { a.Swap(&b); }
  inline void Swap(FloatWithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatWithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatWithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FloatWithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatWithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FloatWithTimeCode& from) { FloatWithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FloatWithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.FloatWithTimeCode"; }

 protected:
  explicit FloatWithTimeCode(::google::protobuf::Arena* arena);
  FloatWithTimeCode(::google::protobuf::Arena* arena, const FloatWithTimeCode& from);
  FloatWithTimeCode(::google::protobuf::Arena* arena, FloatWithTimeCode&& from) noexcept
      : FloatWithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeCodeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // float value = 2;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.FloatWithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    double time_code_;
    float value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FloatArrayWithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode) */ {
 public:
  inline FloatArrayWithTimeCode() : FloatArrayWithTimeCode(nullptr) {}
  ~FloatArrayWithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FloatArrayWithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline FloatArrayWithTimeCode(const FloatArrayWithTimeCode& from) : FloatArrayWithTimeCode(nullptr, from) {}
  inline FloatArrayWithTimeCode(FloatArrayWithTimeCode&& from) noexcept
      : FloatArrayWithTimeCode(nullptr, std::move(from)) {}
  inline FloatArrayWithTimeCode& operator=(const FloatArrayWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArrayWithTimeCode& operator=(FloatArrayWithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatArrayWithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatArrayWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const FloatArrayWithTimeCode*>(
        &_FloatArrayWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(FloatArrayWithTimeCode& a, FloatArrayWithTimeCode& b) { a.Swap(&b); }
  inline void Swap(FloatArrayWithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArrayWithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatArrayWithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FloatArrayWithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatArrayWithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FloatArrayWithTimeCode& from) { FloatArrayWithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FloatArrayWithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.FloatArrayWithTimeCode"; }

 protected:
  explicit FloatArrayWithTimeCode(::google::protobuf::Arena* arena);
  FloatArrayWithTimeCode(::google::protobuf::Arena* arena, const FloatArrayWithTimeCode& from);
  FloatArrayWithTimeCode(::google::protobuf::Arena* arena, FloatArrayWithTimeCode&& from) noexcept
      : FloatArrayWithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf::RepeatedField<float>& values() const;
  ::google::protobuf::RepeatedField<float>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_values() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_values();

  public:
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> values_;
    double time_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Float3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Float3) */ {
 public:
  inline Float3() : Float3(nullptr) {}
  ~Float3() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Float3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Float3(const Float3& from) : Float3(nullptr, from) {}
  inline Float3(Float3&& from) noexcept
      : Float3(nullptr, std::move(from)) {}
  inline Float3& operator=(const Float3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3& operator=(Float3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float3* internal_default_instance() {
    return reinterpret_cast<const Float3*>(
        &_Float3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Float3& a, Float3& b) { a.Swap(&b); }
  inline void Swap(Float3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Float3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Float3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Float3& from) { Float3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Float3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.Float3"; }

 protected:
  explicit Float3(::google::protobuf::Arena* arena);
  Float3(::google::protobuf::Arena* arena, const Float3& from);
  Float3(::google::protobuf::Arena* arena, Float3&& from) noexcept
      : Float3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 3;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Float3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioWithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AudioWithTimeCode) */ {
 public:
  inline AudioWithTimeCode() : AudioWithTimeCode(nullptr) {}
  ~AudioWithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioWithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioWithTimeCode(const AudioWithTimeCode& from) : AudioWithTimeCode(nullptr, from) {}
  inline AudioWithTimeCode(AudioWithTimeCode&& from) noexcept
      : AudioWithTimeCode(nullptr, std::move(from)) {}
  inline AudioWithTimeCode& operator=(const AudioWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioWithTimeCode& operator=(AudioWithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioWithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const AudioWithTimeCode*>(
        &_AudioWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AudioWithTimeCode& a, AudioWithTimeCode& b) { a.Swap(&b); }
  inline void Swap(AudioWithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioWithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioWithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AudioWithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioWithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioWithTimeCode& from) { AudioWithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioWithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.AudioWithTimeCode"; }

 protected:
  explicit AudioWithTimeCode(::google::protobuf::Arena* arena);
  AudioWithTimeCode(::google::protobuf::Arena* arena, const AudioWithTimeCode& from);
  AudioWithTimeCode(::google::protobuf::Arena* arena, AudioWithTimeCode&& from) noexcept
      : AudioWithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioBufferFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // bytes audio_buffer = 2;
  void clear_audio_buffer() ;
  const std::string& audio_buffer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_buffer(Arg_&& arg, Args_... args);
  std::string* mutable_audio_buffer();
  PROTOBUF_NODISCARD std::string* release_audio_buffer();
  void set_allocated_audio_buffer(std::string* value);

  private:
  const std::string& _internal_audio_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_buffer(
      const std::string& value);
  std::string* _internal_mutable_audio_buffer();

  public:
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AudioWithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr audio_buffer_;
    double time_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class QuatFWithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.QuatFWithTimeCode) */ {
 public:
  inline QuatFWithTimeCode() : QuatFWithTimeCode(nullptr) {}
  ~QuatFWithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuatFWithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuatFWithTimeCode(const QuatFWithTimeCode& from) : QuatFWithTimeCode(nullptr, from) {}
  inline QuatFWithTimeCode(QuatFWithTimeCode&& from) noexcept
      : QuatFWithTimeCode(nullptr, std::move(from)) {}
  inline QuatFWithTimeCode& operator=(const QuatFWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuatFWithTimeCode& operator=(QuatFWithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuatFWithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuatFWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const QuatFWithTimeCode*>(
        &_QuatFWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(QuatFWithTimeCode& a, QuatFWithTimeCode& b) { a.Swap(&b); }
  inline void Swap(QuatFWithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuatFWithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuatFWithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QuatFWithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuatFWithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuatFWithTimeCode& from) { QuatFWithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuatFWithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.QuatFWithTimeCode"; }

 protected:
  explicit QuatFWithTimeCode(::google::protobuf::Arena* arena);
  QuatFWithTimeCode(::google::protobuf::Arena* arena, const QuatFWithTimeCode& from);
  QuatFWithTimeCode(::google::protobuf::Arena* arena, QuatFWithTimeCode&& from) noexcept
      : QuatFWithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // .nvidia_ace.animation_data.v1.QuatF value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::nvidia_ace::animation_data::v1::QuatF& value() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::QuatF* release_value();
  ::nvidia_ace::animation_data::v1::QuatF* mutable_value();
  void set_allocated_value(::nvidia_ace::animation_data::v1::QuatF* value);
  void unsafe_arena_set_allocated_value(::nvidia_ace::animation_data::v1::QuatF* value);
  ::nvidia_ace::animation_data::v1::QuatF* unsafe_arena_release_value();

  private:
  const ::nvidia_ace::animation_data::v1::QuatF& _internal_value() const;
  ::nvidia_ace::animation_data::v1::QuatF* _internal_mutable_value();

  public:
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::nvidia_ace::animation_data::v1::QuatF* value_;
    double time_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class QuatFArrayWithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode) */ {
 public:
  inline QuatFArrayWithTimeCode() : QuatFArrayWithTimeCode(nullptr) {}
  ~QuatFArrayWithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuatFArrayWithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuatFArrayWithTimeCode(const QuatFArrayWithTimeCode& from) : QuatFArrayWithTimeCode(nullptr, from) {}
  inline QuatFArrayWithTimeCode(QuatFArrayWithTimeCode&& from) noexcept
      : QuatFArrayWithTimeCode(nullptr, std::move(from)) {}
  inline QuatFArrayWithTimeCode& operator=(const QuatFArrayWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuatFArrayWithTimeCode& operator=(QuatFArrayWithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuatFArrayWithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuatFArrayWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const QuatFArrayWithTimeCode*>(
        &_QuatFArrayWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(QuatFArrayWithTimeCode& a, QuatFArrayWithTimeCode& b) { a.Swap(&b); }
  inline void Swap(QuatFArrayWithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuatFArrayWithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuatFArrayWithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QuatFArrayWithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuatFArrayWithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuatFArrayWithTimeCode& from) { QuatFArrayWithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuatFArrayWithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode"; }

 protected:
  explicit QuatFArrayWithTimeCode(::google::protobuf::Arena* arena);
  QuatFArrayWithTimeCode(::google::protobuf::Arena* arena, const QuatFArrayWithTimeCode& from);
  QuatFArrayWithTimeCode(::google::protobuf::Arena* arena, QuatFArrayWithTimeCode&& from) noexcept
      : QuatFArrayWithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::nvidia_ace::animation_data::v1::QuatF* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>* _internal_mutable_values();
  public:
  const ::nvidia_ace::animation_data::v1::QuatF& values(int index) const;
  ::nvidia_ace::animation_data::v1::QuatF* add_values();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>& values() const;
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatF > values_;
    double time_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Float3WithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Float3WithTimeCode) */ {
 public:
  inline Float3WithTimeCode() : Float3WithTimeCode(nullptr) {}
  ~Float3WithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Float3WithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline Float3WithTimeCode(const Float3WithTimeCode& from) : Float3WithTimeCode(nullptr, from) {}
  inline Float3WithTimeCode(Float3WithTimeCode&& from) noexcept
      : Float3WithTimeCode(nullptr, std::move(from)) {}
  inline Float3WithTimeCode& operator=(const Float3WithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3WithTimeCode& operator=(Float3WithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float3WithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float3WithTimeCode* internal_default_instance() {
    return reinterpret_cast<const Float3WithTimeCode*>(
        &_Float3WithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Float3WithTimeCode& a, Float3WithTimeCode& b) { a.Swap(&b); }
  inline void Swap(Float3WithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3WithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float3WithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Float3WithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Float3WithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Float3WithTimeCode& from) { Float3WithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Float3WithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.Float3WithTimeCode"; }

 protected:
  explicit Float3WithTimeCode(::google::protobuf::Arena* arena);
  Float3WithTimeCode(::google::protobuf::Arena* arena, const Float3WithTimeCode& from);
  Float3WithTimeCode(::google::protobuf::Arena* arena, Float3WithTimeCode&& from) noexcept
      : Float3WithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // .nvidia_ace.animation_data.v1.Float3 value = 2;
  bool has_value() const;
  void clear_value() ;
  const ::nvidia_ace::animation_data::v1::Float3& value() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::Float3* release_value();
  ::nvidia_ace::animation_data::v1::Float3* mutable_value();
  void set_allocated_value(::nvidia_ace::animation_data::v1::Float3* value);
  void unsafe_arena_set_allocated_value(::nvidia_ace::animation_data::v1::Float3* value);
  ::nvidia_ace::animation_data::v1::Float3* unsafe_arena_release_value();

  private:
  const ::nvidia_ace::animation_data::v1::Float3& _internal_value() const;
  ::nvidia_ace::animation_data::v1::Float3* _internal_mutable_value();

  public:
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Float3WithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::nvidia_ace::animation_data::v1::Float3* value_;
    double time_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Float3ArrayWithTimeCode final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode) */ {
 public:
  inline Float3ArrayWithTimeCode() : Float3ArrayWithTimeCode(nullptr) {}
  ~Float3ArrayWithTimeCode() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Float3ArrayWithTimeCode(
      ::google::protobuf::internal::ConstantInitialized);

  inline Float3ArrayWithTimeCode(const Float3ArrayWithTimeCode& from) : Float3ArrayWithTimeCode(nullptr, from) {}
  inline Float3ArrayWithTimeCode(Float3ArrayWithTimeCode&& from) noexcept
      : Float3ArrayWithTimeCode(nullptr, std::move(from)) {}
  inline Float3ArrayWithTimeCode& operator=(const Float3ArrayWithTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline Float3ArrayWithTimeCode& operator=(Float3ArrayWithTimeCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Float3ArrayWithTimeCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const Float3ArrayWithTimeCode* internal_default_instance() {
    return reinterpret_cast<const Float3ArrayWithTimeCode*>(
        &_Float3ArrayWithTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Float3ArrayWithTimeCode& a, Float3ArrayWithTimeCode& b) { a.Swap(&b); }
  inline void Swap(Float3ArrayWithTimeCode* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Float3ArrayWithTimeCode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Float3ArrayWithTimeCode* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Float3ArrayWithTimeCode>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Float3ArrayWithTimeCode& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Float3ArrayWithTimeCode& from) { Float3ArrayWithTimeCode::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Float3ArrayWithTimeCode* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode"; }

 protected:
  explicit Float3ArrayWithTimeCode(::google::protobuf::Arena* arena);
  Float3ArrayWithTimeCode(::google::protobuf::Arena* arena, const Float3ArrayWithTimeCode& from);
  Float3ArrayWithTimeCode(::google::protobuf::Arena* arena, Float3ArrayWithTimeCode&& from) noexcept
      : Float3ArrayWithTimeCode(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 2,
    kTimeCodeFieldNumber = 1,
  };
  // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::nvidia_ace::animation_data::v1::Float3* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>* _internal_mutable_values();
  public:
  const ::nvidia_ace::animation_data::v1::Float3& values(int index) const;
  ::nvidia_ace::animation_data::v1::Float3* add_values();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>& values() const;
  // double time_code = 1;
  void clear_time_code() ;
  double time_code() const;
  void set_time_code(double value);

  private:
  double _internal_time_code() const;
  void _internal_set_time_code(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3 > values_;
    double time_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStreamHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AnimationDataStreamHeader) */ {
 public:
  inline AnimationDataStreamHeader() : AnimationDataStreamHeader(nullptr) {}
  ~AnimationDataStreamHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationDataStreamHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationDataStreamHeader(const AnimationDataStreamHeader& from) : AnimationDataStreamHeader(nullptr, from) {}
  inline AnimationDataStreamHeader(AnimationDataStreamHeader&& from) noexcept
      : AnimationDataStreamHeader(nullptr, std::move(from)) {}
  inline AnimationDataStreamHeader& operator=(const AnimationDataStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStreamHeader& operator=(AnimationDataStreamHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationDataStreamHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimationDataStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStreamHeader*>(
        &_AnimationDataStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AnimationDataStreamHeader& a, AnimationDataStreamHeader& b) { a.Swap(&b); }
  inline void Swap(AnimationDataStreamHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStreamHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationDataStreamHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationDataStreamHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationDataStreamHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationDataStreamHeader& from) { AnimationDataStreamHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationDataStreamHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.AnimationDataStreamHeader"; }

 protected:
  explicit AnimationDataStreamHeader(::google::protobuf::Arena* arena);
  AnimationDataStreamHeader(::google::protobuf::Arena* arena, const AnimationDataStreamHeader& from);
  AnimationDataStreamHeader(::google::protobuf::Arena* arena, AnimationDataStreamHeader&& from) noexcept
      : AnimationDataStreamHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSourceServiceIdFieldNumber = 2,
    kAnimationIdsFieldNumber = 1,
    kAudioHeaderFieldNumber = 3,
    kSkelAnimationHeaderFieldNumber = 4,
    kStartTimeCodeSinceEpochFieldNumber = 5,
  };
  // optional string source_service_id = 2;
  bool has_source_service_id() const;
  void clear_source_service_id() ;
  const std::string& source_service_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_service_id(Arg_&& arg, Args_... args);
  std::string* mutable_source_service_id();
  PROTOBUF_NODISCARD std::string* release_source_service_id();
  void set_allocated_source_service_id(std::string* value);

  private:
  const std::string& _internal_source_service_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_service_id(
      const std::string& value);
  std::string* _internal_mutable_source_service_id();

  public:
  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  bool has_animation_ids() const;
  void clear_animation_ids() ;
  const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_id::v1::AnimationIds* release_animation_ids();
  ::nvidia_ace::animation_id::v1::AnimationIds* mutable_animation_ids();
  void set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  void unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  ::nvidia_ace::animation_id::v1::AnimationIds* unsafe_arena_release_animation_ids();

  private:
  const ::nvidia_ace::animation_id::v1::AnimationIds& _internal_animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* _internal_mutable_animation_ids();

  public:
  // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
  bool has_audio_header() const;
  void clear_audio_header() ;
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  void unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();

  public:
  // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
  bool has_skel_animation_header() const;
  void clear_skel_animation_header() ;
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& skel_animation_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::SkelAnimationHeader* release_skel_animation_header();
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* mutable_skel_animation_header();
  void set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value);
  void unsafe_arena_set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value);
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* unsafe_arena_release_skel_animation_header();

  private:
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& _internal_skel_animation_header() const;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* _internal_mutable_skel_animation_header();

  public:
  // double start_time_code_since_epoch = 5;
  void clear_start_time_code_since_epoch() ;
  double start_time_code_since_epoch() const;
  void set_start_time_code_since_epoch(double value);

  private:
  double _internal_start_time_code_since_epoch() const;
  void _internal_set_start_time_code_since_epoch(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      80, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr source_service_id_;
    ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids_;
    ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
    ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header_;
    double start_time_code_since_epoch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationData_MetadataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AnimationData_MetadataEntry_DoNotUse, std::string, ::google::protobuf::Any,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AnimationData_MetadataEntry_DoNotUse, std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  AnimationData_MetadataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationData_MetadataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AnimationData_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AnimationData_MetadataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AnimationData_MetadataEntry_DoNotUse*>(
        &_AnimationData_MetadataEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "nvidia_ace.animation_data.v1.AnimationData.MetadataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class SkelAnimation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.SkelAnimation) */ {
 public:
  inline SkelAnimation() : SkelAnimation(nullptr) {}
  ~SkelAnimation() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SkelAnimation(
      ::google::protobuf::internal::ConstantInitialized);

  inline SkelAnimation(const SkelAnimation& from) : SkelAnimation(nullptr, from) {}
  inline SkelAnimation(SkelAnimation&& from) noexcept
      : SkelAnimation(nullptr, std::move(from)) {}
  inline SkelAnimation& operator=(const SkelAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SkelAnimation& operator=(SkelAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SkelAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SkelAnimation* internal_default_instance() {
    return reinterpret_cast<const SkelAnimation*>(
        &_SkelAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(SkelAnimation& a, SkelAnimation& b) { a.Swap(&b); }
  inline void Swap(SkelAnimation* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SkelAnimation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SkelAnimation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<SkelAnimation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SkelAnimation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SkelAnimation& from) { SkelAnimation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SkelAnimation* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.SkelAnimation"; }

 protected:
  explicit SkelAnimation(::google::protobuf::Arena* arena);
  SkelAnimation(::google::protobuf::Arena* arena, const SkelAnimation& from);
  SkelAnimation(::google::protobuf::Arena* arena, SkelAnimation&& from) noexcept
      : SkelAnimation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBlendShapeWeightsFieldNumber = 1,
    kTranslationsFieldNumber = 2,
    kRotationsFieldNumber = 3,
    kScalesFieldNumber = 4,
  };
  // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
  int blend_shape_weights_size() const;
  private:
  int _internal_blend_shape_weights_size() const;

  public:
  void clear_blend_shape_weights() ;
  ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* mutable_blend_shape_weights(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>* mutable_blend_shape_weights();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>& _internal_blend_shape_weights() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>* _internal_mutable_blend_shape_weights();
  public:
  const ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode& blend_shape_weights(int index) const;
  ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* add_blend_shape_weights();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>& blend_shape_weights() const;
  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
  int translations_size() const;
  private:
  int _internal_translations_size() const;

  public:
  void clear_translations() ;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* mutable_translations(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>* mutable_translations();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>& _internal_translations() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>* _internal_mutable_translations();
  public:
  const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& translations(int index) const;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* add_translations();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>& translations() const;
  // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
  int rotations_size() const;
  private:
  int _internal_rotations_size() const;

  public:
  void clear_rotations() ;
  ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* mutable_rotations(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>* mutable_rotations();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>& _internal_rotations() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>* _internal_mutable_rotations();
  public:
  const ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode& rotations(int index) const;
  ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* add_rotations();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>& rotations() const;
  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
  int scales_size() const;
  private:
  int _internal_scales_size() const;

  public:
  void clear_scales() ;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* mutable_scales(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>* mutable_scales();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>& _internal_scales() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>* _internal_mutable_scales();
  public:
  const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& scales(int index) const;
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* add_scales();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>& scales() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.SkelAnimation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode > blend_shape_weights_;
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode > translations_;
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode > rotations_;
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode > scales_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Camera final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.Camera) */ {
 public:
  inline Camera() : Camera(nullptr) {}
  ~Camera() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Camera(
      ::google::protobuf::internal::ConstantInitialized);

  inline Camera(const Camera& from) : Camera(nullptr, from) {}
  inline Camera(Camera&& from) noexcept
      : Camera(nullptr, std::move(from)) {}
  inline Camera& operator=(const Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Camera& operator=(Camera&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Camera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Camera* internal_default_instance() {
    return reinterpret_cast<const Camera*>(
        &_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Camera& a, Camera& b) { a.Swap(&b); }
  inline void Swap(Camera* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Camera* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Camera* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Camera>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Camera& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Camera& from) { Camera::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Camera* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.Camera"; }

 protected:
  explicit Camera(::google::protobuf::Arena* arena);
  Camera(::google::protobuf::Arena* arena, const Camera& from);
  Camera(::google::protobuf::Arena* arena, Camera&& from) noexcept
      : Camera(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kFocalLengthFieldNumber = 3,
    kFocusDistanceFieldNumber = 4,
  };
  // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
  int position_size() const;
  private:
  int _internal_position_size() const;

  public:
  void clear_position() ;
  ::nvidia_ace::animation_data::v1::Float3WithTimeCode* mutable_position(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>* mutable_position();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>& _internal_position() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>* _internal_mutable_position();
  public:
  const ::nvidia_ace::animation_data::v1::Float3WithTimeCode& position(int index) const;
  ::nvidia_ace::animation_data::v1::Float3WithTimeCode* add_position();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>& position() const;
  // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;

  public:
  void clear_rotation() ;
  ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* mutable_rotation(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>* mutable_rotation();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>& _internal_rotation() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>* _internal_mutable_rotation();
  public:
  const ::nvidia_ace::animation_data::v1::QuatFWithTimeCode& rotation(int index) const;
  ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* add_rotation();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>& rotation() const;
  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
  int focal_length_size() const;
  private:
  int _internal_focal_length_size() const;

  public:
  void clear_focal_length() ;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* mutable_focal_length(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>* mutable_focal_length();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>& _internal_focal_length() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>* _internal_mutable_focal_length();
  public:
  const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& focal_length(int index) const;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* add_focal_length();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>& focal_length() const;
  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
  int focus_distance_size() const;
  private:
  int _internal_focus_distance_size() const;

  public:
  void clear_focus_distance() ;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* mutable_focus_distance(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>* mutable_focus_distance();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>& _internal_focus_distance() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>* _internal_mutable_focus_distance();
  public:
  const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& focus_distance(int index) const;
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* add_focus_distance();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>& focus_distance() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.Camera)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::Float3WithTimeCode > position_;
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::QuatFWithTimeCode > rotation_;
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode > focal_length_;
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::animation_data::v1::FloatWithTimeCode > focus_distance_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AnimationData) */ {
 public:
  inline AnimationData() : AnimationData(nullptr) {}
  ~AnimationData() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationData(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationData(const AnimationData& from) : AnimationData(nullptr, from) {}
  inline AnimationData(AnimationData&& from) noexcept
      : AnimationData(nullptr, std::move(from)) {}
  inline AnimationData& operator=(const AnimationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationData& operator=(AnimationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimationData* internal_default_instance() {
    return reinterpret_cast<const AnimationData*>(
        &_AnimationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AnimationData& a, AnimationData& b) { a.Swap(&b); }
  inline void Swap(AnimationData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationData& from) { AnimationData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.AnimationData"; }

 protected:
  explicit AnimationData(::google::protobuf::Arena* arena);
  AnimationData(::google::protobuf::Arena* arena, const AnimationData& from);
  AnimationData(::google::protobuf::Arena* arena, AnimationData&& from) noexcept
      : AnimationData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 4,
    kSkelAnimationFieldNumber = 1,
    kAudioFieldNumber = 2,
    kCameraFieldNumber = 3,
  };
  // map<string, .google.protobuf.Any> metadata = 4;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;

  public:
  void clear_metadata() ;
  const ::google::protobuf::Map<std::string, ::google::protobuf::Any>& metadata() const;
  ::google::protobuf::Map<std::string, ::google::protobuf::Any>* mutable_metadata();

  private:
  const ::google::protobuf::Map<std::string, ::google::protobuf::Any>& _internal_metadata() const;
  ::google::protobuf::Map<std::string, ::google::protobuf::Any>* _internal_mutable_metadata();

  public:
  // optional .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
  bool has_skel_animation() const;
  void clear_skel_animation() ;
  const ::nvidia_ace::animation_data::v1::SkelAnimation& skel_animation() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::SkelAnimation* release_skel_animation();
  ::nvidia_ace::animation_data::v1::SkelAnimation* mutable_skel_animation();
  void set_allocated_skel_animation(::nvidia_ace::animation_data::v1::SkelAnimation* value);
  void unsafe_arena_set_allocated_skel_animation(::nvidia_ace::animation_data::v1::SkelAnimation* value);
  ::nvidia_ace::animation_data::v1::SkelAnimation* unsafe_arena_release_skel_animation();

  private:
  const ::nvidia_ace::animation_data::v1::SkelAnimation& _internal_skel_animation() const;
  ::nvidia_ace::animation_data::v1::SkelAnimation* _internal_mutable_skel_animation();

  public:
  // optional .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
  bool has_audio() const;
  void clear_audio() ;
  const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& audio() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::AudioWithTimeCode* release_audio();
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* mutable_audio();
  void set_allocated_audio(::nvidia_ace::animation_data::v1::AudioWithTimeCode* value);
  void unsafe_arena_set_allocated_audio(::nvidia_ace::animation_data::v1::AudioWithTimeCode* value);
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* unsafe_arena_release_audio();

  private:
  const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& _internal_audio() const;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* _internal_mutable_audio();

  public:
  // optional .nvidia_ace.animation_data.v1.Camera camera = 3;
  bool has_camera() const;
  void clear_camera() ;
  const ::nvidia_ace::animation_data::v1::Camera& camera() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::Camera* release_camera();
  ::nvidia_ace::animation_data::v1::Camera* mutable_camera();
  void set_allocated_camera(::nvidia_ace::animation_data::v1::Camera* value);
  void unsafe_arena_set_allocated_camera(::nvidia_ace::animation_data::v1::Camera* value);
  ::nvidia_ace::animation_data::v1::Camera* unsafe_arena_release_camera();

  private:
  const ::nvidia_ace::animation_data::v1::Camera& _internal_camera() const;
  ::nvidia_ace::animation_data::v1::Camera* _internal_mutable_camera();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AnimationData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 5,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<AnimationData_MetadataEntry_DoNotUse, std::string, ::google::protobuf::Any,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        metadata_;
    ::nvidia_ace::animation_data::v1::SkelAnimation* skel_animation_;
    ::nvidia_ace::animation_data::v1::AudioWithTimeCode* audio_;
    ::nvidia_ace::animation_data::v1::Camera* camera_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStream final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.animation_data.v1.AnimationDataStream) */ {
 public:
  inline AnimationDataStream() : AnimationDataStream(nullptr) {}
  ~AnimationDataStream() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationDataStream(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationDataStream(const AnimationDataStream& from) : AnimationDataStream(nullptr, from) {}
  inline AnimationDataStream(AnimationDataStream&& from) noexcept
      : AnimationDataStream(nullptr, std::move(from)) {}
  inline AnimationDataStream& operator=(const AnimationDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStream& operator=(AnimationDataStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationDataStream& default_instance() {
    return *internal_default_instance();
  }
  enum StreamPartCase {
    kAnimationDataStreamHeader = 1,
    kAnimationData = 2,
    kStatus = 3,
    STREAM_PART_NOT_SET = 0,
  };
  static inline const AnimationDataStream* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStream*>(
        &_AnimationDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AnimationDataStream& a, AnimationDataStream& b) { a.Swap(&b); }
  inline void Swap(AnimationDataStream* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationDataStream* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationDataStream>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationDataStream& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationDataStream& from) { AnimationDataStream::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationDataStream* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.animation_data.v1.AnimationDataStream"; }

 protected:
  explicit AnimationDataStream(::google::protobuf::Arena* arena);
  AnimationDataStream(::google::protobuf::Arena* arena, const AnimationDataStream& from);
  AnimationDataStream(::google::protobuf::Arena* arena, AnimationDataStream&& from) noexcept
      : AnimationDataStream(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAnimationDataStreamHeaderFieldNumber = 1,
    kAnimationDataFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
  bool has_animation_data_stream_header() const;
  private:
  bool _internal_has_animation_data_stream_header() const;

  public:
  void clear_animation_data_stream_header() ;
  const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& animation_data_stream_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* release_animation_data_stream_header();
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* mutable_animation_data_stream_header();
  void set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* value);
  void unsafe_arena_set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* value);
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* unsafe_arena_release_animation_data_stream_header();

  private:
  const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& _internal_animation_data_stream_header() const;
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* _internal_mutable_animation_data_stream_header();

  public:
  // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
  bool has_animation_data() const;
  private:
  bool _internal_has_animation_data() const;

  public:
  void clear_animation_data() ;
  const ::nvidia_ace::animation_data::v1::AnimationData& animation_data() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::AnimationData* release_animation_data();
  ::nvidia_ace::animation_data::v1::AnimationData* mutable_animation_data();
  void set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* value);
  void unsafe_arena_set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* value);
  ::nvidia_ace::animation_data::v1::AnimationData* unsafe_arena_release_animation_data();

  private:
  const ::nvidia_ace::animation_data::v1::AnimationData& _internal_animation_data() const;
  ::nvidia_ace::animation_data::v1::AnimationData* _internal_mutable_animation_data();

  public:
  // .nvidia_ace.status.v1.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;

  public:
  void clear_status() ;
  const ::nvidia_ace::status::v1::Status& status() const;
  PROTOBUF_NODISCARD ::nvidia_ace::status::v1::Status* release_status();
  ::nvidia_ace::status::v1::Status* mutable_status();
  void set_allocated_status(::nvidia_ace::status::v1::Status* value);
  void unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* value);
  ::nvidia_ace::status::v1::Status* unsafe_arena_release_status();

  private:
  const ::nvidia_ace::status::v1::Status& _internal_status() const;
  ::nvidia_ace::status::v1::Status* _internal_mutable_status();

  public:
  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.animation_data.v1.AnimationDataStream)
 private:
  class _Internal;
  void set_has_animation_data_stream_header();
  void set_has_animation_data();
  void set_has_status();
  inline bool has_stream_part() const;
  inline void clear_has_stream_part();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union StreamPartUnion {
      constexpr StreamPartUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header_;
      ::nvidia_ace::animation_data::v1::AnimationData* animation_data_;
      ::nvidia_ace::status::v1::Status* status_;
    } stream_part_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AnimationDataStreamHeader

// .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
inline bool AnimationDataStreamHeader::has_animation_ids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animation_ids_ != nullptr);
  return value;
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationDataStreamHeader::_internal_animation_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_id::v1::AnimationIds* p = _impl_.animation_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_id::v1::AnimationIds&>(::nvidia_ace::animation_id::v1::_AnimationIds_default_instance_);
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationDataStreamHeader::animation_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
  return _internal_animation_ids();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.animation_ids_);
  }
  _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::release_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_id::v1::AnimationIds* released = _impl_.animation_ids_;
  _impl_.animation_ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::unsafe_arena_release_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = _impl_.animation_ids_;
  _impl_.animation_ids_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::_internal_mutable_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.animation_ids_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_id::v1::AnimationIds>(GetArena());
    _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(p);
  }
  return _impl_.animation_ids_;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationDataStreamHeader::mutable_animation_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nvidia_ace::animation_id::v1::AnimationIds* _msg = _internal_mutable_animation_ids();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
  return _msg;
}
inline void AnimationDataStreamHeader::set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.animation_ids_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.animation_ids)
}

// optional string source_service_id = 2;
inline bool AnimationDataStreamHeader::has_source_service_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AnimationDataStreamHeader::clear_source_service_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_service_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AnimationDataStreamHeader::source_service_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
  return _internal_source_service_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnimationDataStreamHeader::set_source_service_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_service_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}
inline std::string* AnimationDataStreamHeader::mutable_source_service_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_service_id();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
  return _s;
}
inline const std::string& AnimationDataStreamHeader::_internal_source_service_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_service_id_.Get();
}
inline void AnimationDataStreamHeader::_internal_set_source_service_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_service_id_.Set(value, GetArena());
}
inline std::string* AnimationDataStreamHeader::_internal_mutable_source_service_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_service_id_.Mutable( GetArena());
}
inline std::string* AnimationDataStreamHeader::release_source_service_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.source_service_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_service_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AnimationDataStreamHeader::set_allocated_source_service_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_service_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_service_id_.IsDefault()) {
          _impl_.source_service_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id)
}

// optional .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
inline bool AnimationDataStreamHeader::has_audio_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_header_ != nullptr);
  return value;
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::_internal_audio_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::audio::v1::AudioHeader* p = _impl_.audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::audio_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }
  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::audio::v1::AudioHeader* released = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::unsafe_arena_release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::_internal_mutable_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(p);
  }
  return _impl_.audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::mutable_audio_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::nvidia_ace::audio::v1::AudioHeader* _msg = _internal_mutable_audio_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
  return _msg;
}
inline void AnimationDataStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.audio_header)
}

// optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
inline bool AnimationDataStreamHeader::has_skel_animation_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skel_animation_header_ != nullptr);
  return value;
}
inline void AnimationDataStreamHeader::clear_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.skel_animation_header_ != nullptr) _impl_.skel_animation_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::_internal_skel_animation_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader* p = _impl_.skel_animation_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::SkelAnimationHeader&>(::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::skel_animation_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
  return _internal_skel_animation_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.skel_animation_header_);
  }
  _impl_.skel_animation_header_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimationHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::release_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* released = _impl_.skel_animation_header_;
  _impl_.skel_animation_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::unsafe_arena_release_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* temp = _impl_.skel_animation_header_;
  _impl_.skel_animation_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::_internal_mutable_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.skel_animation_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(GetArena());
    _impl_.skel_animation_header_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimationHeader*>(p);
  }
  return _impl_.skel_animation_header_;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::mutable_skel_animation_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* _msg = _internal_mutable_skel_animation_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
  return _msg;
}
inline void AnimationDataStreamHeader::set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.skel_animation_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.skel_animation_header_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimationHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.skel_animation_header)
}

// double start_time_code_since_epoch = 5;
inline void AnimationDataStreamHeader::clear_start_time_code_since_epoch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_code_since_epoch_ = 0;
}
inline double AnimationDataStreamHeader::start_time_code_since_epoch() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
  return _internal_start_time_code_since_epoch();
}
inline void AnimationDataStreamHeader::set_start_time_code_since_epoch(double value) {
  _internal_set_start_time_code_since_epoch(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
}
inline double AnimationDataStreamHeader::_internal_start_time_code_since_epoch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_code_since_epoch_;
}
inline void AnimationDataStreamHeader::_internal_set_start_time_code_since_epoch(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_code_since_epoch_ = value;
}

// -------------------------------------------------------------------

// AnimationDataStream

// .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
inline bool AnimationDataStream::has_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader;
}
inline bool AnimationDataStream::_internal_has_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader;
}
inline void AnimationDataStream::set_has_animation_data_stream_header() {
  _impl_._oneof_case_[0] = kAnimationDataStreamHeader;
}
inline void AnimationDataStream::clear_animation_data_stream_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAnimationDataStreamHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.animation_data_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  if (stream_part_case() == kAnimationDataStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& AnimationDataStream::_internal_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader ? *_impl_.stream_part_.animation_data_stream_header_ : reinterpret_cast<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader&>(::nvidia_ace::animation_data::v1::_AnimationDataStreamHeader_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader& AnimationDataStream::animation_data_stream_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  return _internal_animation_data_stream_header();
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::unsafe_arena_release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  if (stream_part_case() == kAnimationDataStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_stream_header_;
    _impl_.stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_animation_data_stream_header();
    _impl_.stream_part_.animation_data_stream_header_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::_internal_mutable_animation_data_stream_header() {
  if (stream_part_case() != kAnimationDataStreamHeader) {
    clear_stream_part();
    set_has_animation_data_stream_header();
    _impl_.stream_part_.animation_data_stream_header_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader>(GetArena());
  }
  return _impl_.stream_part_.animation_data_stream_header_;
}
inline ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* AnimationDataStream::mutable_animation_data_stream_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* _msg = _internal_mutable_animation_data_stream_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
  return _msg;
}

// .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
inline bool AnimationDataStream::has_animation_data() const {
  return stream_part_case() == kAnimationData;
}
inline bool AnimationDataStream::_internal_has_animation_data() const {
  return stream_part_case() == kAnimationData;
}
inline void AnimationDataStream::set_has_animation_data() {
  _impl_._oneof_case_[0] = kAnimationData;
}
inline void AnimationDataStream::clear_animation_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAnimationData) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.animation_data_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::release_animation_data() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  if (stream_part_case() == kAnimationData) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::_internal_animation_data() const {
  return stream_part_case() == kAnimationData ? *_impl_.stream_part_.animation_data_ : reinterpret_cast<::nvidia_ace::animation_data::v1::AnimationData&>(::nvidia_ace::animation_data::v1::_AnimationData_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::animation_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  return _internal_animation_data();
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::unsafe_arena_release_animation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  if (stream_part_case() == kAnimationData) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_;
    _impl_.stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_animation_data();
    _impl_.stream_part_.animation_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::_internal_mutable_animation_data() {
  if (stream_part_case() != kAnimationData) {
    clear_stream_part();
    set_has_animation_data();
    _impl_.stream_part_.animation_data_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::AnimationData>(GetArena());
  }
  return _impl_.stream_part_.animation_data_;
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::mutable_animation_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::animation_data::v1::AnimationData* _msg = _internal_mutable_animation_data();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
  return _msg;
}

// .nvidia_ace.status.v1.Status status = 3;
inline bool AnimationDataStream::has_status() const {
  return stream_part_case() == kStatus;
}
inline bool AnimationDataStream::_internal_has_status() const {
  return stream_part_case() == kStatus;
}
inline void AnimationDataStream::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::release_status() {
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  if (stream_part_case() == kStatus) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::_internal_status() const {
  return stream_part_case() == kStatus ? *_impl_.stream_part_.status_ : reinterpret_cast<::nvidia_ace::status::v1::Status&>(::nvidia_ace::status::v1::_Status_default_instance_);
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  return _internal_status();
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  if (stream_part_case() == kStatus) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.status_;
    _impl_.stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_status();
    _impl_.stream_part_.status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.status)
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::_internal_mutable_status() {
  if (stream_part_case() != kStatus) {
    clear_stream_part();
    set_has_status();
    _impl_.stream_part_.status_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::status::v1::Status>(GetArena());
  }
  return _impl_.stream_part_.status_;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::status::v1::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationDataStream.status)
  return _msg;
}

inline bool AnimationDataStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AnimationDataStream::clear_has_stream_part() {
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AnimationDataStream::StreamPartCase AnimationDataStream::stream_part_case() const {
  return AnimationDataStream::StreamPartCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AnimationData

// optional .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
inline bool AnimationData::has_skel_animation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skel_animation_ != nullptr);
  return value;
}
inline void AnimationData::clear_skel_animation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.skel_animation_ != nullptr) _impl_.skel_animation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimation& AnimationData::_internal_skel_animation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::SkelAnimation* p = _impl_.skel_animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::SkelAnimation&>(::nvidia_ace::animation_data::v1::_SkelAnimation_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimation& AnimationData::skel_animation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
  return _internal_skel_animation();
}
inline void AnimationData::unsafe_arena_set_allocated_skel_animation(::nvidia_ace::animation_data::v1::SkelAnimation* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.skel_animation_);
  }
  _impl_.skel_animation_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::release_skel_animation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::SkelAnimation* released = _impl_.skel_animation_;
  _impl_.skel_animation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::unsafe_arena_release_skel_animation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationData.skel_animation)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::SkelAnimation* temp = _impl_.skel_animation_;
  _impl_.skel_animation_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::_internal_mutable_skel_animation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.skel_animation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::SkelAnimation>(GetArena());
    _impl_.skel_animation_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimation*>(p);
  }
  return _impl_.skel_animation_;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimation* AnimationData::mutable_skel_animation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::animation_data::v1::SkelAnimation* _msg = _internal_mutable_skel_animation();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
  return _msg;
}
inline void AnimationData::set_allocated_skel_animation(::nvidia_ace::animation_data::v1::SkelAnimation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.skel_animation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.skel_animation_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimation*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationData.skel_animation)
}

// optional .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
inline bool AnimationData::has_audio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_ != nullptr);
  return value;
}
inline void AnimationData::clear_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_ != nullptr) _impl_.audio_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& AnimationData::_internal_audio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::AudioWithTimeCode* p = _impl_.audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::AudioWithTimeCode&>(::nvidia_ace::animation_data::v1::_AudioWithTimeCode_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AudioWithTimeCode& AnimationData::audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationData.audio)
  return _internal_audio();
}
inline void AnimationData::unsafe_arena_set_allocated_audio(::nvidia_ace::animation_data::v1::AudioWithTimeCode* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_);
  }
  _impl_.audio_ = reinterpret_cast<::nvidia_ace::animation_data::v1::AudioWithTimeCode*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationData.audio)
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* released = _impl_.audio_;
  _impl_.audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::unsafe_arena_release_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationData.audio)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* temp = _impl_.audio_;
  _impl_.audio_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::_internal_mutable_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::AudioWithTimeCode>(GetArena());
    _impl_.audio_ = reinterpret_cast<::nvidia_ace::animation_data::v1::AudioWithTimeCode*>(p);
  }
  return _impl_.audio_;
}
inline ::nvidia_ace::animation_data::v1::AudioWithTimeCode* AnimationData::mutable_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nvidia_ace::animation_data::v1::AudioWithTimeCode* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationData.audio)
  return _msg;
}
inline void AnimationData::set_allocated_audio(::nvidia_ace::animation_data::v1::AudioWithTimeCode* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.audio_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.audio_ = reinterpret_cast<::nvidia_ace::animation_data::v1::AudioWithTimeCode*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationData.audio)
}

// optional .nvidia_ace.animation_data.v1.Camera camera = 3;
inline bool AnimationData::has_camera() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camera_ != nullptr);
  return value;
}
inline void AnimationData::clear_camera() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_ != nullptr) _impl_.camera_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::nvidia_ace::animation_data::v1::Camera& AnimationData::_internal_camera() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::Camera* p = _impl_.camera_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::Camera&>(::nvidia_ace::animation_data::v1::_Camera_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::Camera& AnimationData::camera() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AnimationData.camera)
  return _internal_camera();
}
inline void AnimationData::unsafe_arena_set_allocated_camera(::nvidia_ace::animation_data::v1::Camera* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.camera_);
  }
  _impl_.camera_ = reinterpret_cast<::nvidia_ace::animation_data::v1::Camera*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.AnimationData.camera)
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::release_camera() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::animation_data::v1::Camera* released = _impl_.camera_;
  _impl_.camera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::unsafe_arena_release_camera() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AnimationData.camera)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::animation_data::v1::Camera* temp = _impl_.camera_;
  _impl_.camera_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::_internal_mutable_camera() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::Camera>(GetArena());
    _impl_.camera_ = reinterpret_cast<::nvidia_ace::animation_data::v1::Camera*>(p);
  }
  return _impl_.camera_;
}
inline ::nvidia_ace::animation_data::v1::Camera* AnimationData::mutable_camera() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::nvidia_ace::animation_data::v1::Camera* _msg = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AnimationData.camera)
  return _msg;
}
inline void AnimationData::set_allocated_camera(::nvidia_ace::animation_data::v1::Camera* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.camera_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.camera_ = reinterpret_cast<::nvidia_ace::animation_data::v1::Camera*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationData.camera)
}

// map<string, .google.protobuf.Any> metadata = 4;
inline int AnimationData::_internal_metadata_size() const {
  return _internal_metadata().size();
}
inline int AnimationData::metadata_size() const {
  return _internal_metadata_size();
}
inline const ::google::protobuf::Map<std::string, ::google::protobuf::Any>& AnimationData::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.metadata_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::google::protobuf::Any>& AnimationData::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nvidia_ace.animation_data.v1.AnimationData.metadata)
  return _internal_metadata();
}
inline ::google::protobuf::Map<std::string, ::google::protobuf::Any>* AnimationData::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.metadata_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::google::protobuf::Any>* AnimationData::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.animation_data.v1.AnimationData.metadata)
  return _internal_mutable_metadata();
}

// -------------------------------------------------------------------

// AudioWithTimeCode

// double time_code = 1;
inline void AudioWithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double AudioWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AudioWithTimeCode.time_code)
  return _internal_time_code();
}
inline void AudioWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AudioWithTimeCode.time_code)
}
inline double AudioWithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void AudioWithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// bytes audio_buffer = 2;
inline void AudioWithTimeCode::clear_audio_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.ClearToEmpty();
}
inline const std::string& AudioWithTimeCode::audio_buffer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
  return _internal_audio_buffer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioWithTimeCode::set_audio_buffer(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}
inline std::string* AudioWithTimeCode::mutable_audio_buffer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_buffer();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
  return _s;
}
inline const std::string& AudioWithTimeCode::_internal_audio_buffer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_buffer_.Get();
}
inline void AudioWithTimeCode::_internal_set_audio_buffer(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.Set(value, GetArena());
}
inline std::string* AudioWithTimeCode::_internal_mutable_audio_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.audio_buffer_.Mutable( GetArena());
}
inline std::string* AudioWithTimeCode::release_audio_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
  return _impl_.audio_buffer_.Release();
}
inline void AudioWithTimeCode::set_allocated_audio_buffer(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_buffer_.IsDefault()) {
          _impl_.audio_buffer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AudioWithTimeCode.audio_buffer)
}

// -------------------------------------------------------------------

// SkelAnimationHeader

// repeated string blend_shapes = 1;
inline int SkelAnimationHeader::_internal_blend_shapes_size() const {
  return _internal_blend_shapes().size();
}
inline int SkelAnimationHeader::blend_shapes_size() const {
  return _internal_blend_shapes_size();
}
inline void SkelAnimationHeader::clear_blend_shapes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blend_shapes_.Clear();
}
inline std::string* SkelAnimationHeader::add_blend_shapes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_blend_shapes()->Add();
  // @@protoc_insertion_point(field_add_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return _s;
}
inline const std::string& SkelAnimationHeader::blend_shapes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return _internal_blend_shapes().Get(index);
}
inline std::string* SkelAnimationHeader::mutable_blend_shapes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return _internal_mutable_blend_shapes()->Mutable(index);
}
inline void SkelAnimationHeader::set_blend_shapes(int index, const std::string& value) {
  _internal_mutable_blend_shapes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::set_blend_shapes(int index, std::string&& value) {
  _internal_mutable_blend_shapes()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::set_blend_shapes(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_blend_shapes()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::set_blend_shapes(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_blend_shapes()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::set_blend_shapes(int index, absl::string_view value) {
  _internal_mutable_blend_shapes()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blend_shapes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blend_shapes()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blend_shapes()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blend_shapes()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline void SkelAnimationHeader::add_blend_shapes(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_blend_shapes()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SkelAnimationHeader::blend_shapes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  return _internal_blend_shapes();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SkelAnimationHeader::mutable_blend_shapes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blend_shapes();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SkelAnimationHeader::_internal_blend_shapes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blend_shapes_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SkelAnimationHeader::_internal_mutable_blend_shapes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blend_shapes_;
}

// repeated string joints = 2;
inline int SkelAnimationHeader::_internal_joints_size() const {
  return _internal_joints().size();
}
inline int SkelAnimationHeader::joints_size() const {
  return _internal_joints_size();
}
inline void SkelAnimationHeader::clear_joints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.joints_.Clear();
}
inline std::string* SkelAnimationHeader::add_joints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_joints()->Add();
  // @@protoc_insertion_point(field_add_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return _s;
}
inline const std::string& SkelAnimationHeader::joints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return _internal_joints().Get(index);
}
inline std::string* SkelAnimationHeader::mutable_joints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return _internal_mutable_joints()->Mutable(index);
}
inline void SkelAnimationHeader::set_joints(int index, const std::string& value) {
  _internal_mutable_joints()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::set_joints(int index, std::string&& value) {
  _internal_mutable_joints()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::set_joints(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_joints()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::set_joints(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_joints()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::set_joints(int index, absl::string_view value) {
  _internal_mutable_joints()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joints()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joints()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joints()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joints()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline void SkelAnimationHeader::add_joints(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_joints()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SkelAnimationHeader::joints() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  return _internal_joints();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SkelAnimationHeader::mutable_joints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimationHeader.joints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_joints();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SkelAnimationHeader::_internal_joints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.joints_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SkelAnimationHeader::_internal_mutable_joints() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.joints_;
}

// -------------------------------------------------------------------

// SkelAnimation

// repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
inline int SkelAnimation::_internal_blend_shape_weights_size() const {
  return _internal_blend_shape_weights().size();
}
inline int SkelAnimation::blend_shape_weights_size() const {
  return _internal_blend_shape_weights_size();
}
inline void SkelAnimation::clear_blend_shape_weights() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.blend_shape_weights_.Clear();
}
inline ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* SkelAnimation::mutable_blend_shape_weights(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return _internal_mutable_blend_shape_weights()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>* SkelAnimation::mutable_blend_shape_weights()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_blend_shape_weights();
}
inline const ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode& SkelAnimation::blend_shape_weights(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return _internal_blend_shape_weights().Get(index);
}
inline ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* SkelAnimation::add_blend_shape_weights() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode* _add = _internal_mutable_blend_shape_weights()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>& SkelAnimation::blend_shape_weights() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.blend_shape_weights)
  return _internal_blend_shape_weights();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>&
SkelAnimation::_internal_blend_shape_weights() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.blend_shape_weights_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>*
SkelAnimation::_internal_mutable_blend_shape_weights() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.blend_shape_weights_;
}

// repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
inline int SkelAnimation::_internal_translations_size() const {
  return _internal_translations().size();
}
inline int SkelAnimation::translations_size() const {
  return _internal_translations_size();
}
inline void SkelAnimation::clear_translations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.translations_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::mutable_translations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return _internal_mutable_translations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>* SkelAnimation::mutable_translations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_translations();
}
inline const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& SkelAnimation::translations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return _internal_translations().Get(index);
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::add_translations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* _add = _internal_mutable_translations()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>& SkelAnimation::translations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.translations)
  return _internal_translations();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>&
SkelAnimation::_internal_translations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.translations_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>*
SkelAnimation::_internal_mutable_translations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.translations_;
}

// repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
inline int SkelAnimation::_internal_rotations_size() const {
  return _internal_rotations().size();
}
inline int SkelAnimation::rotations_size() const {
  return _internal_rotations_size();
}
inline void SkelAnimation::clear_rotations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotations_.Clear();
}
inline ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* SkelAnimation::mutable_rotations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return _internal_mutable_rotations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>* SkelAnimation::mutable_rotations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rotations();
}
inline const ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode& SkelAnimation::rotations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return _internal_rotations().Get(index);
}
inline ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* SkelAnimation::add_rotations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode* _add = _internal_mutable_rotations()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>& SkelAnimation::rotations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.rotations)
  return _internal_rotations();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>&
SkelAnimation::_internal_rotations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotations_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>*
SkelAnimation::_internal_mutable_rotations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rotations_;
}

// repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
inline int SkelAnimation::_internal_scales_size() const {
  return _internal_scales().size();
}
inline int SkelAnimation::scales_size() const {
  return _internal_scales_size();
}
inline void SkelAnimation::clear_scales() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scales_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::mutable_scales(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return _internal_mutable_scales()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>* SkelAnimation::mutable_scales()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_scales();
}
inline const ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode& SkelAnimation::scales(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return _internal_scales().Get(index);
}
inline ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* SkelAnimation::add_scales() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode* _add = _internal_mutable_scales()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>& SkelAnimation::scales() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.SkelAnimation.scales)
  return _internal_scales();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>&
SkelAnimation::_internal_scales() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scales_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>*
SkelAnimation::_internal_mutable_scales() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.scales_;
}

// -------------------------------------------------------------------

// Camera

// repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
inline int Camera::_internal_position_size() const {
  return _internal_position().size();
}
inline int Camera::position_size() const {
  return _internal_position_size();
}
inline void Camera::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.position_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Camera::mutable_position(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.position)
  return _internal_mutable_position()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>* Camera::mutable_position()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.position)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_position();
}
inline const ::nvidia_ace::animation_data::v1::Float3WithTimeCode& Camera::position(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.position)
  return _internal_position().Get(index);
}
inline ::nvidia_ace::animation_data::v1::Float3WithTimeCode* Camera::add_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::Float3WithTimeCode* _add = _internal_mutable_position()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.position)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>& Camera::position() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.position)
  return _internal_position();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>&
Camera::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.position_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3WithTimeCode>*
Camera::_internal_mutable_position() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.position_;
}

// repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
inline int Camera::_internal_rotation_size() const {
  return _internal_rotation().size();
}
inline int Camera::rotation_size() const {
  return _internal_rotation_size();
}
inline void Camera::clear_rotation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.rotation_.Clear();
}
inline ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Camera::mutable_rotation(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.rotation)
  return _internal_mutable_rotation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>* Camera::mutable_rotation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.rotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_rotation();
}
inline const ::nvidia_ace::animation_data::v1::QuatFWithTimeCode& Camera::rotation(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.rotation)
  return _internal_rotation().Get(index);
}
inline ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* Camera::add_rotation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::QuatFWithTimeCode* _add = _internal_mutable_rotation()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.rotation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>& Camera::rotation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.rotation)
  return _internal_rotation();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>&
Camera::_internal_rotation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.rotation_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>*
Camera::_internal_mutable_rotation() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.rotation_;
}

// repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
inline int Camera::_internal_focal_length_size() const {
  return _internal_focal_length().size();
}
inline int Camera::focal_length_size() const {
  return _internal_focal_length_size();
}
inline void Camera::clear_focal_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focal_length_.Clear();
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::mutable_focal_length(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.focal_length)
  return _internal_mutable_focal_length()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>* Camera::mutable_focal_length()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.focal_length)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_focal_length();
}
inline const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& Camera::focal_length(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.focal_length)
  return _internal_focal_length().Get(index);
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::add_focal_length() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* _add = _internal_mutable_focal_length()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.focal_length)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>& Camera::focal_length() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.focal_length)
  return _internal_focal_length();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>&
Camera::_internal_focal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focal_length_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>*
Camera::_internal_mutable_focal_length() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.focal_length_;
}

// repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
inline int Camera::_internal_focus_distance_size() const {
  return _internal_focus_distance().size();
}
inline int Camera::focus_distance_size() const {
  return _internal_focus_distance_size();
}
inline void Camera::clear_focus_distance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focus_distance_.Clear();
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::mutable_focus_distance(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return _internal_mutable_focus_distance()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>* Camera::mutable_focus_distance()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Camera.focus_distance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_focus_distance();
}
inline const ::nvidia_ace::animation_data::v1::FloatWithTimeCode& Camera::focus_distance(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return _internal_focus_distance().Get(index);
}
inline ::nvidia_ace::animation_data::v1::FloatWithTimeCode* Camera::add_focus_distance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::FloatWithTimeCode* _add = _internal_mutable_focus_distance()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>& Camera::focus_distance() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Camera.focus_distance)
  return _internal_focus_distance();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>&
Camera::_internal_focus_distance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focus_distance_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::FloatWithTimeCode>*
Camera::_internal_mutable_focus_distance() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.focus_distance_;
}

// -------------------------------------------------------------------

// FloatArrayWithTimeCode

// double time_code = 1;
inline void FloatArrayWithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double FloatArrayWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.time_code)
  return _internal_time_code();
}
inline void FloatArrayWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.time_code)
}
inline double FloatArrayWithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void FloatArrayWithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// repeated float values = 2;
inline int FloatArrayWithTimeCode::_internal_values_size() const {
  return _internal_values().size();
}
inline int FloatArrayWithTimeCode::values_size() const {
  return _internal_values_size();
}
inline void FloatArrayWithTimeCode::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline float FloatArrayWithTimeCode::values(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
  return _internal_values().Get(index);
}
inline void FloatArrayWithTimeCode::set_values(int index, float value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
}
inline void FloatArrayWithTimeCode::add_values(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
}
inline const ::google::protobuf::RepeatedField<float>& FloatArrayWithTimeCode::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<float>* FloatArrayWithTimeCode::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<float>&
FloatArrayWithTimeCode::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<float>* FloatArrayWithTimeCode::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// Float3ArrayWithTimeCode

// double time_code = 1;
inline void Float3ArrayWithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double Float3ArrayWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.time_code)
  return _internal_time_code();
}
inline void Float3ArrayWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.time_code)
}
inline double Float3ArrayWithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void Float3ArrayWithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
inline int Float3ArrayWithTimeCode::_internal_values_size() const {
  return _internal_values().size();
}
inline int Float3ArrayWithTimeCode::values_size() const {
  return _internal_values_size();
}
inline void Float3ArrayWithTimeCode::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3ArrayWithTimeCode::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>* Float3ArrayWithTimeCode::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3ArrayWithTimeCode::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return _internal_values().Get(index);
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3ArrayWithTimeCode::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::Float3* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>& Float3ArrayWithTimeCode::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>&
Float3ArrayWithTimeCode::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::Float3>*
Float3ArrayWithTimeCode::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// QuatFArrayWithTimeCode

// double time_code = 1;
inline void QuatFArrayWithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double QuatFArrayWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.time_code)
  return _internal_time_code();
}
inline void QuatFArrayWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.time_code)
}
inline double QuatFArrayWithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void QuatFArrayWithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
inline int QuatFArrayWithTimeCode::_internal_values_size() const {
  return _internal_values().size();
}
inline int QuatFArrayWithTimeCode::values_size() const {
  return _internal_values_size();
}
inline void QuatFArrayWithTimeCode::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFArrayWithTimeCode::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>* QuatFArrayWithTimeCode::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFArrayWithTimeCode::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return _internal_values().Get(index);
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFArrayWithTimeCode::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::animation_data::v1::QuatF* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>& QuatFArrayWithTimeCode::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>&
QuatFArrayWithTimeCode::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::animation_data::v1::QuatF>*
QuatFArrayWithTimeCode::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// Float3WithTimeCode

// double time_code = 1;
inline void Float3WithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double Float3WithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3WithTimeCode.time_code)
  return _internal_time_code();
}
inline void Float3WithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3WithTimeCode.time_code)
}
inline double Float3WithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void Float3WithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// .nvidia_ace.animation_data.v1.Float3 value = 2;
inline bool Float3WithTimeCode::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void Float3WithTimeCode::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3WithTimeCode::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::Float3* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::Float3&>(::nvidia_ace::animation_data::v1::_Float3_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::Float3& Float3WithTimeCode::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
  return _internal_value();
}
inline void Float3WithTimeCode::unsafe_arena_set_allocated_value(::nvidia_ace::animation_data::v1::Float3* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::nvidia_ace::animation_data::v1::Float3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::Float3* released = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::unsafe_arena_release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::Float3* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::Float3>(GetArena());
    _impl_.value_ = reinterpret_cast<::nvidia_ace::animation_data::v1::Float3*>(p);
  }
  return _impl_.value_;
}
inline ::nvidia_ace::animation_data::v1::Float3* Float3WithTimeCode::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::animation_data::v1::Float3* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
  return _msg;
}
inline void Float3WithTimeCode::set_allocated_value(::nvidia_ace::animation_data::v1::Float3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.value_ = reinterpret_cast<::nvidia_ace::animation_data::v1::Float3*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.Float3WithTimeCode.value)
}

// -------------------------------------------------------------------

// QuatFWithTimeCode

// double time_code = 1;
inline void QuatFWithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double QuatFWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFWithTimeCode.time_code)
  return _internal_time_code();
}
inline void QuatFWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatFWithTimeCode.time_code)
}
inline double QuatFWithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void QuatFWithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// .nvidia_ace.animation_data.v1.QuatF value = 2;
inline bool QuatFWithTimeCode::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void QuatFWithTimeCode::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFWithTimeCode::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::QuatF* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::QuatF&>(::nvidia_ace::animation_data::v1::_QuatF_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::QuatF& QuatFWithTimeCode::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
  return _internal_value();
}
inline void QuatFWithTimeCode::unsafe_arena_set_allocated_value(::nvidia_ace::animation_data::v1::QuatF* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::nvidia_ace::animation_data::v1::QuatF*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::QuatF* released = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::unsafe_arena_release_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_data::v1::QuatF* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::_internal_mutable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::QuatF>(GetArena());
    _impl_.value_ = reinterpret_cast<::nvidia_ace::animation_data::v1::QuatF*>(p);
  }
  return _impl_.value_;
}
inline ::nvidia_ace::animation_data::v1::QuatF* QuatFWithTimeCode::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::animation_data::v1::QuatF* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
  return _msg;
}
inline void QuatFWithTimeCode::set_allocated_value(::nvidia_ace::animation_data::v1::QuatF* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.value_ = reinterpret_cast<::nvidia_ace::animation_data::v1::QuatF*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.QuatFWithTimeCode.value)
}

// -------------------------------------------------------------------

// FloatWithTimeCode

// double time_code = 1;
inline void FloatWithTimeCode::clear_time_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = 0;
}
inline double FloatWithTimeCode::time_code() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatWithTimeCode.time_code)
  return _internal_time_code();
}
inline void FloatWithTimeCode::set_time_code(double value) {
  _internal_set_time_code(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatWithTimeCode.time_code)
}
inline double FloatWithTimeCode::_internal_time_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_code_;
}
inline void FloatWithTimeCode::_internal_set_time_code(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_code_ = value;
}

// float value = 2;
inline void FloatWithTimeCode::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0;
}
inline float FloatWithTimeCode::value() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.FloatWithTimeCode.value)
  return _internal_value();
}
inline void FloatWithTimeCode::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.FloatWithTimeCode.value)
}
inline float FloatWithTimeCode::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void FloatWithTimeCode::_internal_set_value(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = value;
}

// -------------------------------------------------------------------

// QuatF

// float real = 1;
inline void QuatF::clear_real() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_ = 0;
}
inline float QuatF::real() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.real)
  return _internal_real();
}
inline void QuatF::set_real(float value) {
  _internal_set_real(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.real)
}
inline float QuatF::_internal_real() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_;
}
inline void QuatF::_internal_set_real(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_ = value;
}

// float i = 2;
inline void QuatF::clear_i() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.i_ = 0;
}
inline float QuatF::i() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.i)
  return _internal_i();
}
inline void QuatF::set_i(float value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.i)
}
inline float QuatF::_internal_i() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.i_;
}
inline void QuatF::_internal_set_i(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.i_ = value;
}

// float j = 3;
inline void QuatF::clear_j() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.j_ = 0;
}
inline float QuatF::j() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.j)
  return _internal_j();
}
inline void QuatF::set_j(float value) {
  _internal_set_j(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.j)
}
inline float QuatF::_internal_j() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.j_;
}
inline void QuatF::_internal_set_j(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.j_ = value;
}

// float k = 4;
inline void QuatF::clear_k() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k_ = 0;
}
inline float QuatF::k() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.QuatF.k)
  return _internal_k();
}
inline void QuatF::set_k(float value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.QuatF.k)
}
inline float QuatF::_internal_k() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.k_;
}
inline void QuatF::_internal_set_k(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.k_ = value;
}

// -------------------------------------------------------------------

// Float3

// float x = 1;
inline void Float3::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float Float3::x() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3.x)
  return _internal_x();
}
inline void Float3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3.x)
}
inline float Float3::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Float3::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = value;
}

// float y = 2;
inline void Float3::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float Float3::y() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3.y)
  return _internal_y();
}
inline void Float3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3.y)
}
inline float Float3::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Float3::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = value;
}

// float z = 3;
inline void Float3::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float Float3::z() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.animation_data.v1.Float3.z)
  return _internal_z();
}
inline void Float3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.animation_data.v1.Float3.z)
}
inline float Float3::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Float3::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_2epb_2eh
