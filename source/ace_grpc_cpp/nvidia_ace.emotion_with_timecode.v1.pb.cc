// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.emotion_with_timecode.v1.proto
// Protobuf C++ Version: 5.26.0

#include "nvidia_ace.emotion_with_timecode.v1.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nvidia_ace {
namespace emotion_with_timecode {
namespace v1 {
      template <typename>
PROTOBUF_CONSTEXPR EmotionWithTimeCode_EmotionEntry_DoNotUse::EmotionWithTimeCode_EmotionEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct EmotionWithTimeCode_EmotionEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmotionWithTimeCode_EmotionEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmotionWithTimeCode_EmotionEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EmotionWithTimeCode_EmotionEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmotionWithTimeCode_EmotionEntry_DoNotUseDefaultTypeInternal _EmotionWithTimeCode_EmotionEntry_DoNotUse_default_instance_;

inline constexpr EmotionWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : emotion_{},
        time_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EmotionWithTimeCode::EmotionWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EmotionWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmotionWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmotionWithTimeCodeDefaultTypeInternal() {}
  union {
    EmotionWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmotionWithTimeCodeDefaultTypeInternal _EmotionWithTimeCode_default_instance_;
}  // namespace v1
}  // namespace emotion_with_timecode
}  // namespace nvidia_ace
static ::_pb::Metadata file_level_metadata_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = nullptr;
const ::uint32_t
    TableStruct_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse, value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode, _impl_.emotion_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode_EmotionEntry_DoNotUse)},
        {12, -1, -1, sizeof(::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::nvidia_ace::emotion_with_timecode::v1::_EmotionWithTimeCode_EmotionEntry_DoNotUse_default_instance_._instance,
    &::nvidia_ace::emotion_with_timecode::v1::_EmotionWithTimeCode_default_instance_._instance,
};
const char descriptor_table_protodef_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n)nvidia_ace.emotion_with_timecode.v1.pr"
    "oto\022#nvidia_ace.emotion_with_timecode.v1"
    "\"\260\001\n\023EmotionWithTimeCode\022\021\n\ttime_code\030\001 "
    "\001(\001\022V\n\007emotion\030\002 \003(\0132E.nvidia_ace.emotio"
    "n_with_timecode.v1.EmotionWithTimeCode.E"
    "motionEntry\032.\n\014EmotionEntry\022\013\n\003key\030\001 \001(\t"
    "\022\r\n\005value\030\002 \001(\002:\0028\001b\006proto3"
};
static ::absl::once_flag descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto = {
    false,
    false,
    267,
    descriptor_table_protodef_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto,
    "nvidia_ace.emotion_with_timecode.v1.proto",
    &descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto::offsets,
    file_level_metadata_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto,
    file_level_enum_descriptors_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto,
    file_level_service_descriptors_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_getter() {
  return &descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto;
}
namespace nvidia_ace {
namespace emotion_with_timecode {
namespace v1 {
// ===================================================================

EmotionWithTimeCode_EmotionEntry_DoNotUse::EmotionWithTimeCode_EmotionEntry_DoNotUse() {}
EmotionWithTimeCode_EmotionEntry_DoNotUse::EmotionWithTimeCode_EmotionEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata EmotionWithTimeCode_EmotionEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto[0]);
}
// ===================================================================

class EmotionWithTimeCode::_Internal {
 public:
};

EmotionWithTimeCode::EmotionWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE EmotionWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : emotion_{visibility, arena, from.emotion_},
        _cached_size_{0} {}

EmotionWithTimeCode::EmotionWithTimeCode(
    ::google::protobuf::Arena* arena,
    const EmotionWithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  EmotionWithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE EmotionWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : emotion_{visibility, arena},
        _cached_size_{0} {}

inline void EmotionWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_code_ = {};
}
EmotionWithTimeCode::~EmotionWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EmotionWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
EmotionWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(EmotionWithTimeCode, _impl_._cached_size_),
              false,
          },
          &EmotionWithTimeCode::MergeImpl,
          &EmotionWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void EmotionWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.emotion_.Clear();
  _impl_.time_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EmotionWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 71, 2> EmotionWithTimeCode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EmotionWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(EmotionWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(EmotionWithTimeCode, _impl_.time_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // map<string, float> emotion = 2;
    {PROTOBUF_FIELD_OFFSET(EmotionWithTimeCode, _impl_.emotion_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(EmotionWithTimeCode()._impl_.emotion_)>(
        1, 0, 0, 9,
        2)},
  }}, {{
    "\67\0\7\0\0\0\0\0"
    "nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode"
    "emotion"
  }},
};

::uint8_t* EmotionWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  // map<string, float> emotion = 2;
  if (!_internal_emotion().empty()) {
    using MapType = ::google::protobuf::Map<std::string, float>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, float,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_FLOAT>;
    const auto& field = _internal_emotion();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode.emotion");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode.emotion");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  return target;
}

::size_t EmotionWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> emotion = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_emotion_size());
  for (const auto& entry : _internal_emotion()) {
    total_size += _pbi::MapEntryFuncs<std::string, float,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_FLOAT>::ByteSizeLong(entry.first, entry.second);
  }
  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void EmotionWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EmotionWithTimeCode*>(&to_msg);
  auto& from = static_cast<const EmotionWithTimeCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.emotion_.MergeFrom(from._impl_.emotion_);
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EmotionWithTimeCode::CopyFrom(const EmotionWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EmotionWithTimeCode::IsInitialized() const {
  return true;
}

void EmotionWithTimeCode::InternalSwap(EmotionWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.emotion_.InternalSwap(&other->_impl_.emotion_);
        swap(_impl_.time_code_, other->_impl_.time_code_);
}

::google::protobuf::Metadata EmotionWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace emotion_with_timecode
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_nvidia_5face_2eemotion_5fwith_5ftimecode_2ev1_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
