// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia_ace.services.animation_controller.v1.proto
#ifndef GRPC_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto__INCLUDED
#define GRPC_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto__INCLUDED

#include "nvidia_ace.services.animation_controller.v1.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace nvidia_ace {
namespace services {
namespace animation_controller {
namespace v1 {

class AnimationControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "nvidia_ace.services.animation_controller.v1.AnimationControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // First request an ID to communicate with the service.
    virtual ::grpc::Status RequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>> AsyncRequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>>(AsyncRequestAnimationIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>> PrepareAsyncRequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>>(PrepareAsyncRequestAnimationIdsRaw(context, request, cq));
    }
    // Then start pulling animation data.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>> PullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>>(PullAnimationDataStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>> AsyncPullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>>(AsyncPullAnimationDataStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>> PrepareAsyncPullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>>(PrepareAsyncPullAnimationDataStreamRaw(context, request, cq));
    }
    // Send audio data as needed.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>> PushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>>(PushAudioStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>> AsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>>(AsyncPushAudioStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>> PrepareAsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>>(PrepareAsyncPushAudioStreamRaw(context, response, cq));
    }
    // Update animation graph variables as needed.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>> UpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>>(UpdateAnimationGraphVariableRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>> AsyncUpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>>(AsyncUpdateAnimationGraphVariableRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>> PrepareAsyncUpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>>(PrepareAsyncUpdateAnimationGraphVariableRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // First request an ID to communicate with the service.
      virtual void RequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Then start pulling animation data.
      virtual void PullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds* request, ::grpc::ClientReadReactor< ::nvidia_ace::animation_data::v1::AnimationDataStream>* reactor) = 0;
      // Send audio data as needed.
      virtual void PushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::ClientWriteReactor< ::nvidia_ace::a2f::v1::AudioStream>* reactor) = 0;
      // Update animation graph variables as needed.
      virtual void UpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::ClientWriteReactor< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* AsyncRequestAnimationIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* PrepareAsyncRequestAnimationIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>* PullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AsyncPullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nvidia_ace::animation_data::v1::AnimationDataStream>* PrepareAsyncPullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>* PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>* AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::a2f::v1::AudioStream>* PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* UpdateAnimationGraphVariableRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* AsyncUpdateAnimationGraphVariableRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* PrepareAsyncUpdateAnimationGraphVariableRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>> AsyncRequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>>(AsyncRequestAnimationIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>> PrepareAsyncRequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>>(PrepareAsyncRequestAnimationIdsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>> PullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>>(PullAnimationDataStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>> AsyncPullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>>(AsyncPullAnimationDataStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>> PrepareAsyncPullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>>(PrepareAsyncPullAnimationDataStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::nvidia_ace::a2f::v1::AudioStream>> PushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::nvidia_ace::a2f::v1::AudioStream>>(PushAudioStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::a2f::v1::AudioStream>> AsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::a2f::v1::AudioStream>>(AsyncPushAudioStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::a2f::v1::AudioStream>> PrepareAsyncPushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::a2f::v1::AudioStream>>(PrepareAsyncPushAudioStreamRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>> UpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>>(UpdateAnimationGraphVariableRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>> AsyncUpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>>(AsyncUpdateAnimationGraphVariableRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>> PrepareAsyncUpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>>(PrepareAsyncUpdateAnimationGraphVariableRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response, std::function<void(::grpc::Status)>) override;
      void RequestAnimationIds(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PullAnimationDataStream(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds* request, ::grpc::ClientReadReactor< ::nvidia_ace::animation_data::v1::AnimationDataStream>* reactor) override;
      void PushAudioStream(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::ClientWriteReactor< ::nvidia_ace::a2f::v1::AudioStream>* reactor) override;
      void UpdateAnimationGraphVariable(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::ClientWriteReactor< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* AsyncRequestAnimationIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* PrepareAsyncRequestAnimationIdsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* PullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request) override;
    ::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* AsyncPullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::nvidia_ace::animation_data::v1::AnimationDataStream>* PrepareAsyncPullAnimationDataStreamRaw(::grpc::ClientContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::nvidia_ace::a2f::v1::AudioStream>* PushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) override;
    ::grpc::ClientAsyncWriter< ::nvidia_ace::a2f::v1::AudioStream>* AsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::nvidia_ace::a2f::v1::AudioStream>* PrepareAsyncPushAudioStreamRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* UpdateAnimationGraphVariableRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response) override;
    ::grpc::ClientAsyncWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* AsyncUpdateAnimationGraphVariableRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* PrepareAsyncUpdateAnimationGraphVariableRaw(::grpc::ClientContext* context, ::nvidia_ace::status::v1::Status* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RequestAnimationIds_;
    const ::grpc::internal::RpcMethod rpcmethod_PullAnimationDataStream_;
    const ::grpc::internal::RpcMethod rpcmethod_PushAudioStream_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAnimationGraphVariable_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // First request an ID to communicate with the service.
    virtual ::grpc::Status RequestAnimationIds(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response);
    // Then start pulling animation data.
    virtual ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds* request, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* writer);
    // Send audio data as needed.
    virtual ::grpc::Status PushAudioStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia_ace::a2f::v1::AudioStream>* reader, ::nvidia_ace::status::v1::Status* response);
    // Update animation graph variables as needed.
    virtual ::grpc::Status UpdateAnimationGraphVariable(::grpc::ServerContext* context, ::grpc::ServerReader< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* reader, ::nvidia_ace::status::v1::Status* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestAnimationIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestAnimationIds() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RequestAnimationIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAnimationIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestAnimationIds(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullAnimationDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullAnimationDataStream() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PullAnimationDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullAnimationDataStream(::grpc::ServerContext* context, ::nvidia_ace::animation_id::v1::AnimationIds* request, ::grpc::ServerAsyncWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::a2f::v1::AudioStream>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudioStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::nvidia_ace::status::v1::Status, ::nvidia_ace::a2f::v1::AudioStream>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAnimationGraphVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAnimationGraphVariable() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateAnimationGraphVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnimationGraphVariable(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAnimationGraphVariable(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::nvidia_ace::status::v1::Status, ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RequestAnimationIds<WithAsyncMethod_PullAnimationDataStream<WithAsyncMethod_PushAudioStream<WithAsyncMethod_UpdateAnimationGraphVariable<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RequestAnimationIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestAnimationIds() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* response) { return this->RequestAnimationIds(context, request, response); }));}
    void SetMessageAllocatorFor_RequestAnimationIds(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestAnimationIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAnimationIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestAnimationIds(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullAnimationDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullAnimationDataStream() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::nvidia_ace::animation_id::v1::AnimationIds, ::nvidia_ace::animation_data::v1::AnimationDataStream>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nvidia_ace::animation_id::v1::AnimationIds* request) { return this->PullAnimationDataStream(context, request); }));
    }
    ~WithCallbackMethod_PullAnimationDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::nvidia_ace::animation_data::v1::AnimationDataStream>* PullAnimationDataStream(
      ::grpc::CallbackServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::nvidia_ace::a2f::v1::AudioStream, ::nvidia_ace::status::v1::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, ::nvidia_ace::status::v1::Status* response) { return this->PushAudioStream(context, response); }));
    }
    ~WithCallbackMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::a2f::v1::AudioStream>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::nvidia_ace::a2f::v1::AudioStream>* PushAudioStream(
      ::grpc::CallbackServerContext* /*context*/, ::nvidia_ace::status::v1::Status* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateAnimationGraphVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateAnimationGraphVariable() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest, ::nvidia_ace::status::v1::Status>(
            [this](
                   ::grpc::CallbackServerContext* context, ::nvidia_ace::status::v1::Status* response) { return this->UpdateAnimationGraphVariable(context, response); }));
    }
    ~WithCallbackMethod_UpdateAnimationGraphVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnimationGraphVariable(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* UpdateAnimationGraphVariable(
      ::grpc::CallbackServerContext* /*context*/, ::nvidia_ace::status::v1::Status* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RequestAnimationIds<WithCallbackMethod_PullAnimationDataStream<WithCallbackMethod_PushAudioStream<WithCallbackMethod_UpdateAnimationGraphVariable<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RequestAnimationIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestAnimationIds() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RequestAnimationIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAnimationIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullAnimationDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullAnimationDataStream() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PullAnimationDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::a2f::v1::AudioStream>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAnimationGraphVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAnimationGraphVariable() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateAnimationGraphVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnimationGraphVariable(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestAnimationIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestAnimationIds() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RequestAnimationIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAnimationIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestAnimationIds(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullAnimationDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullAnimationDataStream() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PullAnimationDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullAnimationDataStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::a2f::v1::AudioStream>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPushAudioStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAnimationGraphVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAnimationGraphVariable() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateAnimationGraphVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnimationGraphVariable(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAnimationGraphVariable(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestAnimationIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestAnimationIds() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestAnimationIds(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestAnimationIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestAnimationIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestAnimationIds(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullAnimationDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullAnimationDataStream() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->PullAnimationDataStream(context, request); }));
    }
    ~WithRawCallbackMethod_PullAnimationDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* PullAnimationDataStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PushAudioStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PushAudioStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->PushAudioStream(context, response); }));
    }
    ~WithRawCallbackMethod_PushAudioStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PushAudioStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::a2f::v1::AudioStream>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* PushAudioStream(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateAnimationGraphVariable : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateAnimationGraphVariable() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->UpdateAnimationGraphVariable(context, response); }));
    }
    ~WithRawCallbackMethod_UpdateAnimationGraphVariable() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAnimationGraphVariable(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::nvidia_ace::services::animation_controller::v1::AnimationGraphRequest>* /*reader*/, ::nvidia_ace::status::v1::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UpdateAnimationGraphVariable(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestAnimationIds : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestAnimationIds() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* streamer) {
                       return this->StreamedRequestAnimationIds(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestAnimationIds() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestAnimationIds(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestAnimationIds(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::nvidia_ace::services::animation_controller::v1::AnimationIdsOrStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RequestAnimationIds<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PullAnimationDataStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PullAnimationDataStream() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::nvidia_ace::animation_id::v1::AnimationIds, ::nvidia_ace::animation_data::v1::AnimationDataStream>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::nvidia_ace::animation_id::v1::AnimationIds, ::nvidia_ace::animation_data::v1::AnimationDataStream>* streamer) {
                       return this->StreamedPullAnimationDataStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_PullAnimationDataStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullAnimationDataStream(::grpc::ServerContext* /*context*/, const ::nvidia_ace::animation_id::v1::AnimationIds* /*request*/, ::grpc::ServerWriter< ::nvidia_ace::animation_data::v1::AnimationDataStream>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPullAnimationDataStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::nvidia_ace::animation_id::v1::AnimationIds,::nvidia_ace::animation_data::v1::AnimationDataStream>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PullAnimationDataStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_RequestAnimationIds<WithSplitStreamingMethod_PullAnimationDataStream<Service > > StreamedService;
};

}  // namespace v1
}  // namespace animation_controller
}  // namespace services
}  // namespace nvidia_ace


#endif  // GRPC_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto__INCLUDED
