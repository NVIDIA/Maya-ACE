// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: health.proto

#ifndef GRPC_MOCK_health_2eproto__INCLUDED
#define GRPC_MOCK_health_2eproto__INCLUDED

#include "health.pb.h"
#include "health.grpc.pb.h"

#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/sync_stream.h>
#include <gmock/gmock.h>
namespace grpc {
namespace health {
namespace v1 {

class MockHealthStub : public Health::StubInterface {
 public:
  MOCK_METHOD3(Check, ::grpc::Status(::grpc::ClientContext* context, const ::grpc::health::v1::HealthCheckRequest& request, ::grpc::health::v1::HealthCheckResponse* response));
  MOCK_METHOD3(AsyncCheckRaw, ::grpc::ClientAsyncResponseReaderInterface< ::grpc::health::v1::HealthCheckResponse>*(::grpc::ClientContext* context, const ::grpc::health::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCheckRaw, ::grpc::ClientAsyncResponseReaderInterface< ::grpc::health::v1::HealthCheckResponse>*(::grpc::ClientContext* context, const ::grpc::health::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(WatchRaw, ::grpc::ClientReaderInterface< ::grpc::health::v1::HealthCheckResponse>*(::grpc::ClientContext* context, const ::grpc::health::v1::HealthCheckRequest& request));
  MOCK_METHOD4(AsyncWatchRaw, ::grpc::ClientAsyncReaderInterface< ::grpc::health::v1::HealthCheckResponse>*(::grpc::ClientContext* context, const ::grpc::health::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncWatchRaw, ::grpc::ClientAsyncReaderInterface< ::grpc::health::v1::HealthCheckResponse>*(::grpc::ClientContext* context, const ::grpc::health::v1::HealthCheckRequest& request, ::grpc::CompletionQueue* cq));
};

}  // namespace v1
}  // namespace health
}  // namespace grpc


#endif  // GRPC_MOCK_health_2eproto__INCLUDED
