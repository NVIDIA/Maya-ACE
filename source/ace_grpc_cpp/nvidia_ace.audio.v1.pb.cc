// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.audio.v1.proto
// Protobuf C++ Version: 5.26.0

#include "nvidia_ace.audio.v1.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nvidia_ace {
namespace audio {
namespace v1 {

inline constexpr AudioHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : audio_format_{static_cast< ::nvidia_ace::audio::v1::AudioHeader_AudioFormat >(0)},
        channel_count_{0u},
        samples_per_second_{0u},
        bits_per_sample_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AudioHeader::AudioHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioHeaderDefaultTypeInternal() {}
  union {
    AudioHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioHeaderDefaultTypeInternal _AudioHeader_default_instance_;
}  // namespace v1
}  // namespace audio
}  // namespace nvidia_ace
static ::_pb::Metadata file_level_metadata_nvidia_5face_2eaudio_2ev1_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nvidia_5face_2eaudio_2ev1_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_nvidia_5face_2eaudio_2ev1_2eproto = nullptr;
const ::uint32_t
    TableStruct_nvidia_5face_2eaudio_2ev1_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::audio::v1::AudioHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::audio::v1::AudioHeader, _impl_.audio_format_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::audio::v1::AudioHeader, _impl_.channel_count_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::audio::v1::AudioHeader, _impl_.samples_per_second_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::audio::v1::AudioHeader, _impl_.bits_per_sample_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::nvidia_ace::audio::v1::AudioHeader)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::nvidia_ace::audio::v1::_AudioHeader_default_instance_._instance,
};
const char descriptor_table_protodef_nvidia_5face_2eaudio_2ev1_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031nvidia_ace.audio.v1.proto\022\023nvidia_ace."
    "audio.v1\"\302\001\n\013AudioHeader\022B\n\014audio_format"
    "\030\001 \001(\0162,.nvidia_ace.audio.v1.AudioHeader"
    ".AudioFormat\022\025\n\rchannel_count\030\002 \001(\r\022\032\n\022s"
    "amples_per_second\030\003 \001(\r\022\027\n\017bits_per_samp"
    "le\030\004 \001(\r\"#\n\013AudioFormat\022\024\n\020AUDIO_FORMAT_"
    "PCM\020\000b\006proto3"
};
static ::absl::once_flag descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto = {
    false,
    false,
    253,
    descriptor_table_protodef_nvidia_5face_2eaudio_2ev1_2eproto,
    "nvidia_ace.audio.v1.proto",
    &descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_nvidia_5face_2eaudio_2ev1_2eproto::offsets,
    file_level_metadata_nvidia_5face_2eaudio_2ev1_2eproto,
    file_level_enum_descriptors_nvidia_5face_2eaudio_2ev1_2eproto,
    file_level_service_descriptors_nvidia_5face_2eaudio_2ev1_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto_getter() {
  return &descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto;
}
namespace nvidia_ace {
namespace audio {
namespace v1 {
const ::google::protobuf::EnumDescriptor* AudioHeader_AudioFormat_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto);
  return file_level_enum_descriptors_nvidia_5face_2eaudio_2ev1_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AudioHeader_AudioFormat_internal_data_[] = {
    65536u, 0u, };
bool AudioHeader_AudioFormat_IsValid(int value) {
  return 0 <= value && value <= 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr AudioHeader_AudioFormat AudioHeader::AUDIO_FORMAT_PCM;
constexpr AudioHeader_AudioFormat AudioHeader::AudioFormat_MIN;
constexpr AudioHeader_AudioFormat AudioHeader::AudioFormat_MAX;
constexpr int AudioHeader::AudioFormat_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class AudioHeader::_Internal {
 public:
};

AudioHeader::AudioHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.audio.v1.AudioHeader)
}
AudioHeader::AudioHeader(
    ::google::protobuf::Arena* arena, const AudioHeader& from)
    : AudioHeader(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AudioHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AudioHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_format_),
           0,
           offsetof(Impl_, bits_per_sample_) -
               offsetof(Impl_, audio_format_) +
               sizeof(Impl_::bits_per_sample_));
}
AudioHeader::~AudioHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.audio.v1.AudioHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AudioHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_._cached_size_),
              false,
          },
          &AudioHeader::MergeImpl,
          &AudioHeader::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AudioHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.audio.v1.AudioHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.audio_format_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bits_per_sample_) -
      reinterpret_cast<char*>(&_impl_.audio_format_)) + sizeof(_impl_.bits_per_sample_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AudioHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> AudioHeader::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AudioHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::audio::v1::AudioHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 bits_per_sample = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioHeader, _impl_.bits_per_sample_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.bits_per_sample_)}},
    // .nvidia_ace.audio.v1.AudioHeader.AudioFormat audio_format = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioHeader, _impl_.audio_format_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.audio_format_)}},
    // uint32 channel_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioHeader, _impl_.channel_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.channel_count_)}},
    // uint32 samples_per_second = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AudioHeader, _impl_.samples_per_second_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.samples_per_second_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.audio.v1.AudioHeader.AudioFormat audio_format = 1;
    {PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.audio_format_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 channel_count = 2;
    {PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.channel_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 samples_per_second = 3;
    {PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.samples_per_second_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 bits_per_sample = 4;
    {PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.bits_per_sample_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AudioHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.audio.v1.AudioHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .nvidia_ace.audio.v1.AudioHeader.AudioFormat audio_format = 1;
  if (this->_internal_audio_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_audio_format(), target);
  }

  // uint32 channel_count = 2;
  if (this->_internal_channel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_channel_count(), target);
  }

  // uint32 samples_per_second = 3;
  if (this->_internal_samples_per_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_samples_per_second(), target);
  }

  // uint32 bits_per_sample = 4;
  if (this->_internal_bits_per_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_bits_per_sample(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.audio.v1.AudioHeader)
  return target;
}

::size_t AudioHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.audio.v1.AudioHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.audio.v1.AudioHeader.AudioFormat audio_format = 1;
  if (this->_internal_audio_format() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_audio_format());
  }

  // uint32 channel_count = 2;
  if (this->_internal_channel_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_channel_count());
  }

  // uint32 samples_per_second = 3;
  if (this->_internal_samples_per_second() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_samples_per_second());
  }

  // uint32 bits_per_sample = 4;
  if (this->_internal_bits_per_sample() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_bits_per_sample());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AudioHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioHeader*>(&to_msg);
  auto& from = static_cast<const AudioHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.audio.v1.AudioHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_audio_format() != 0) {
    _this->_impl_.audio_format_ = from._impl_.audio_format_;
  }
  if (from._internal_channel_count() != 0) {
    _this->_impl_.channel_count_ = from._impl_.channel_count_;
  }
  if (from._internal_samples_per_second() != 0) {
    _this->_impl_.samples_per_second_ = from._impl_.samples_per_second_;
  }
  if (from._internal_bits_per_sample() != 0) {
    _this->_impl_.bits_per_sample_ = from._impl_.bits_per_sample_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioHeader::CopyFrom(const AudioHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.audio.v1.AudioHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioHeader::IsInitialized() const {
  return true;
}

void AudioHeader::InternalSwap(AudioHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.bits_per_sample_)
      + sizeof(AudioHeader::_impl_.bits_per_sample_)
      - PROTOBUF_FIELD_OFFSET(AudioHeader, _impl_.audio_format_)>(
          reinterpret_cast<char*>(&_impl_.audio_format_),
          reinterpret_cast<char*>(&other->_impl_.audio_format_));
}

::google::protobuf::Metadata AudioHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eaudio_2ev1_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace audio
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
