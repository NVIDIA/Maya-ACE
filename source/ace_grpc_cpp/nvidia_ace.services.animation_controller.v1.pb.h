// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.services.animation_controller.v1.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "nvidia_ace.controller.v1.pb.h"
#include "nvidia_ace.status.v1.pb.h"
#include "nvidia_ace.animation_id.v1.pb.h"
#include "nvidia_ace.animation_data.v1.pb.h"
#include "nvidia_ace.a2f.v1.pb.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto;
namespace nvidia_ace {
namespace services {
namespace animation_controller {
namespace v1 {
class AnimationGraphRequest;
struct AnimationGraphRequestDefaultTypeInternal;
extern AnimationGraphRequestDefaultTypeInternal _AnimationGraphRequest_default_instance_;
class AnimationIdsOrStatus;
struct AnimationIdsOrStatusDefaultTypeInternal;
extern AnimationIdsOrStatusDefaultTypeInternal _AnimationIdsOrStatus_default_instance_;
}  // namespace v1
}  // namespace animation_controller
}  // namespace services
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nvidia_ace {
namespace services {
namespace animation_controller {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class AnimationIdsOrStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus) */ {
 public:
  inline AnimationIdsOrStatus() : AnimationIdsOrStatus(nullptr) {}
  ~AnimationIdsOrStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationIdsOrStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationIdsOrStatus(const AnimationIdsOrStatus& from) : AnimationIdsOrStatus(nullptr, from) {}
  inline AnimationIdsOrStatus(AnimationIdsOrStatus&& from) noexcept
      : AnimationIdsOrStatus(nullptr, std::move(from)) {}
  inline AnimationIdsOrStatus& operator=(const AnimationIdsOrStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationIdsOrStatus& operator=(AnimationIdsOrStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationIdsOrStatus& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kAnimationIds = 1,
    kStatus = 2,
    RESPONSE_NOT_SET = 0,
  };
  static inline const AnimationIdsOrStatus* internal_default_instance() {
    return reinterpret_cast<const AnimationIdsOrStatus*>(
        &_AnimationIdsOrStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AnimationIdsOrStatus& a, AnimationIdsOrStatus& b) { a.Swap(&b); }
  inline void Swap(AnimationIdsOrStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationIdsOrStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationIdsOrStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationIdsOrStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationIdsOrStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationIdsOrStatus& from) { AnimationIdsOrStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationIdsOrStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus"; }

 protected:
  explicit AnimationIdsOrStatus(::google::protobuf::Arena* arena);
  AnimationIdsOrStatus(::google::protobuf::Arena* arena, const AnimationIdsOrStatus& from);
  AnimationIdsOrStatus(::google::protobuf::Arena* arena, AnimationIdsOrStatus&& from) noexcept
      : AnimationIdsOrStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAnimationIdsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  bool has_animation_ids() const;
  private:
  bool _internal_has_animation_ids() const;

  public:
  void clear_animation_ids() ;
  const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_id::v1::AnimationIds* release_animation_ids();
  ::nvidia_ace::animation_id::v1::AnimationIds* mutable_animation_ids();
  void set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  void unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  ::nvidia_ace::animation_id::v1::AnimationIds* unsafe_arena_release_animation_ids();

  private:
  const ::nvidia_ace::animation_id::v1::AnimationIds& _internal_animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* _internal_mutable_animation_ids();

  public:
  // .nvidia_ace.status.v1.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;

  public:
  void clear_status() ;
  const ::nvidia_ace::status::v1::Status& status() const;
  PROTOBUF_NODISCARD ::nvidia_ace::status::v1::Status* release_status();
  ::nvidia_ace::status::v1::Status* mutable_status();
  void set_allocated_status(::nvidia_ace::status::v1::Status* value);
  void unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* value);
  ::nvidia_ace::status::v1::Status* unsafe_arena_release_status();

  private:
  const ::nvidia_ace::status::v1::Status& _internal_status() const;
  ::nvidia_ace::status::v1::Status* _internal_mutable_status();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus)
 private:
  class _Internal;
  void set_has_animation_ids();
  void set_has_status();
  inline bool has_response() const;
  inline void clear_has_response();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids_;
      ::nvidia_ace::status::v1::Status* status_;
    } response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationGraphRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest) */ {
 public:
  inline AnimationGraphRequest() : AnimationGraphRequest(nullptr) {}
  ~AnimationGraphRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationGraphRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationGraphRequest(const AnimationGraphRequest& from) : AnimationGraphRequest(nullptr, from) {}
  inline AnimationGraphRequest(AnimationGraphRequest&& from) noexcept
      : AnimationGraphRequest(nullptr, std::move(from)) {}
  inline AnimationGraphRequest& operator=(const AnimationGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationGraphRequest& operator=(AnimationGraphRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationGraphRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimationGraphRequest* internal_default_instance() {
    return reinterpret_cast<const AnimationGraphRequest*>(
        &_AnimationGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AnimationGraphRequest& a, AnimationGraphRequest& b) { a.Swap(&b); }
  inline void Swap(AnimationGraphRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationGraphRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationGraphRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationGraphRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationGraphRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationGraphRequest& from) { AnimationGraphRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationGraphRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.services.animation_controller.v1.AnimationGraphRequest"; }

 protected:
  explicit AnimationGraphRequest(::google::protobuf::Arena* arena);
  AnimationGraphRequest(::google::protobuf::Arena* arena, const AnimationGraphRequest& from);
  AnimationGraphRequest(::google::protobuf::Arena* arena, AnimationGraphRequest&& from) noexcept
      : AnimationGraphRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAnimationGraphVariableNameFieldNumber = 2,
    kAnimationGraphVariableValueFieldNumber = 3,
    kAnimationIdsFieldNumber = 1,
  };
  // string animation_graph_variable_name = 2;
  void clear_animation_graph_variable_name() ;
  const std::string& animation_graph_variable_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_animation_graph_variable_name(Arg_&& arg, Args_... args);
  std::string* mutable_animation_graph_variable_name();
  PROTOBUF_NODISCARD std::string* release_animation_graph_variable_name();
  void set_allocated_animation_graph_variable_name(std::string* value);

  private:
  const std::string& _internal_animation_graph_variable_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation_graph_variable_name(
      const std::string& value);
  std::string* _internal_mutable_animation_graph_variable_name();

  public:
  // string animation_graph_variable_value = 3;
  void clear_animation_graph_variable_value() ;
  const std::string& animation_graph_variable_value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_animation_graph_variable_value(Arg_&& arg, Args_... args);
  std::string* mutable_animation_graph_variable_value();
  PROTOBUF_NODISCARD std::string* release_animation_graph_variable_value();
  void set_allocated_animation_graph_variable_value(std::string* value);

  private:
  const std::string& _internal_animation_graph_variable_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_animation_graph_variable_value(
      const std::string& value);
  std::string* _internal_mutable_animation_graph_variable_value();

  public:
  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  bool has_animation_ids() const;
  void clear_animation_ids() ;
  const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_id::v1::AnimationIds* release_animation_ids();
  ::nvidia_ace::animation_id::v1::AnimationIds* mutable_animation_ids();
  void set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  void unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  ::nvidia_ace::animation_id::v1::AnimationIds* unsafe_arena_release_animation_ids();

  private:
  const ::nvidia_ace::animation_id::v1::AnimationIds& _internal_animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* _internal_mutable_animation_ids();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      133, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr animation_graph_variable_name_;
    ::google::protobuf::internal::ArenaStringPtr animation_graph_variable_value_;
    ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AnimationGraphRequest

// .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
inline bool AnimationGraphRequest::has_animation_ids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animation_ids_ != nullptr);
  return value;
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationGraphRequest::_internal_animation_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_id::v1::AnimationIds* p = _impl_.animation_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_id::v1::AnimationIds&>(::nvidia_ace::animation_id::v1::_AnimationIds_default_instance_);
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationGraphRequest::animation_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_ids)
  return _internal_animation_ids();
}
inline void AnimationGraphRequest::unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.animation_ids_);
  }
  _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_ids)
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationGraphRequest::release_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_id::v1::AnimationIds* released = _impl_.animation_ids_;
  _impl_.animation_ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationGraphRequest::unsafe_arena_release_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_ids)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = _impl_.animation_ids_;
  _impl_.animation_ids_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationGraphRequest::_internal_mutable_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.animation_ids_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_id::v1::AnimationIds>(GetArena());
    _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(p);
  }
  return _impl_.animation_ids_;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationGraphRequest::mutable_animation_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::animation_id::v1::AnimationIds* _msg = _internal_mutable_animation_ids();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_ids)
  return _msg;
}
inline void AnimationGraphRequest::set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.animation_ids_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_ids)
}

// string animation_graph_variable_name = 2;
inline void AnimationGraphRequest::clear_animation_graph_variable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_name_.ClearToEmpty();
}
inline const std::string& AnimationGraphRequest::animation_graph_variable_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_name)
  return _internal_animation_graph_variable_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnimationGraphRequest::set_animation_graph_variable_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_name)
}
inline std::string* AnimationGraphRequest::mutable_animation_graph_variable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_animation_graph_variable_name();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_name)
  return _s;
}
inline const std::string& AnimationGraphRequest::_internal_animation_graph_variable_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.animation_graph_variable_name_.Get();
}
inline void AnimationGraphRequest::_internal_set_animation_graph_variable_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_name_.Set(value, GetArena());
}
inline std::string* AnimationGraphRequest::_internal_mutable_animation_graph_variable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.animation_graph_variable_name_.Mutable( GetArena());
}
inline std::string* AnimationGraphRequest::release_animation_graph_variable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_name)
  return _impl_.animation_graph_variable_name_.Release();
}
inline void AnimationGraphRequest::set_allocated_animation_graph_variable_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.animation_graph_variable_name_.IsDefault()) {
          _impl_.animation_graph_variable_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_name)
}

// string animation_graph_variable_value = 3;
inline void AnimationGraphRequest::clear_animation_graph_variable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_value_.ClearToEmpty();
}
inline const std::string& AnimationGraphRequest::animation_graph_variable_value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_value)
  return _internal_animation_graph_variable_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AnimationGraphRequest::set_animation_graph_variable_value(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_value_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_value)
}
inline std::string* AnimationGraphRequest::mutable_animation_graph_variable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_animation_graph_variable_value();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_value)
  return _s;
}
inline const std::string& AnimationGraphRequest::_internal_animation_graph_variable_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.animation_graph_variable_value_.Get();
}
inline void AnimationGraphRequest::_internal_set_animation_graph_variable_value(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_value_.Set(value, GetArena());
}
inline std::string* AnimationGraphRequest::_internal_mutable_animation_graph_variable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.animation_graph_variable_value_.Mutable( GetArena());
}
inline std::string* AnimationGraphRequest::release_animation_graph_variable_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_value)
  return _impl_.animation_graph_variable_value_.Release();
}
inline void AnimationGraphRequest::set_allocated_animation_graph_variable_value(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.animation_graph_variable_value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.animation_graph_variable_value_.IsDefault()) {
          _impl_.animation_graph_variable_value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.services.animation_controller.v1.AnimationGraphRequest.animation_graph_variable_value)
}

// -------------------------------------------------------------------

// AnimationIdsOrStatus

// .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
inline bool AnimationIdsOrStatus::has_animation_ids() const {
  return response_case() == kAnimationIds;
}
inline bool AnimationIdsOrStatus::_internal_has_animation_ids() const {
  return response_case() == kAnimationIds;
}
inline void AnimationIdsOrStatus::set_has_animation_ids() {
  _impl_._oneof_case_[0] = kAnimationIds;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationIdsOrStatus::release_animation_ids() {
  // @@protoc_insertion_point(field_release:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.animation_ids)
  if (response_case() == kAnimationIds) {
    clear_has_response();
    auto* temp = _impl_.response_.animation_ids_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.animation_ids_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationIdsOrStatus::_internal_animation_ids() const {
  return response_case() == kAnimationIds ? *_impl_.response_.animation_ids_ : reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds&>(::nvidia_ace::animation_id::v1::_AnimationIds_default_instance_);
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AnimationIdsOrStatus::animation_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.animation_ids)
  return _internal_animation_ids();
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationIdsOrStatus::unsafe_arena_release_animation_ids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.animation_ids)
  if (response_case() == kAnimationIds) {
    clear_has_response();
    auto* temp = _impl_.response_.animation_ids_;
    _impl_.response_.animation_ids_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationIdsOrStatus::unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_animation_ids();
    _impl_.response_.animation_ids_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.animation_ids)
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationIdsOrStatus::_internal_mutable_animation_ids() {
  if (response_case() != kAnimationIds) {
    clear_response();
    set_has_animation_ids();
    _impl_.response_.animation_ids_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_id::v1::AnimationIds>(GetArena());
  }
  return _impl_.response_.animation_ids_;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AnimationIdsOrStatus::mutable_animation_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::animation_id::v1::AnimationIds* _msg = _internal_mutable_animation_ids();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.animation_ids)
  return _msg;
}

// .nvidia_ace.status.v1.Status status = 2;
inline bool AnimationIdsOrStatus::has_status() const {
  return response_case() == kStatus;
}
inline bool AnimationIdsOrStatus::_internal_has_status() const {
  return response_case() == kStatus;
}
inline void AnimationIdsOrStatus::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline ::nvidia_ace::status::v1::Status* AnimationIdsOrStatus::release_status() {
  // @@protoc_insertion_point(field_release:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.status)
  if (response_case() == kStatus) {
    clear_has_response();
    auto* temp = _impl_.response_.status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::status::v1::Status& AnimationIdsOrStatus::_internal_status() const {
  return response_case() == kStatus ? *_impl_.response_.status_ : reinterpret_cast<::nvidia_ace::status::v1::Status&>(::nvidia_ace::status::v1::_Status_default_instance_);
}
inline const ::nvidia_ace::status::v1::Status& AnimationIdsOrStatus::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.status)
  return _internal_status();
}
inline ::nvidia_ace::status::v1::Status* AnimationIdsOrStatus::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.status)
  if (response_case() == kStatus) {
    clear_has_response();
    auto* temp = _impl_.response_.status_;
    _impl_.response_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationIdsOrStatus::unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_status();
    _impl_.response_.status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.status)
}
inline ::nvidia_ace::status::v1::Status* AnimationIdsOrStatus::_internal_mutable_status() {
  if (response_case() != kStatus) {
    clear_response();
    set_has_status();
    _impl_.response_.status_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::status::v1::Status>(GetArena());
  }
  return _impl_.response_.status_;
}
inline ::nvidia_ace::status::v1::Status* AnimationIdsOrStatus::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::status::v1::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.services.animation_controller.v1.AnimationIdsOrStatus.status)
  return _msg;
}

inline bool AnimationIdsOrStatus::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void AnimationIdsOrStatus::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline AnimationIdsOrStatus::ResponseCase AnimationIdsOrStatus::response_case() const {
  return AnimationIdsOrStatus::ResponseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace animation_controller
}  // namespace services
}  // namespace nvidia_ace


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2eservices_2eanimation_5fcontroller_2ev1_2eproto_2epb_2eh
