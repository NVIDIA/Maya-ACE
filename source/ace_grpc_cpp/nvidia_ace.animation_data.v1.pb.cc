// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.animation_data.v1.proto
// Protobuf C++ Version: 5.26.0

#include "nvidia_ace.animation_data.v1.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nvidia_ace {
namespace animation_data {
namespace v1 {

inline constexpr SkelAnimationHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : blend_shapes_{},
        joints_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SkelAnimationHeader::SkelAnimationHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SkelAnimationHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkelAnimationHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkelAnimationHeaderDefaultTypeInternal() {}
  union {
    SkelAnimationHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkelAnimationHeaderDefaultTypeInternal _SkelAnimationHeader_default_instance_;

inline constexpr QuatF::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : real_{0},
        i_{0},
        j_{0},
        k_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QuatF::QuatF(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuatFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuatFDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuatFDefaultTypeInternal() {}
  union {
    QuatF _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuatFDefaultTypeInternal _QuatF_default_instance_;

inline constexpr FloatWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : time_code_{0},
        value_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FloatWithTimeCode::FloatWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FloatWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatWithTimeCodeDefaultTypeInternal() {}
  union {
    FloatWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatWithTimeCodeDefaultTypeInternal _FloatWithTimeCode_default_instance_;

inline constexpr FloatArrayWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        time_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FloatArrayWithTimeCode::FloatArrayWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FloatArrayWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatArrayWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatArrayWithTimeCodeDefaultTypeInternal() {}
  union {
    FloatArrayWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatArrayWithTimeCodeDefaultTypeInternal _FloatArrayWithTimeCode_default_instance_;

inline constexpr Float3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Float3::Float3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Float3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float3DefaultTypeInternal() {}
  union {
    Float3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float3DefaultTypeInternal _Float3_default_instance_;

inline constexpr AudioWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : audio_buffer_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AudioWithTimeCode::AudioWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioWithTimeCodeDefaultTypeInternal() {}
  union {
    AudioWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioWithTimeCodeDefaultTypeInternal _AudioWithTimeCode_default_instance_;

inline constexpr QuatFWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        value_{nullptr},
        time_code_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QuatFWithTimeCode::QuatFWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuatFWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuatFWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuatFWithTimeCodeDefaultTypeInternal() {}
  union {
    QuatFWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuatFWithTimeCodeDefaultTypeInternal _QuatFWithTimeCode_default_instance_;

inline constexpr QuatFArrayWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        time_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR QuatFArrayWithTimeCode::QuatFArrayWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct QuatFArrayWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuatFArrayWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuatFArrayWithTimeCodeDefaultTypeInternal() {}
  union {
    QuatFArrayWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuatFArrayWithTimeCodeDefaultTypeInternal _QuatFArrayWithTimeCode_default_instance_;

inline constexpr Float3WithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        value_{nullptr},
        time_code_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Float3WithTimeCode::Float3WithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Float3WithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float3WithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float3WithTimeCodeDefaultTypeInternal() {}
  union {
    Float3WithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float3WithTimeCodeDefaultTypeInternal _Float3WithTimeCode_default_instance_;

inline constexpr Float3ArrayWithTimeCode::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : values_{},
        time_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Float3ArrayWithTimeCode::Float3ArrayWithTimeCode(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Float3ArrayWithTimeCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Float3ArrayWithTimeCodeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Float3ArrayWithTimeCodeDefaultTypeInternal() {}
  union {
    Float3ArrayWithTimeCode _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Float3ArrayWithTimeCodeDefaultTypeInternal _Float3ArrayWithTimeCode_default_instance_;

inline constexpr AnimationDataStreamHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        source_service_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        animation_ids_{nullptr},
        audio_header_{nullptr},
        skel_animation_header_{nullptr},
        start_time_code_since_epoch_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationDataStreamHeader::AnimationDataStreamHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnimationDataStreamHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationDataStreamHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationDataStreamHeaderDefaultTypeInternal() {}
  union {
    AnimationDataStreamHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationDataStreamHeaderDefaultTypeInternal _AnimationDataStreamHeader_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR AnimationData_MetadataEntry_DoNotUse::AnimationData_MetadataEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AnimationData_MetadataEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationData_MetadataEntry_DoNotUseDefaultTypeInternal _AnimationData_MetadataEntry_DoNotUse_default_instance_;

inline constexpr SkelAnimation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : blend_shape_weights_{},
        translations_{},
        rotations_{},
        scales_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SkelAnimation::SkelAnimation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SkelAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkelAnimationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkelAnimationDefaultTypeInternal() {}
  union {
    SkelAnimation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkelAnimationDefaultTypeInternal _SkelAnimation_default_instance_;

inline constexpr Camera::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : position_{},
        rotation_{},
        focal_length_{},
        focus_distance_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Camera::Camera(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CameraDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraDefaultTypeInternal() {}
  union {
    Camera _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraDefaultTypeInternal _Camera_default_instance_;

inline constexpr AnimationData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metadata_{},
        skel_animation_{nullptr},
        audio_{nullptr},
        camera_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationData::AnimationData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnimationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationDataDefaultTypeInternal() {}
  union {
    AnimationData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationDataDefaultTypeInternal _AnimationData_default_instance_;

inline constexpr AnimationDataStream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationDataStream::AnimationDataStream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnimationDataStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationDataStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationDataStreamDefaultTypeInternal() {}
  union {
    AnimationDataStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationDataStreamDefaultTypeInternal _AnimationDataStream_default_instance_;
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace
static ::_pb::Metadata file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[16];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_nvidia_5face_2eanimation_5fdata_2ev1_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_nvidia_5face_2eanimation_5fdata_2ev1_2eproto = nullptr;
const ::uint32_t
    TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _impl_.animation_ids_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _impl_.source_service_id_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _impl_.audio_header_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _impl_.skel_animation_header_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_),
        1,
        0,
        2,
        3,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, _impl_.stream_part_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _impl_.skel_animation_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _impl_.audio_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _impl_.camera_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationData, _impl_.metadata_),
        0,
        1,
        2,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AudioWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AudioWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AudioWithTimeCode, _impl_.audio_buffer_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimationHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimationHeader, _impl_.blend_shapes_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimationHeader, _impl_.joints_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, _impl_.blend_shape_weights_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, _impl_.translations_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, _impl_.rotations_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::SkelAnimation, _impl_.scales_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, _impl_.position_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, _impl_.rotation_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, _impl_.focal_length_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Camera, _impl_.focus_distance_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode, _impl_.values_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode, _impl_.values_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode, _impl_.values_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3WithTimeCode, _impl_.value_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatFWithTimeCode, _impl_.value_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatWithTimeCode, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatWithTimeCode, _impl_.time_code_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::FloatWithTimeCode, _impl_.value_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, _impl_.real_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, _impl_.i_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, _impl_.j_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::QuatF, _impl_.k_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::Float3, _impl_.z_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader)},
        {18, -1, -1, sizeof(::nvidia_ace::animation_data::v1::AnimationDataStream)},
        {30, 40, -1, sizeof(::nvidia_ace::animation_data::v1::AnimationData_MetadataEntry_DoNotUse)},
        {42, 54, -1, sizeof(::nvidia_ace::animation_data::v1::AnimationData)},
        {58, -1, -1, sizeof(::nvidia_ace::animation_data::v1::AudioWithTimeCode)},
        {68, -1, -1, sizeof(::nvidia_ace::animation_data::v1::SkelAnimationHeader)},
        {78, -1, -1, sizeof(::nvidia_ace::animation_data::v1::SkelAnimation)},
        {90, -1, -1, sizeof(::nvidia_ace::animation_data::v1::Camera)},
        {102, -1, -1, sizeof(::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode)},
        {112, -1, -1, sizeof(::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode)},
        {122, -1, -1, sizeof(::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode)},
        {132, 142, -1, sizeof(::nvidia_ace::animation_data::v1::Float3WithTimeCode)},
        {144, 154, -1, sizeof(::nvidia_ace::animation_data::v1::QuatFWithTimeCode)},
        {156, -1, -1, sizeof(::nvidia_ace::animation_data::v1::FloatWithTimeCode)},
        {166, -1, -1, sizeof(::nvidia_ace::animation_data::v1::QuatF)},
        {178, -1, -1, sizeof(::nvidia_ace::animation_data::v1::Float3)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::nvidia_ace::animation_data::v1::_AnimationDataStreamHeader_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_AnimationDataStream_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_AnimationData_MetadataEntry_DoNotUse_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_AnimationData_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_AudioWithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_SkelAnimation_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_Camera_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_FloatArrayWithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_Float3ArrayWithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_QuatFArrayWithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_Float3WithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_QuatFWithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_FloatWithTimeCode_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_QuatF_default_instance_._instance,
    &::nvidia_ace::animation_data::v1::_Float3_default_instance_._instance,
};
const char descriptor_table_protodef_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\"nvidia_ace.animation_data.v1.proto\022\034nv"
    "idia_ace.animation_data.v1\032 nvidia_ace.a"
    "nimation_id.v1.proto\032\031nvidia_ace.audio.v"
    "1.proto\032\032nvidia_ace.status.v1.proto\032\031goo"
    "gle/protobuf/any.proto\"\366\002\n\031AnimationData"
    "StreamHeader\022\?\n\ranimation_ids\030\001 \001(\0132(.nv"
    "idia_ace.animation_id.v1.AnimationIds\022\036\n"
    "\021source_service_id\030\002 \001(\tH\000\210\001\001\022;\n\014audio_h"
    "eader\030\003 \001(\0132 .nvidia_ace.audio.v1.AudioH"
    "eaderH\001\210\001\001\022U\n\025skel_animation_header\030\004 \001("
    "\01321.nvidia_ace.animation_data.v1.SkelAni"
    "mationHeaderH\002\210\001\001\022#\n\033start_time_code_sin"
    "ce_epoch\030\005 \001(\001B\024\n\022_source_service_idB\017\n\r"
    "_audio_headerB\030\n\026_skel_animation_header\""
    "\374\001\n\023AnimationDataStream\022_\n\034animation_dat"
    "a_stream_header\030\001 \001(\01327.nvidia_ace.anima"
    "tion_data.v1.AnimationDataStreamHeaderH\000"
    "\022E\n\016animation_data\030\002 \001(\0132+.nvidia_ace.an"
    "imation_data.v1.AnimationDataH\000\022.\n\006statu"
    "s\030\003 \001(\0132\034.nvidia_ace.status.v1.StatusH\000B"
    "\r\n\013stream_part\"\225\003\n\rAnimationData\022H\n\016skel"
    "_animation\030\001 \001(\0132+.nvidia_ace.animation_"
    "data.v1.SkelAnimationH\000\210\001\001\022C\n\005audio\030\002 \001("
    "\0132/.nvidia_ace.animation_data.v1.AudioWi"
    "thTimeCodeH\001\210\001\001\0229\n\006camera\030\003 \001(\0132$.nvidia"
    "_ace.animation_data.v1.CameraH\002\210\001\001\022K\n\010me"
    "tadata\030\004 \003(\01329.nvidia_ace.animation_data"
    ".v1.AnimationData.MetadataEntry\032E\n\rMetad"
    "ataEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002 \001(\0132\024.g"
    "oogle.protobuf.Any:\0028\001B\021\n\017_skel_animatio"
    "nB\010\n\006_audioB\t\n\007_camera\"<\n\021AudioWithTimeC"
    "ode\022\021\n\ttime_code\030\001 \001(\001\022\024\n\014audio_buffer\030\002"
    " \001(\014\";\n\023SkelAnimationHeader\022\024\n\014blend_sha"
    "pes\030\001 \003(\t\022\016\n\006joints\030\002 \003(\t\"\277\002\n\rSkelAnimat"
    "ion\022Q\n\023blend_shape_weights\030\001 \003(\01324.nvidi"
    "a_ace.animation_data.v1.FloatArrayWithTi"
    "meCode\022K\n\014translations\030\002 \003(\01325.nvidia_ac"
    "e.animation_data.v1.Float3ArrayWithTimeC"
    "ode\022G\n\trotations\030\003 \003(\01324.nvidia_ace.anim"
    "ation_data.v1.QuatFArrayWithTimeCode\022E\n\006"
    "scales\030\004 \003(\01325.nvidia_ace.animation_data"
    ".v1.Float3ArrayWithTimeCode\"\237\002\n\006Camera\022B"
    "\n\010position\030\001 \003(\01320.nvidia_ace.animation_"
    "data.v1.Float3WithTimeCode\022A\n\010rotation\030\002"
    " \003(\0132/.nvidia_ace.animation_data.v1.Quat"
    "FWithTimeCode\022E\n\014focal_length\030\003 \003(\0132/.nv"
    "idia_ace.animation_data.v1.FloatWithTime"
    "Code\022G\n\016focus_distance\030\004 \003(\0132/.nvidia_ac"
    "e.animation_data.v1.FloatWithTimeCode\";\n"
    "\026FloatArrayWithTimeCode\022\021\n\ttime_code\030\001 \001"
    "(\001\022\016\n\006values\030\002 \003(\002\"b\n\027Float3ArrayWithTim"
    "eCode\022\021\n\ttime_code\030\001 \001(\001\0224\n\006values\030\002 \003(\013"
    "2$.nvidia_ace.animation_data.v1.Float3\"`"
    "\n\026QuatFArrayWithTimeCode\022\021\n\ttime_code\030\001 "
    "\001(\001\0223\n\006values\030\002 \003(\0132#.nvidia_ace.animati"
    "on_data.v1.QuatF\"\\\n\022Float3WithTimeCode\022\021"
    "\n\ttime_code\030\001 \001(\001\0223\n\005value\030\002 \001(\0132$.nvidi"
    "a_ace.animation_data.v1.Float3\"Z\n\021QuatFW"
    "ithTimeCode\022\021\n\ttime_code\030\001 \001(\001\0222\n\005value\030"
    "\002 \001(\0132#.nvidia_ace.animation_data.v1.Qua"
    "tF\"5\n\021FloatWithTimeCode\022\021\n\ttime_code\030\001 \001"
    "(\001\022\r\n\005value\030\002 \001(\002\"6\n\005QuatF\022\014\n\004real\030\001 \001(\002"
    "\022\t\n\001i\030\002 \001(\002\022\t\n\001j\030\003 \001(\002\022\t\n\001k\030\004 \001(\002\")\n\006Flo"
    "at3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_deps[4] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_nvidia_5face_2eanimation_5fid_2ev1_2eproto,
        &::descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto,
        &::descriptor_table_nvidia_5face_2estatus_2ev1_2eproto,
};
static ::absl::once_flag descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto = {
    false,
    false,
    2564,
    descriptor_table_protodef_nvidia_5face_2eanimation_5fdata_2ev1_2eproto,
    "nvidia_ace.animation_data.v1.proto",
    &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
    descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_deps,
    4,
    16,
    schemas,
    file_default_instances,
    TableStruct_nvidia_5face_2eanimation_5fdata_2ev1_2eproto::offsets,
    file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto,
    file_level_enum_descriptors_nvidia_5face_2eanimation_5fdata_2ev1_2eproto,
    file_level_service_descriptors_nvidia_5face_2eanimation_5fdata_2ev1_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter() {
  return &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto;
}
namespace nvidia_ace {
namespace animation_data {
namespace v1 {
// ===================================================================

class AnimationDataStreamHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationDataStreamHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_._has_bits_);
};

void AnimationDataStreamHeader::clear_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.animation_ids_ != nullptr) _impl_.animation_ids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AnimationDataStreamHeader::clear_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ != nullptr) _impl_.audio_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AnimationDataStreamHeader::AnimationDataStreamHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStreamHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        source_service_id_(arena, from.source_service_id_) {}

AnimationDataStreamHeader::AnimationDataStreamHeader(
    ::google::protobuf::Arena* arena,
    const AnimationDataStreamHeader& from)
    : ::google::protobuf::Message(arena) {
  AnimationDataStreamHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.animation_ids_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_id::v1::AnimationIds>(
                              arena, *from._impl_.animation_ids_)
                        : nullptr;
  _impl_.audio_header_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::audio::v1::AudioHeader>(
                              arena, *from._impl_.audio_header_)
                        : nullptr;
  _impl_.skel_animation_header_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(
                              arena, *from._impl_.skel_animation_header_)
                        : nullptr;
  _impl_.start_time_code_since_epoch_ = from._impl_.start_time_code_since_epoch_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStreamHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        source_service_id_(arena) {}

inline void AnimationDataStreamHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, animation_ids_),
           0,
           offsetof(Impl_, start_time_code_since_epoch_) -
               offsetof(Impl_, animation_ids_) +
               sizeof(Impl_::start_time_code_since_epoch_));
}
AnimationDataStreamHeader::~AnimationDataStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnimationDataStreamHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.source_service_id_.Destroy();
  delete _impl_.animation_ids_;
  delete _impl_.audio_header_;
  delete _impl_.skel_animation_header_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AnimationDataStreamHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_._cached_size_),
              false,
          },
          &AnimationDataStreamHeader::MergeImpl,
          &AnimationDataStreamHeader::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AnimationDataStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_service_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.animation_ids_ != nullptr);
      _impl_.animation_ids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.audio_header_ != nullptr);
      _impl_.audio_header_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.skel_animation_header_ != nullptr);
      _impl_.skel_animation_header_->Clear();
    }
  }
  _impl_.start_time_code_since_epoch_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnimationDataStreamHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 80, 2> AnimationDataStreamHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnimationDataStreamHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.animation_ids_)}},
    // optional string source_service_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.source_service_id_)}},
    // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 1, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.audio_header_)}},
    // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 2, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.skel_animation_header_)}},
    // double start_time_code_since_epoch = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.animation_ids_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string source_service_id = 2;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.source_service_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.audio_header_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.skel_animation_header_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double start_time_code_since_epoch = 5;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_id::v1::AnimationIds>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::audio::v1::AudioHeader>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::SkelAnimationHeader>()},
  }}, {{
    "\66\0\21\0\0\0\0\0"
    "nvidia_ace.animation_data.v1.AnimationDataStreamHeader"
    "source_service_id"
  }},
};

::uint8_t* AnimationDataStreamHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.animation_ids_, _impl_.animation_ids_->GetCachedSize(), target, stream);
  }

  // optional string source_service_id = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_source_service_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.animation_data.v1.AnimationDataStreamHeader.source_service_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.audio_header_, _impl_.audio_header_->GetCachedSize(), target, stream);
  }

  // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.skel_animation_header_, _impl_.skel_animation_header_->GetCachedSize(), target, stream);
  }

  // double start_time_code_since_epoch = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time_code_since_epoch = this->_internal_start_time_code_since_epoch();
  ::uint64_t raw_start_time_code_since_epoch;
  memcpy(&raw_start_time_code_since_epoch, &tmp_start_time_code_since_epoch, sizeof(tmp_start_time_code_since_epoch));
  if (raw_start_time_code_since_epoch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this->_internal_start_time_code_since_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  return target;
}

::size_t AnimationDataStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string source_service_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_source_service_id());
    }

    // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.animation_ids_);
    }

    // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.audio_header_);
    }

    // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.skel_animation_header_);
    }

  }
  // double start_time_code_since_epoch = 5;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time_code_since_epoch = this->_internal_start_time_code_since_epoch();
  ::uint64_t raw_start_time_code_since_epoch;
  memcpy(&raw_start_time_code_since_epoch, &tmp_start_time_code_since_epoch, sizeof(tmp_start_time_code_since_epoch));
  if (raw_start_time_code_since_epoch != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AnimationDataStreamHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationDataStreamHeader*>(&to_msg);
  auto& from = static_cast<const AnimationDataStreamHeader&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_service_id(from._internal_source_service_id());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.animation_ids_ != nullptr);
      if (_this->_impl_.animation_ids_ == nullptr) {
        _this->_impl_.animation_ids_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_id::v1::AnimationIds>(arena, *from._impl_.animation_ids_);
      } else {
        _this->_impl_.animation_ids_->MergeFrom(*from._impl_.animation_ids_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.audio_header_ != nullptr);
      if (_this->_impl_.audio_header_ == nullptr) {
        _this->_impl_.audio_header_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::audio::v1::AudioHeader>(arena, *from._impl_.audio_header_);
      } else {
        _this->_impl_.audio_header_->MergeFrom(*from._impl_.audio_header_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.skel_animation_header_ != nullptr);
      if (_this->_impl_.skel_animation_header_ == nullptr) {
        _this->_impl_.skel_animation_header_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(arena, *from._impl_.skel_animation_header_);
      } else {
        _this->_impl_.skel_animation_header_->MergeFrom(*from._impl_.skel_animation_header_);
      }
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time_code_since_epoch = from._internal_start_time_code_since_epoch();
  ::uint64_t raw_start_time_code_since_epoch;
  memcpy(&raw_start_time_code_since_epoch, &tmp_start_time_code_since_epoch, sizeof(tmp_start_time_code_since_epoch));
  if (raw_start_time_code_since_epoch != 0) {
    _this->_impl_.start_time_code_since_epoch_ = from._impl_.start_time_code_since_epoch_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationDataStreamHeader::CopyFrom(const AnimationDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AnimationDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnimationDataStreamHeader::IsInitialized() const {
  return true;
}

void AnimationDataStreamHeader::InternalSwap(AnimationDataStreamHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_service_id_, &other->_impl_.source_service_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_)
      + sizeof(AnimationDataStreamHeader::_impl_.start_time_code_since_epoch_)
      - PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.animation_ids_)>(
          reinterpret_cast<char*>(&_impl_.animation_ids_),
          reinterpret_cast<char*>(&other->_impl_.animation_ids_));
}

::google::protobuf::Metadata AnimationDataStreamHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[0]);
}
// ===================================================================

class AnimationDataStream::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::nvidia_ace::animation_data::v1::AnimationDataStream, _impl_._oneof_case_);
};

void AnimationDataStream::set_allocated_animation_data_stream_header(::nvidia_ace::animation_data::v1::AnimationDataStreamHeader* animation_data_stream_header) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data_stream_header) {
    ::google::protobuf::Arena* submessage_arena = animation_data_stream_header->GetArena();
    if (message_arena != submessage_arena) {
      animation_data_stream_header = ::google::protobuf::internal::GetOwnedMessage(message_arena, animation_data_stream_header, submessage_arena);
    }
    set_has_animation_data_stream_header();
    _impl_.stream_part_.animation_data_stream_header_ = animation_data_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data_stream_header)
}
void AnimationDataStream::set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data) {
    ::google::protobuf::Arena* submessage_arena = animation_data->GetArena();
    if (message_arena != submessage_arena) {
      animation_data = ::google::protobuf::internal::GetOwnedMessage(message_arena, animation_data, submessage_arena);
    }
    set_has_animation_data();
    _impl_.stream_part_.animation_data_ = animation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.animation_data)
}
void AnimationDataStream::set_allocated_status(::nvidia_ace::status::v1::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (status) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(message_arena, status, submessage_arena);
    }
    set_has_status();
    _impl_.stream_part_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.animation_data.v1.AnimationDataStream.status)
}
void AnimationDataStream::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.status_;
    }
    clear_has_stream_part();
  }
}
AnimationDataStream::AnimationDataStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AnimationDataStream)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AnimationDataStream::AnimationDataStream(
    ::google::protobuf::Arena* arena,
    const AnimationDataStream& from)
    : ::google::protobuf::Message(arena) {
  AnimationDataStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (stream_part_case()) {
    case STREAM_PART_NOT_SET:
      break;
      case kAnimationDataStreamHeader:
        _impl_.stream_part_.animation_data_stream_header_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader>(arena, *from._impl_.stream_part_.animation_data_stream_header_);
        break;
      case kAnimationData:
        _impl_.stream_part_.animation_data_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AnimationData>(arena, *from._impl_.stream_part_.animation_data_);
        break;
      case kStatus:
        _impl_.stream_part_.status_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::status::v1::Status>(arena, *from._impl_.stream_part_.status_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AnimationDataStream)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AnimationDataStream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AnimationDataStream::~AnimationDataStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AnimationDataStream)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnimationDataStream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
  _impl_.~Impl_();
}

void AnimationDataStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (stream_part_case()) {
    case kAnimationDataStreamHeader: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.animation_data_stream_header_;
      }
      break;
    }
    case kAnimationData: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.animation_data_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.status_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
AnimationDataStream::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_._cached_size_),
              false,
          },
          &AnimationDataStream::MergeImpl,
          &AnimationDataStream::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AnimationDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnimationDataStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> AnimationDataStream::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnimationDataStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AnimationDataStream>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.animation_data_stream_header_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.animation_data_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.status.v1.Status status = 3;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.status_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AnimationData>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::status::v1::Status>()},
  }}, {{
  }},
};

::uint8_t* AnimationDataStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (stream_part_case()) {
    case kAnimationDataStreamHeader: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.stream_part_.animation_data_stream_header_, _impl_.stream_part_.animation_data_stream_header_->GetCachedSize(), target, stream);
      break;
    }
    case kAnimationData: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.stream_part_.animation_data_, _impl_.stream_part_.animation_data_->GetCachedSize(), target, stream);
      break;
    }
    case kStatus: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.stream_part_.status_, _impl_.stream_part_.status_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AnimationDataStream)
  return target;
}

::size_t AnimationDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.animation_data.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
    case kAnimationDataStreamHeader: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.animation_data_stream_header_);
      break;
    }
    // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
    case kAnimationData: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.animation_data_);
      break;
    }
    // .nvidia_ace.status.v1.Status status = 3;
    case kStatus: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.status_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AnimationDataStream::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationDataStream*>(&to_msg);
  auto& from = static_cast<const AnimationDataStream&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_stream_part();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAnimationDataStreamHeader: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.animation_data_stream_header_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AnimationDataStreamHeader>(arena, *from._impl_.stream_part_.animation_data_stream_header_);
        } else {
          _this->_impl_.stream_part_.animation_data_stream_header_->MergeFrom(from._internal_animation_data_stream_header());
        }
        break;
      }
      case kAnimationData: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.animation_data_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AnimationData>(arena, *from._impl_.stream_part_.animation_data_);
        } else {
          _this->_impl_.stream_part_.animation_data_->MergeFrom(from._internal_animation_data());
        }
        break;
      }
      case kStatus: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.status_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::status::v1::Status>(arena, *from._impl_.stream_part_.status_);
        } else {
          _this->_impl_.stream_part_.status_->MergeFrom(from._internal_status());
        }
        break;
      }
      case STREAM_PART_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationDataStream::CopyFrom(const AnimationDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AnimationDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnimationDataStream::IsInitialized() const {
  return true;
}

void AnimationDataStream::InternalSwap(AnimationDataStream* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stream_part_, other->_impl_.stream_part_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AnimationDataStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[1]);
}
// ===================================================================

AnimationData_MetadataEntry_DoNotUse::AnimationData_MetadataEntry_DoNotUse() {}
AnimationData_MetadataEntry_DoNotUse::AnimationData_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata AnimationData_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[2]);
}
// ===================================================================

class AnimationData::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AnimationData, _impl_._has_bits_);
};

void AnimationData::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.metadata_.Clear();
}
AnimationData::AnimationData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AnimationData)
}
inline PROTOBUF_NDEBUG_INLINE AnimationData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        metadata_{visibility, arena, from.metadata_} {}

AnimationData::AnimationData(
    ::google::protobuf::Arena* arena,
    const AnimationData& from)
    : ::google::protobuf::Message(arena) {
  AnimationData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.skel_animation_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::SkelAnimation>(
                              arena, *from._impl_.skel_animation_)
                        : nullptr;
  _impl_.audio_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AudioWithTimeCode>(
                              arena, *from._impl_.audio_)
                        : nullptr;
  _impl_.camera_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::Camera>(
                              arena, *from._impl_.camera_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AnimationData)
}
inline PROTOBUF_NDEBUG_INLINE AnimationData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        metadata_{visibility, arena} {}

inline void AnimationData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, skel_animation_),
           0,
           offsetof(Impl_, camera_) -
               offsetof(Impl_, skel_animation_) +
               sizeof(Impl_::camera_));
}
AnimationData::~AnimationData() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AnimationData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnimationData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.skel_animation_;
  delete _impl_.audio_;
  delete _impl_.camera_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AnimationData::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AnimationData, _impl_._cached_size_),
              false,
          },
          &AnimationData::MergeImpl,
          &AnimationData::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AnimationData::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AnimationData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.skel_animation_ != nullptr);
      _impl_.skel_animation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.audio_ != nullptr);
      _impl_.audio_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.camera_ != nullptr);
      _impl_.camera_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnimationData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 5, 59, 2> AnimationData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AnimationData, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnimationData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AnimationData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.skel_animation_)}},
    // optional .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.audio_)}},
    // optional .nvidia_ace.animation_data.v1.Camera camera = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.camera_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
    {PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.skel_animation_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
    {PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.audio_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .nvidia_ace.animation_data.v1.Camera camera = 3;
    {PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.camera_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, .google.protobuf.Any> metadata = 4;
    {PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.metadata_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::SkelAnimation>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AudioWithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Camera>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(AnimationData()._impl_.metadata_)>(
        1, 0, 0, 9,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::google::protobuf::Any>},
  }}, {{
    "\52\0\0\0\10\0\0\0"
    "nvidia_ace.animation_data.v1.AnimationData"
    "metadata"
  }},
};

::uint8_t* AnimationData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AnimationData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.skel_animation_, _impl_.skel_animation_->GetCachedSize(), target, stream);
  }

  // optional .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.audio_, _impl_.audio_->GetCachedSize(), target, stream);
  }

  // optional .nvidia_ace.animation_data.v1.Camera camera = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.camera_, _impl_.camera_->GetCachedSize(), target, stream);
  }

  // map<string, .google.protobuf.Any> metadata = 4;
  if (!_internal_metadata().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::google::protobuf::Any>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::google::protobuf::Any,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_metadata();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.animation_data.v1.AnimationData.metadata");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.animation_data.v1.AnimationData.metadata");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AnimationData)
  return target;
}

::size_t AnimationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AnimationData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> metadata = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_metadata_size());
  for (const auto& entry : _internal_metadata()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::google::protobuf::Any,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .nvidia_ace.animation_data.v1.SkelAnimation skel_animation = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.skel_animation_);
    }

    // optional .nvidia_ace.animation_data.v1.AudioWithTimeCode audio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.audio_);
    }

    // optional .nvidia_ace.animation_data.v1.Camera camera = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.camera_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AnimationData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationData*>(&to_msg);
  auto& from = static_cast<const AnimationData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AnimationData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.skel_animation_ != nullptr);
      if (_this->_impl_.skel_animation_ == nullptr) {
        _this->_impl_.skel_animation_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::SkelAnimation>(arena, *from._impl_.skel_animation_);
      } else {
        _this->_impl_.skel_animation_->MergeFrom(*from._impl_.skel_animation_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.audio_ != nullptr);
      if (_this->_impl_.audio_ == nullptr) {
        _this->_impl_.audio_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AudioWithTimeCode>(arena, *from._impl_.audio_);
      } else {
        _this->_impl_.audio_->MergeFrom(*from._impl_.audio_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.camera_ != nullptr);
      if (_this->_impl_.camera_ == nullptr) {
        _this->_impl_.camera_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::Camera>(arena, *from._impl_.camera_);
      } else {
        _this->_impl_.camera_->MergeFrom(*from._impl_.camera_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationData::CopyFrom(const AnimationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AnimationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnimationData::IsInitialized() const {
  return true;
}

void AnimationData::InternalSwap(AnimationData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.camera_)
      + sizeof(AnimationData::_impl_.camera_)
      - PROTOBUF_FIELD_OFFSET(AnimationData, _impl_.skel_animation_)>(
          reinterpret_cast<char*>(&_impl_.skel_animation_),
          reinterpret_cast<char*>(&other->_impl_.skel_animation_));
}

::google::protobuf::Metadata AnimationData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[3]);
}
// ===================================================================

class AudioWithTimeCode::_Internal {
 public:
};

AudioWithTimeCode::AudioWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.AudioWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE AudioWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : audio_buffer_(arena, from.audio_buffer_),
        _cached_size_{0} {}

AudioWithTimeCode::AudioWithTimeCode(
    ::google::protobuf::Arena* arena,
    const AudioWithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  AudioWithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.AudioWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE AudioWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : audio_buffer_(arena),
        _cached_size_{0} {}

inline void AudioWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_code_ = {};
}
AudioWithTimeCode::~AudioWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.audio_buffer_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AudioWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AudioWithTimeCode, _impl_._cached_size_),
              false,
          },
          &AudioWithTimeCode::MergeImpl,
          &AudioWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AudioWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audio_buffer_.ClearToEmpty();
  _impl_.time_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AudioWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AudioWithTimeCode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_AudioWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AudioWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bytes audio_buffer = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AudioWithTimeCode, _impl_.audio_buffer_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(AudioWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(AudioWithTimeCode, _impl_.time_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bytes audio_buffer = 2;
    {PROTOBUF_FIELD_OFFSET(AudioWithTimeCode, _impl_.audio_buffer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* AudioWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  // bytes audio_buffer = 2;
  if (!this->_internal_audio_buffer().empty()) {
    const std::string& _s = this->_internal_audio_buffer();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  return target;
}

::size_t AudioWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio_buffer = 2;
  if (!this->_internal_audio_buffer().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_audio_buffer());
  }

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AudioWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioWithTimeCode*>(&to_msg);
  auto& from = static_cast<const AudioWithTimeCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_buffer().empty()) {
    _this->_internal_set_audio_buffer(from._internal_audio_buffer());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioWithTimeCode::CopyFrom(const AudioWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.AudioWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioWithTimeCode::IsInitialized() const {
  return true;
}

void AudioWithTimeCode::InternalSwap(AudioWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.audio_buffer_, &other->_impl_.audio_buffer_, arena);
        swap(_impl_.time_code_, other->_impl_.time_code_);
}

::google::protobuf::Metadata AudioWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[4]);
}
// ===================================================================

class SkelAnimationHeader::_Internal {
 public:
};

SkelAnimationHeader::SkelAnimationHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.SkelAnimationHeader)
}
inline PROTOBUF_NDEBUG_INLINE SkelAnimationHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : blend_shapes_{visibility, arena, from.blend_shapes_},
        joints_{visibility, arena, from.joints_},
        _cached_size_{0} {}

SkelAnimationHeader::SkelAnimationHeader(
    ::google::protobuf::Arena* arena,
    const SkelAnimationHeader& from)
    : ::google::protobuf::Message(arena) {
  SkelAnimationHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.SkelAnimationHeader)
}
inline PROTOBUF_NDEBUG_INLINE SkelAnimationHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : blend_shapes_{visibility, arena},
        joints_{visibility, arena},
        _cached_size_{0} {}

inline void SkelAnimationHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SkelAnimationHeader::~SkelAnimationHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SkelAnimationHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SkelAnimationHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(SkelAnimationHeader, _impl_._cached_size_),
              false,
          },
          &SkelAnimationHeader::MergeImpl,
          &SkelAnimationHeader::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void SkelAnimationHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blend_shapes_.Clear();
  _impl_.joints_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SkelAnimationHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 75, 2> SkelAnimationHeader::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SkelAnimationHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string joints = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SkelAnimationHeader, _impl_.joints_)}},
    // repeated string blend_shapes = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SkelAnimationHeader, _impl_.blend_shapes_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string blend_shapes = 1;
    {PROTOBUF_FIELD_OFFSET(SkelAnimationHeader, _impl_.blend_shapes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string joints = 2;
    {PROTOBUF_FIELD_OFFSET(SkelAnimationHeader, _impl_.joints_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\60\14\6\0\0\0\0\0"
    "nvidia_ace.animation_data.v1.SkelAnimationHeader"
    "blend_shapes"
    "joints"
  }},
};

::uint8_t* SkelAnimationHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string blend_shapes = 1;
  for (int i = 0, n = this->_internal_blend_shapes_size(); i < n; ++i) {
    const auto& s = this->_internal_blend_shapes().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.animation_data.v1.SkelAnimationHeader.blend_shapes");
    target = stream->WriteString(1, s, target);
  }

  // repeated string joints = 2;
  for (int i = 0, n = this->_internal_joints_size(); i < n; ++i) {
    const auto& s = this->_internal_joints().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nvidia_ace.animation_data.v1.SkelAnimationHeader.joints");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  return target;
}

::size_t SkelAnimationHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blend_shapes = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_blend_shapes().size());
  for (int i = 0, n = _internal_blend_shapes().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_blend_shapes().Get(i));
  }
  // repeated string joints = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_joints().size());
  for (int i = 0, n = _internal_joints().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_joints().Get(i));
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SkelAnimationHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SkelAnimationHeader*>(&to_msg);
  auto& from = static_cast<const SkelAnimationHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_blend_shapes()->MergeFrom(from._internal_blend_shapes());
  _this->_internal_mutable_joints()->MergeFrom(from._internal_joints());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SkelAnimationHeader::CopyFrom(const SkelAnimationHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.SkelAnimationHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SkelAnimationHeader::IsInitialized() const {
  return true;
}

void SkelAnimationHeader::InternalSwap(SkelAnimationHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blend_shapes_.InternalSwap(&other->_impl_.blend_shapes_);
  _impl_.joints_.InternalSwap(&other->_impl_.joints_);
}

::google::protobuf::Metadata SkelAnimationHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[5]);
}
// ===================================================================

class SkelAnimation::_Internal {
 public:
};

SkelAnimation::SkelAnimation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.SkelAnimation)
}
inline PROTOBUF_NDEBUG_INLINE SkelAnimation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : blend_shape_weights_{visibility, arena, from.blend_shape_weights_},
        translations_{visibility, arena, from.translations_},
        rotations_{visibility, arena, from.rotations_},
        scales_{visibility, arena, from.scales_},
        _cached_size_{0} {}

SkelAnimation::SkelAnimation(
    ::google::protobuf::Arena* arena,
    const SkelAnimation& from)
    : ::google::protobuf::Message(arena) {
  SkelAnimation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.SkelAnimation)
}
inline PROTOBUF_NDEBUG_INLINE SkelAnimation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : blend_shape_weights_{visibility, arena},
        translations_{visibility, arena},
        rotations_{visibility, arena},
        scales_{visibility, arena},
        _cached_size_{0} {}

inline void SkelAnimation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SkelAnimation::~SkelAnimation() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.SkelAnimation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SkelAnimation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
SkelAnimation::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_._cached_size_),
              false,
          },
          &SkelAnimation::MergeImpl,
          &SkelAnimation::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void SkelAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.SkelAnimation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.blend_shape_weights_.Clear();
  _impl_.translations_.Clear();
  _impl_.rotations_.Clear();
  _impl_.scales_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SkelAnimation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> SkelAnimation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SkelAnimation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::SkelAnimation>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.scales_)}},
    // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.blend_shape_weights_)}},
    // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.translations_)}},
    // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.rotations_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
    {PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.blend_shape_weights_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
    {PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.translations_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
    {PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.rotations_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
    {PROTOBUF_FIELD_OFFSET(SkelAnimation, _impl_.scales_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>()},
  }}, {{
  }},
};

::uint8_t* SkelAnimation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.SkelAnimation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_blend_shape_weights_size());
       i < n; i++) {
    const auto& repfield = this->_internal_blend_shape_weights().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_translations_size());
       i < n; i++) {
    const auto& repfield = this->_internal_translations().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_rotations_size());
       i < n; i++) {
    const auto& repfield = this->_internal_rotations().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_scales_size());
       i < n; i++) {
    const auto& repfield = this->_internal_scales().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.SkelAnimation)
  return target;
}

::size_t SkelAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.SkelAnimation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.FloatArrayWithTimeCode blend_shape_weights = 1;
  total_size += 1UL * this->_internal_blend_shape_weights_size();
  for (const auto& msg : this->_internal_blend_shape_weights()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode translations = 2;
  total_size += 1UL * this->_internal_translations_size();
  for (const auto& msg : this->_internal_translations()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode rotations = 3;
  total_size += 1UL * this->_internal_rotations_size();
  for (const auto& msg : this->_internal_rotations()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode scales = 4;
  total_size += 1UL * this->_internal_scales_size();
  for (const auto& msg : this->_internal_scales()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void SkelAnimation::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SkelAnimation*>(&to_msg);
  auto& from = static_cast<const SkelAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.SkelAnimation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_blend_shape_weights()->MergeFrom(
      from._internal_blend_shape_weights());
  _this->_internal_mutable_translations()->MergeFrom(
      from._internal_translations());
  _this->_internal_mutable_rotations()->MergeFrom(
      from._internal_rotations());
  _this->_internal_mutable_scales()->MergeFrom(
      from._internal_scales());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SkelAnimation::CopyFrom(const SkelAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.SkelAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SkelAnimation::IsInitialized() const {
  return true;
}

void SkelAnimation::InternalSwap(SkelAnimation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.blend_shape_weights_.InternalSwap(&other->_impl_.blend_shape_weights_);
  _impl_.translations_.InternalSwap(&other->_impl_.translations_);
  _impl_.rotations_.InternalSwap(&other->_impl_.rotations_);
  _impl_.scales_.InternalSwap(&other->_impl_.scales_);
}

::google::protobuf::Metadata SkelAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[6]);
}
// ===================================================================

class Camera::_Internal {
 public:
};

Camera::Camera(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Camera)
}
inline PROTOBUF_NDEBUG_INLINE Camera::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : position_{visibility, arena, from.position_},
        rotation_{visibility, arena, from.rotation_},
        focal_length_{visibility, arena, from.focal_length_},
        focus_distance_{visibility, arena, from.focus_distance_},
        _cached_size_{0} {}

Camera::Camera(
    ::google::protobuf::Arena* arena,
    const Camera& from)
    : ::google::protobuf::Message(arena) {
  Camera* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Camera)
}
inline PROTOBUF_NDEBUG_INLINE Camera::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : position_{visibility, arena},
        rotation_{visibility, arena},
        focal_length_{visibility, arena},
        focus_distance_{visibility, arena},
        _cached_size_{0} {}

inline void Camera::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Camera::~Camera() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Camera)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Camera::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Camera::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Camera, _impl_._cached_size_),
              false,
          },
          &Camera::MergeImpl,
          &Camera::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Camera)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.position_.Clear();
  _impl_.rotation_.Clear();
  _impl_.focal_length_.Clear();
  _impl_.focus_distance_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Camera::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> Camera::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Camera_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Camera>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(Camera, _impl_.focus_distance_)}},
    // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Camera, _impl_.position_)}},
    // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(Camera, _impl_.rotation_)}},
    // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(Camera, _impl_.focal_length_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
    {PROTOBUF_FIELD_OFFSET(Camera, _impl_.position_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
    {PROTOBUF_FIELD_OFFSET(Camera, _impl_.rotation_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
    {PROTOBUF_FIELD_OFFSET(Camera, _impl_.focal_length_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
    {PROTOBUF_FIELD_OFFSET(Camera, _impl_.focus_distance_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3WithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::FloatWithTimeCode>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::FloatWithTimeCode>()},
  }}, {{
  }},
};

::uint8_t* Camera::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Camera)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_position_size());
       i < n; i++) {
    const auto& repfield = this->_internal_position().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_rotation_size());
       i < n; i++) {
    const auto& repfield = this->_internal_rotation().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_focal_length_size());
       i < n; i++) {
    const auto& repfield = this->_internal_focal_length().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_focus_distance_size());
       i < n; i++) {
    const auto& repfield = this->_internal_focus_distance().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            4, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Camera)
  return target;
}

::size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Camera)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.Float3WithTimeCode position = 1;
  total_size += 1UL * this->_internal_position_size();
  for (const auto& msg : this->_internal_position()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .nvidia_ace.animation_data.v1.QuatFWithTimeCode rotation = 2;
  total_size += 1UL * this->_internal_rotation_size();
  for (const auto& msg : this->_internal_rotation()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focal_length = 3;
  total_size += 1UL * this->_internal_focal_length_size();
  for (const auto& msg : this->_internal_focal_length()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .nvidia_ace.animation_data.v1.FloatWithTimeCode focus_distance = 4;
  total_size += 1UL * this->_internal_focus_distance_size();
  for (const auto& msg : this->_internal_focus_distance()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Camera::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Camera*>(&to_msg);
  auto& from = static_cast<const Camera&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Camera)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_position()->MergeFrom(
      from._internal_position());
  _this->_internal_mutable_rotation()->MergeFrom(
      from._internal_rotation());
  _this->_internal_mutable_focal_length()->MergeFrom(
      from._internal_focal_length());
  _this->_internal_mutable_focus_distance()->MergeFrom(
      from._internal_focus_distance());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.position_.InternalSwap(&other->_impl_.position_);
  _impl_.rotation_.InternalSwap(&other->_impl_.rotation_);
  _impl_.focal_length_.InternalSwap(&other->_impl_.focal_length_);
  _impl_.focus_distance_.InternalSwap(&other->_impl_.focus_distance_);
}

::google::protobuf::Metadata Camera::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[7]);
}
// ===================================================================

class FloatArrayWithTimeCode::_Internal {
 public:
};

FloatArrayWithTimeCode::FloatArrayWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE FloatArrayWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

FloatArrayWithTimeCode::FloatArrayWithTimeCode(
    ::google::protobuf::Arena* arena,
    const FloatArrayWithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  FloatArrayWithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE FloatArrayWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void FloatArrayWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_code_ = {};
}
FloatArrayWithTimeCode::~FloatArrayWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FloatArrayWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
FloatArrayWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(FloatArrayWithTimeCode, _impl_._cached_size_),
              false,
          },
          &FloatArrayWithTimeCode::MergeImpl,
          &FloatArrayWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void FloatArrayWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.time_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FloatArrayWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FloatArrayWithTimeCode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FloatArrayWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::FloatArrayWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated float values = 2;
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FloatArrayWithTimeCode, _impl_.values_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(FloatArrayWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(FloatArrayWithTimeCode, _impl_.time_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated float values = 2;
    {PROTOBUF_FIELD_OFFSET(FloatArrayWithTimeCode, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FloatArrayWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  return target;
}

::size_t FloatArrayWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_values_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void FloatArrayWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FloatArrayWithTimeCode*>(&to_msg);
  auto& from = static_cast<const FloatArrayWithTimeCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(from._internal_values());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FloatArrayWithTimeCode::CopyFrom(const FloatArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.FloatArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FloatArrayWithTimeCode::IsInitialized() const {
  return true;
}

void FloatArrayWithTimeCode::InternalSwap(FloatArrayWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
        swap(_impl_.time_code_, other->_impl_.time_code_);
}

::google::protobuf::Metadata FloatArrayWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[8]);
}
// ===================================================================

class Float3ArrayWithTimeCode::_Internal {
 public:
};

Float3ArrayWithTimeCode::Float3ArrayWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE Float3ArrayWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

Float3ArrayWithTimeCode::Float3ArrayWithTimeCode(
    ::google::protobuf::Arena* arena,
    const Float3ArrayWithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  Float3ArrayWithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE Float3ArrayWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void Float3ArrayWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_code_ = {};
}
Float3ArrayWithTimeCode::~Float3ArrayWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Float3ArrayWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Float3ArrayWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Float3ArrayWithTimeCode, _impl_._cached_size_),
              false,
          },
          &Float3ArrayWithTimeCode::MergeImpl,
          &Float3ArrayWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Float3ArrayWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.time_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Float3ArrayWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Float3ArrayWithTimeCode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Float3ArrayWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3ArrayWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Float3ArrayWithTimeCode, _impl_.values_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Float3ArrayWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(Float3ArrayWithTimeCode, _impl_.time_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
    {PROTOBUF_FIELD_OFFSET(Float3ArrayWithTimeCode, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3>()},
  }}, {{
  }},
};

::uint8_t* Float3ArrayWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_values_size());
       i < n; i++) {
    const auto& repfield = this->_internal_values().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  return target;
}

::size_t Float3ArrayWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.Float3 values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_internal_values()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Float3ArrayWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Float3ArrayWithTimeCode*>(&to_msg);
  auto& from = static_cast<const Float3ArrayWithTimeCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Float3ArrayWithTimeCode::CopyFrom(const Float3ArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Float3ArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Float3ArrayWithTimeCode::IsInitialized() const {
  return true;
}

void Float3ArrayWithTimeCode::InternalSwap(Float3ArrayWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
        swap(_impl_.time_code_, other->_impl_.time_code_);
}

::google::protobuf::Metadata Float3ArrayWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[9]);
}
// ===================================================================

class QuatFArrayWithTimeCode::_Internal {
 public:
};

QuatFArrayWithTimeCode::QuatFArrayWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE QuatFArrayWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : values_{visibility, arena, from.values_},
        _cached_size_{0} {}

QuatFArrayWithTimeCode::QuatFArrayWithTimeCode(
    ::google::protobuf::Arena* arena,
    const QuatFArrayWithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  QuatFArrayWithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE QuatFArrayWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : values_{visibility, arena},
        _cached_size_{0} {}

inline void QuatFArrayWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_code_ = {};
}
QuatFArrayWithTimeCode::~QuatFArrayWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QuatFArrayWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
QuatFArrayWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(QuatFArrayWithTimeCode, _impl_._cached_size_),
              false,
          },
          &QuatFArrayWithTimeCode::MergeImpl,
          &QuatFArrayWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void QuatFArrayWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.time_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QuatFArrayWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> QuatFArrayWithTimeCode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_QuatFArrayWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatFArrayWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(QuatFArrayWithTimeCode, _impl_.values_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(QuatFArrayWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(QuatFArrayWithTimeCode, _impl_.time_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
    {PROTOBUF_FIELD_OFFSET(QuatFArrayWithTimeCode, _impl_.values_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatF>()},
  }}, {{
  }},
};

::uint8_t* QuatFArrayWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this->_internal_values_size());
       i < n; i++) {
    const auto& repfield = this->_internal_values().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  return target;
}

::size_t QuatFArrayWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nvidia_ace.animation_data.v1.QuatF values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_internal_values()) {
    total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void QuatFArrayWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QuatFArrayWithTimeCode*>(&to_msg);
  auto& from = static_cast<const QuatFArrayWithTimeCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_values()->MergeFrom(
      from._internal_values());
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QuatFArrayWithTimeCode::CopyFrom(const QuatFArrayWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.QuatFArrayWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QuatFArrayWithTimeCode::IsInitialized() const {
  return true;
}

void QuatFArrayWithTimeCode::InternalSwap(QuatFArrayWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
        swap(_impl_.time_code_, other->_impl_.time_code_);
}

::google::protobuf::Metadata QuatFArrayWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[10]);
}
// ===================================================================

class Float3WithTimeCode::_Internal {
 public:
  using HasBits = decltype(std::declval<Float3WithTimeCode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_._has_bits_);
};

Float3WithTimeCode::Float3WithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Float3WithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE Float3WithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Float3WithTimeCode::Float3WithTimeCode(
    ::google::protobuf::Arena* arena,
    const Float3WithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  Float3WithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.value_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::Float3>(
                              arena, *from._impl_.value_)
                        : nullptr;
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.Float3WithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE Float3WithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Float3WithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           0,
           offsetof(Impl_, time_code_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::time_code_));
}
Float3WithTimeCode::~Float3WithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Float3WithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.value_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Float3WithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_._cached_size_),
              false,
          },
          &Float3WithTimeCode::MergeImpl,
          &Float3WithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Float3WithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_.time_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Float3WithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Float3WithTimeCode::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Float3WithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3WithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .nvidia_ace.animation_data.v1.Float3 value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_.value_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_.time_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .nvidia_ace.animation_data.v1.Float3 value = 2;
    {PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3>()},
  }}, {{
  }},
};

::uint8_t* Float3WithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .nvidia_ace.animation_data.v1.Float3 value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.value_, _impl_.value_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  return target;
}

::size_t Float3WithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.animation_data.v1.Float3 value = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
  }

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Float3WithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Float3WithTimeCode*>(&to_msg);
  auto& from = static_cast<const Float3WithTimeCode&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.value_ != nullptr);
    if (_this->_impl_.value_ == nullptr) {
      _this->_impl_.value_ =
          ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::Float3>(arena, *from._impl_.value_);
    } else {
      _this->_impl_.value_->MergeFrom(*from._impl_.value_);
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Float3WithTimeCode::CopyFrom(const Float3WithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Float3WithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Float3WithTimeCode::IsInitialized() const {
  return true;
}

void Float3WithTimeCode::InternalSwap(Float3WithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_.time_code_)
      + sizeof(Float3WithTimeCode::_impl_.time_code_)
      - PROTOBUF_FIELD_OFFSET(Float3WithTimeCode, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata Float3WithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[11]);
}
// ===================================================================

class QuatFWithTimeCode::_Internal {
 public:
  using HasBits = decltype(std::declval<QuatFWithTimeCode>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_._has_bits_);
};

QuatFWithTimeCode::QuatFWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE QuatFWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

QuatFWithTimeCode::QuatFWithTimeCode(
    ::google::protobuf::Arena* arena,
    const QuatFWithTimeCode& from)
    : ::google::protobuf::Message(arena) {
  QuatFWithTimeCode* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.value_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::QuatF>(
                              arena, *from._impl_.value_)
                        : nullptr;
  _impl_.time_code_ = from._impl_.time_code_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
}
inline PROTOBUF_NDEBUG_INLINE QuatFWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void QuatFWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_),
           0,
           offsetof(Impl_, time_code_) -
               offsetof(Impl_, value_) +
               sizeof(Impl_::time_code_));
}
QuatFWithTimeCode::~QuatFWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QuatFWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.value_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
QuatFWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_._cached_size_),
              false,
          },
          &QuatFWithTimeCode::MergeImpl,
          &QuatFWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void QuatFWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_ != nullptr);
    _impl_.value_->Clear();
  }
  _impl_.time_code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QuatFWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> QuatFWithTimeCode::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_QuatFWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatFWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .nvidia_ace.animation_data.v1.QuatF value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_.value_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_.time_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .nvidia_ace.animation_data.v1.QuatF value = 2;
    {PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_.value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatF>()},
  }}, {{
  }},
};

::uint8_t* QuatFWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .nvidia_ace.animation_data.v1.QuatF value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.value_, _impl_.value_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  return target;
}

::size_t QuatFWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nvidia_ace.animation_data.v1.QuatF value = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_);
  }

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void QuatFWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QuatFWithTimeCode*>(&to_msg);
  auto& from = static_cast<const QuatFWithTimeCode&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.value_ != nullptr);
    if (_this->_impl_.value_ == nullptr) {
      _this->_impl_.value_ =
          ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::QuatF>(arena, *from._impl_.value_);
    } else {
      _this->_impl_.value_->MergeFrom(*from._impl_.value_);
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QuatFWithTimeCode::CopyFrom(const QuatFWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.QuatFWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QuatFWithTimeCode::IsInitialized() const {
  return true;
}

void QuatFWithTimeCode::InternalSwap(QuatFWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_.time_code_)
      + sizeof(QuatFWithTimeCode::_impl_.time_code_)
      - PROTOBUF_FIELD_OFFSET(QuatFWithTimeCode, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::google::protobuf::Metadata QuatFWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[12]);
}
// ===================================================================

class FloatWithTimeCode::_Internal {
 public:
};

FloatWithTimeCode::FloatWithTimeCode(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.FloatWithTimeCode)
}
FloatWithTimeCode::FloatWithTimeCode(
    ::google::protobuf::Arena* arena, const FloatWithTimeCode& from)
    : FloatWithTimeCode(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE FloatWithTimeCode::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FloatWithTimeCode::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_code_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, time_code_) +
               sizeof(Impl_::value_));
}
FloatWithTimeCode::~FloatWithTimeCode() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void FloatWithTimeCode::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
FloatWithTimeCode::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_._cached_size_),
              false,
          },
          &FloatWithTimeCode::MergeImpl,
          &FloatWithTimeCode::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void FloatWithTimeCode::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_code_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.time_code_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* FloatWithTimeCode::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> FloatWithTimeCode::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_FloatWithTimeCode_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::FloatWithTimeCode>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float value = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_.value_)}},
    // double time_code = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_.time_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double time_code = 1;
    {PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_.time_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // float value = 2;
    {PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* FloatWithTimeCode::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_time_code(), target);
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  return target;
}

::size_t FloatWithTimeCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double time_code = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = this->_internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    total_size += 9;
  }

  // float value = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void FloatWithTimeCode::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FloatWithTimeCode*>(&to_msg);
  auto& from = static_cast<const FloatWithTimeCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_time_code = from._internal_time_code();
  ::uint64_t raw_time_code;
  memcpy(&raw_time_code, &tmp_time_code, sizeof(tmp_time_code));
  if (raw_time_code != 0) {
    _this->_impl_.time_code_ = from._impl_.time_code_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  ::uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FloatWithTimeCode::CopyFrom(const FloatWithTimeCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.FloatWithTimeCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FloatWithTimeCode::IsInitialized() const {
  return true;
}

void FloatWithTimeCode::InternalSwap(FloatWithTimeCode* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_.value_)
      + sizeof(FloatWithTimeCode::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(FloatWithTimeCode, _impl_.time_code_)>(
          reinterpret_cast<char*>(&_impl_.time_code_),
          reinterpret_cast<char*>(&other->_impl_.time_code_));
}

::google::protobuf::Metadata FloatWithTimeCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[13]);
}
// ===================================================================

class QuatF::_Internal {
 public:
};

QuatF::QuatF(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.QuatF)
}
QuatF::QuatF(
    ::google::protobuf::Arena* arena, const QuatF& from)
    : QuatF(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE QuatF::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void QuatF::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, real_),
           0,
           offsetof(Impl_, k_) -
               offsetof(Impl_, real_) +
               sizeof(Impl_::k_));
}
QuatF::~QuatF() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.QuatF)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void QuatF::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
QuatF::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(QuatF, _impl_._cached_size_),
              false,
          },
          &QuatF::MergeImpl,
          &QuatF::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void QuatF::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.QuatF)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.real_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.k_) -
      reinterpret_cast<char*>(&_impl_.real_)) + sizeof(_impl_.k_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* QuatF::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> QuatF::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_QuatF_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::QuatF>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float k = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(QuatF, _impl_.k_)}},
    // float real = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(QuatF, _impl_.real_)}},
    // float i = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(QuatF, _impl_.i_)}},
    // float j = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(QuatF, _impl_.j_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float real = 1;
    {PROTOBUF_FIELD_OFFSET(QuatF, _impl_.real_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float i = 2;
    {PROTOBUF_FIELD_OFFSET(QuatF, _impl_.i_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float j = 3;
    {PROTOBUF_FIELD_OFFSET(QuatF, _impl_.j_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float k = 4;
    {PROTOBUF_FIELD_OFFSET(QuatF, _impl_.k_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* QuatF::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.QuatF)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float real = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_real = this->_internal_real();
  ::uint32_t raw_real;
  memcpy(&raw_real, &tmp_real, sizeof(tmp_real));
  if (raw_real != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_real(), target);
  }

  // float i = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_i = this->_internal_i();
  ::uint32_t raw_i;
  memcpy(&raw_i, &tmp_i, sizeof(tmp_i));
  if (raw_i != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_i(), target);
  }

  // float j = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_j = this->_internal_j();
  ::uint32_t raw_j;
  memcpy(&raw_j, &tmp_j, sizeof(tmp_j));
  if (raw_j != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_j(), target);
  }

  // float k = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k = this->_internal_k();
  ::uint32_t raw_k;
  memcpy(&raw_k, &tmp_k, sizeof(tmp_k));
  if (raw_k != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.QuatF)
  return target;
}

::size_t QuatF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.QuatF)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float real = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_real = this->_internal_real();
  ::uint32_t raw_real;
  memcpy(&raw_real, &tmp_real, sizeof(tmp_real));
  if (raw_real != 0) {
    total_size += 5;
  }

  // float i = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_i = this->_internal_i();
  ::uint32_t raw_i;
  memcpy(&raw_i, &tmp_i, sizeof(tmp_i));
  if (raw_i != 0) {
    total_size += 5;
  }

  // float j = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_j = this->_internal_j();
  ::uint32_t raw_j;
  memcpy(&raw_j, &tmp_j, sizeof(tmp_j));
  if (raw_j != 0) {
    total_size += 5;
  }

  // float k = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k = this->_internal_k();
  ::uint32_t raw_k;
  memcpy(&raw_k, &tmp_k, sizeof(tmp_k));
  if (raw_k != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void QuatF::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<QuatF*>(&to_msg);
  auto& from = static_cast<const QuatF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.QuatF)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_real = from._internal_real();
  ::uint32_t raw_real;
  memcpy(&raw_real, &tmp_real, sizeof(tmp_real));
  if (raw_real != 0) {
    _this->_impl_.real_ = from._impl_.real_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_i = from._internal_i();
  ::uint32_t raw_i;
  memcpy(&raw_i, &tmp_i, sizeof(tmp_i));
  if (raw_i != 0) {
    _this->_impl_.i_ = from._impl_.i_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_j = from._internal_j();
  ::uint32_t raw_j;
  memcpy(&raw_j, &tmp_j, sizeof(tmp_j));
  if (raw_j != 0) {
    _this->_impl_.j_ = from._impl_.j_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_k = from._internal_k();
  ::uint32_t raw_k;
  memcpy(&raw_k, &tmp_k, sizeof(tmp_k));
  if (raw_k != 0) {
    _this->_impl_.k_ = from._impl_.k_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void QuatF::CopyFrom(const QuatF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.QuatF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool QuatF::IsInitialized() const {
  return true;
}

void QuatF::InternalSwap(QuatF* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuatF, _impl_.k_)
      + sizeof(QuatF::_impl_.k_)
      - PROTOBUF_FIELD_OFFSET(QuatF, _impl_.real_)>(
          reinterpret_cast<char*>(&_impl_.real_),
          reinterpret_cast<char*>(&other->_impl_.real_));
}

::google::protobuf::Metadata QuatF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[14]);
}
// ===================================================================

class Float3::_Internal {
 public:
};

Float3::Float3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.animation_data.v1.Float3)
}
Float3::Float3(
    ::google::protobuf::Arena* arena, const Float3& from)
    : Float3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Float3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Float3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Float3::~Float3() {
  // @@protoc_insertion_point(destructor:nvidia_ace.animation_data.v1.Float3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Float3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Float3::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Float3, _impl_._cached_size_),
              false,
          },
          &Float3::MergeImpl,
          &Float3::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Float3::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.animation_data.v1.Float3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Float3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Float3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Float3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::Float3>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Float3, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Float3, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Float3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Float3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Float3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Float3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Float3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.animation_data.v1.Float3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.animation_data.v1.Float3)
  return target;
}

::size_t Float3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.animation_data.v1.Float3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Float3::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Float3*>(&to_msg);
  auto& from = static_cast<const Float3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.animation_data.v1.Float3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_impl_.z_ = from._impl_.z_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Float3::CopyFrom(const Float3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.animation_data.v1.Float3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Float3::IsInitialized() const {
  return true;
}

void Float3::InternalSwap(Float3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Float3, _impl_.z_)
      + sizeof(Float3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Float3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Float3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2eanimation_5fdata_2ev1_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace animation_data
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
