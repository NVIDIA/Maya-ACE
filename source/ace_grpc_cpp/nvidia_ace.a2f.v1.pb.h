// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.a2f.v1.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2ea2f_2ev1_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2ea2f_2ev1_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "nvidia_ace.animation_id.v1.pb.h"
#include "nvidia_ace.status.v1.pb.h"
#include "nvidia_ace.audio.v1.pb.h"
#include "nvidia_ace.emotion_with_timecode.v1.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nvidia_5face_2ea2f_2ev1_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_5face_2ea2f_2ev1_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nvidia_5face_2ea2f_2ev1_2eproto;
namespace nvidia_ace {
namespace a2f {
namespace v1 {
class AudioStream;
struct AudioStreamDefaultTypeInternal;
extern AudioStreamDefaultTypeInternal _AudioStream_default_instance_;
class AudioStreamHeader;
struct AudioStreamHeaderDefaultTypeInternal;
extern AudioStreamHeaderDefaultTypeInternal _AudioStreamHeader_default_instance_;
class AudioWithEmotion;
struct AudioWithEmotionDefaultTypeInternal;
extern AudioWithEmotionDefaultTypeInternal _AudioWithEmotion_default_instance_;
class BlendShapeParameters;
struct BlendShapeParametersDefaultTypeInternal;
extern BlendShapeParametersDefaultTypeInternal _BlendShapeParameters_default_instance_;
class BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse;
struct BlendShapeParameters_BsWeightMultipliersEntry_DoNotUseDefaultTypeInternal;
extern BlendShapeParameters_BsWeightMultipliersEntry_DoNotUseDefaultTypeInternal _BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_;
class BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse;
struct BlendShapeParameters_BsWeightOffsetsEntry_DoNotUseDefaultTypeInternal;
extern BlendShapeParameters_BsWeightOffsetsEntry_DoNotUseDefaultTypeInternal _BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_;
class EmotionPostProcessingParameters;
struct EmotionPostProcessingParametersDefaultTypeInternal;
extern EmotionPostProcessingParametersDefaultTypeInternal _EmotionPostProcessingParameters_default_instance_;
class FaceParameters;
struct FaceParametersDefaultTypeInternal;
extern FaceParametersDefaultTypeInternal _FaceParameters_default_instance_;
class FaceParameters_FloatArrayParamsEntry_DoNotUse;
struct FaceParameters_FloatArrayParamsEntry_DoNotUseDefaultTypeInternal;
extern FaceParameters_FloatArrayParamsEntry_DoNotUseDefaultTypeInternal _FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_;
class FaceParameters_FloatParamsEntry_DoNotUse;
struct FaceParameters_FloatParamsEntry_DoNotUseDefaultTypeInternal;
extern FaceParameters_FloatParamsEntry_DoNotUseDefaultTypeInternal _FaceParameters_FloatParamsEntry_DoNotUse_default_instance_;
class FaceParameters_IntegerParamsEntry_DoNotUse;
struct FaceParameters_IntegerParamsEntry_DoNotUseDefaultTypeInternal;
extern FaceParameters_IntegerParamsEntry_DoNotUseDefaultTypeInternal _FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_;
class FloatArray;
struct FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
}  // namespace v1
}  // namespace a2f
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nvidia_ace {
namespace a2f {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class FloatArray final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.FloatArray) */ {
 public:
  inline FloatArray() : FloatArray(nullptr) {}
  ~FloatArray() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FloatArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline FloatArray(const FloatArray& from) : FloatArray(nullptr, from) {}
  inline FloatArray(FloatArray&& from) noexcept
      : FloatArray(nullptr, std::move(from)) {}
  inline FloatArray& operator=(const FloatArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatArray& operator=(FloatArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatArray* internal_default_instance() {
    return reinterpret_cast<const FloatArray*>(
        &_FloatArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(FloatArray& a, FloatArray& b) { a.Swap(&b); }
  inline void Swap(FloatArray* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatArray* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FloatArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FloatArray& from) { FloatArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FloatArray* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.FloatArray"; }

 protected:
  explicit FloatArray(::google::protobuf::Arena* arena);
  FloatArray(::google::protobuf::Arena* arena, const FloatArray& from);
  FloatArray(::google::protobuf::Arena* arena, FloatArray&& from) noexcept
      : FloatArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf::RepeatedField<float>& values() const;
  ::google::protobuf::RepeatedField<float>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_values() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.FloatArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> values_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FaceParameters_IntegerParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          FaceParameters_IntegerParamsEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      FaceParameters_IntegerParamsEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  FaceParameters_IntegerParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FaceParameters_IntegerParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FaceParameters_IntegerParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FaceParameters_IntegerParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FaceParameters_IntegerParamsEntry_DoNotUse*>(
        &_FaceParameters_IntegerParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.FaceParameters.IntegerParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FaceParameters_FloatParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          FaceParameters_FloatParamsEntry_DoNotUse, std::string, float,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      FaceParameters_FloatParamsEntry_DoNotUse, std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>;
  FaceParameters_FloatParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FaceParameters_FloatParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FaceParameters_FloatParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FaceParameters_FloatParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FaceParameters_FloatParamsEntry_DoNotUse*>(
        &_FaceParameters_FloatParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.FaceParameters.FloatParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class EmotionPostProcessingParameters final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.EmotionPostProcessingParameters) */ {
 public:
  inline EmotionPostProcessingParameters() : EmotionPostProcessingParameters(nullptr) {}
  ~EmotionPostProcessingParameters() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR EmotionPostProcessingParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline EmotionPostProcessingParameters(const EmotionPostProcessingParameters& from) : EmotionPostProcessingParameters(nullptr, from) {}
  inline EmotionPostProcessingParameters(EmotionPostProcessingParameters&& from) noexcept
      : EmotionPostProcessingParameters(nullptr, std::move(from)) {}
  inline EmotionPostProcessingParameters& operator=(const EmotionPostProcessingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmotionPostProcessingParameters& operator=(EmotionPostProcessingParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmotionPostProcessingParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmotionPostProcessingParameters* internal_default_instance() {
    return reinterpret_cast<const EmotionPostProcessingParameters*>(
        &_EmotionPostProcessingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(EmotionPostProcessingParameters& a, EmotionPostProcessingParameters& b) { a.Swap(&b); }
  inline void Swap(EmotionPostProcessingParameters* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmotionPostProcessingParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmotionPostProcessingParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<EmotionPostProcessingParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EmotionPostProcessingParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const EmotionPostProcessingParameters& from) { EmotionPostProcessingParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EmotionPostProcessingParameters* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.EmotionPostProcessingParameters"; }

 protected:
  explicit EmotionPostProcessingParameters(::google::protobuf::Arena* arena);
  EmotionPostProcessingParameters(::google::protobuf::Arena* arena, const EmotionPostProcessingParameters& from);
  EmotionPostProcessingParameters(::google::protobuf::Arena* arena, EmotionPostProcessingParameters&& from) noexcept
      : EmotionPostProcessingParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmotionContrastFieldNumber = 1,
    kLiveBlendCoefFieldNumber = 2,
    kEnablePreferredEmotionFieldNumber = 3,
    kPreferredEmotionStrengthFieldNumber = 4,
    kEmotionStrengthFieldNumber = 5,
    kMaxEmotionsFieldNumber = 6,
  };
  // optional float emotion_contrast = 1;
  bool has_emotion_contrast() const;
  void clear_emotion_contrast() ;
  float emotion_contrast() const;
  void set_emotion_contrast(float value);

  private:
  float _internal_emotion_contrast() const;
  void _internal_set_emotion_contrast(float value);

  public:
  // optional float live_blend_coef = 2;
  bool has_live_blend_coef() const;
  void clear_live_blend_coef() ;
  float live_blend_coef() const;
  void set_live_blend_coef(float value);

  private:
  float _internal_live_blend_coef() const;
  void _internal_set_live_blend_coef(float value);

  public:
  // optional bool enable_preferred_emotion = 3;
  bool has_enable_preferred_emotion() const;
  void clear_enable_preferred_emotion() ;
  bool enable_preferred_emotion() const;
  void set_enable_preferred_emotion(bool value);

  private:
  bool _internal_enable_preferred_emotion() const;
  void _internal_set_enable_preferred_emotion(bool value);

  public:
  // optional float preferred_emotion_strength = 4;
  bool has_preferred_emotion_strength() const;
  void clear_preferred_emotion_strength() ;
  float preferred_emotion_strength() const;
  void set_preferred_emotion_strength(float value);

  private:
  float _internal_preferred_emotion_strength() const;
  void _internal_set_preferred_emotion_strength(float value);

  public:
  // optional float emotion_strength = 5;
  bool has_emotion_strength() const;
  void clear_emotion_strength() ;
  float emotion_strength() const;
  void set_emotion_strength(float value);

  private:
  float _internal_emotion_strength() const;
  void _internal_set_emotion_strength(float value);

  public:
  // optional int32 max_emotions = 6;
  bool has_max_emotions() const;
  void clear_max_emotions() ;
  ::int32_t max_emotions() const;
  void set_max_emotions(::int32_t value);

  private:
  ::int32_t _internal_max_emotions() const;
  void _internal_set_max_emotions(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.EmotionPostProcessingParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float emotion_contrast_;
    float live_blend_coef_;
    bool enable_preferred_emotion_;
    float preferred_emotion_strength_;
    float emotion_strength_;
    ::int32_t max_emotions_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, std::string, float,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>;
  BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse*>(
        &_BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.BlendShapeParameters.BsWeightOffsetsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, std::string, float,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, std::string, float,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>;
  BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse*>(
        &_BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.BlendShapeParameters.BsWeightMultipliersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FaceParameters_FloatArrayParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          FaceParameters_FloatArrayParamsEntry_DoNotUse, std::string, ::nvidia_ace::a2f::v1::FloatArray,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      FaceParameters_FloatArrayParamsEntry_DoNotUse, std::string, ::nvidia_ace::a2f::v1::FloatArray,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  FaceParameters_FloatArrayParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FaceParameters_FloatArrayParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit FaceParameters_FloatArrayParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const FaceParameters_FloatArrayParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const FaceParameters_FloatArrayParamsEntry_DoNotUse*>(
        &_FaceParameters_FloatArrayParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "nvidia_ace.a2f.v1.FaceParameters.FloatArrayParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class BlendShapeParameters final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.BlendShapeParameters) */ {
 public:
  inline BlendShapeParameters() : BlendShapeParameters(nullptr) {}
  ~BlendShapeParameters() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BlendShapeParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline BlendShapeParameters(const BlendShapeParameters& from) : BlendShapeParameters(nullptr, from) {}
  inline BlendShapeParameters(BlendShapeParameters&& from) noexcept
      : BlendShapeParameters(nullptr, std::move(from)) {}
  inline BlendShapeParameters& operator=(const BlendShapeParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlendShapeParameters& operator=(BlendShapeParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlendShapeParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlendShapeParameters* internal_default_instance() {
    return reinterpret_cast<const BlendShapeParameters*>(
        &_BlendShapeParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(BlendShapeParameters& a, BlendShapeParameters& b) { a.Swap(&b); }
  inline void Swap(BlendShapeParameters* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlendShapeParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlendShapeParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BlendShapeParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BlendShapeParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BlendShapeParameters& from) { BlendShapeParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BlendShapeParameters* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.BlendShapeParameters"; }

 protected:
  explicit BlendShapeParameters(::google::protobuf::Arena* arena);
  BlendShapeParameters(::google::protobuf::Arena* arena, const BlendShapeParameters& from);
  BlendShapeParameters(::google::protobuf::Arena* arena, BlendShapeParameters&& from) noexcept
      : BlendShapeParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBsWeightMultipliersFieldNumber = 1,
    kBsWeightOffsetsFieldNumber = 2,
  };
  // map<string, float> bs_weight_multipliers = 1;
  int bs_weight_multipliers_size() const;
  private:
  int _internal_bs_weight_multipliers_size() const;

  public:
  void clear_bs_weight_multipliers() ;
  const ::google::protobuf::Map<std::string, float>& bs_weight_multipliers() const;
  ::google::protobuf::Map<std::string, float>* mutable_bs_weight_multipliers();

  private:
  const ::google::protobuf::Map<std::string, float>& _internal_bs_weight_multipliers() const;
  ::google::protobuf::Map<std::string, float>* _internal_mutable_bs_weight_multipliers();

  public:
  // map<string, float> bs_weight_offsets = 2;
  int bs_weight_offsets_size() const;
  private:
  int _internal_bs_weight_offsets_size() const;

  public:
  void clear_bs_weight_offsets() ;
  const ::google::protobuf::Map<std::string, float>& bs_weight_offsets() const;
  ::google::protobuf::Map<std::string, float>* mutable_bs_weight_offsets();

  private:
  const ::google::protobuf::Map<std::string, float>& _internal_bs_weight_offsets() const;
  ::google::protobuf::Map<std::string, float>* _internal_mutable_bs_weight_offsets();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.BlendShapeParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      85, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<BlendShapeParameters_BsWeightMultipliersEntry_DoNotUse, std::string, float,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>
        bs_weight_multipliers_;
    ::google::protobuf::internal::MapField<BlendShapeParameters_BsWeightOffsetsEntry_DoNotUse, std::string, float,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>
        bs_weight_offsets_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class FaceParameters final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.FaceParameters) */ {
 public:
  inline FaceParameters() : FaceParameters(nullptr) {}
  ~FaceParameters() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR FaceParameters(
      ::google::protobuf::internal::ConstantInitialized);

  inline FaceParameters(const FaceParameters& from) : FaceParameters(nullptr, from) {}
  inline FaceParameters(FaceParameters&& from) noexcept
      : FaceParameters(nullptr, std::move(from)) {}
  inline FaceParameters& operator=(const FaceParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceParameters& operator=(FaceParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FaceParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const FaceParameters* internal_default_instance() {
    return reinterpret_cast<const FaceParameters*>(
        &_FaceParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(FaceParameters& a, FaceParameters& b) { a.Swap(&b); }
  inline void Swap(FaceParameters* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FaceParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FaceParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<FaceParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FaceParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const FaceParameters& from) { FaceParameters::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FaceParameters* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.FaceParameters"; }

 protected:
  explicit FaceParameters(::google::protobuf::Arena* arena);
  FaceParameters(::google::protobuf::Arena* arena, const FaceParameters& from);
  FaceParameters(::google::protobuf::Arena* arena, FaceParameters&& from) noexcept
      : FaceParameters(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFloatParamsFieldNumber = 1,
    kIntegerParamsFieldNumber = 2,
    kFloatArrayParamsFieldNumber = 3,
  };
  // map<string, float> float_params = 1;
  int float_params_size() const;
  private:
  int _internal_float_params_size() const;

  public:
  void clear_float_params() ;
  const ::google::protobuf::Map<std::string, float>& float_params() const;
  ::google::protobuf::Map<std::string, float>* mutable_float_params();

  private:
  const ::google::protobuf::Map<std::string, float>& _internal_float_params() const;
  ::google::protobuf::Map<std::string, float>* _internal_mutable_float_params();

  public:
  // map<string, int32> integer_params = 2;
  int integer_params_size() const;
  private:
  int _internal_integer_params_size() const;

  public:
  void clear_integer_params() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& integer_params() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_integer_params();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_integer_params() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_integer_params();

  public:
  // map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
  int float_array_params_size() const;
  private:
  int _internal_float_array_params_size() const;

  public:
  void clear_float_array_params() ;
  const ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>& float_array_params() const;
  ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>* mutable_float_array_params();

  private:
  const ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>& _internal_float_array_params() const;
  ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>* _internal_mutable_float_array_params();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.FaceParameters)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 4,
      85, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<FaceParameters_FloatParamsEntry_DoNotUse, std::string, float,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>
        float_params_;
    ::google::protobuf::internal::MapField<FaceParameters_IntegerParamsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        integer_params_;
    ::google::protobuf::internal::MapField<FaceParameters_FloatArrayParamsEntry_DoNotUse, std::string, ::nvidia_ace::a2f::v1::FloatArray,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        float_array_params_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioWithEmotion final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.AudioWithEmotion) */ {
 public:
  inline AudioWithEmotion() : AudioWithEmotion(nullptr) {}
  ~AudioWithEmotion() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioWithEmotion(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioWithEmotion(const AudioWithEmotion& from) : AudioWithEmotion(nullptr, from) {}
  inline AudioWithEmotion(AudioWithEmotion&& from) noexcept
      : AudioWithEmotion(nullptr, std::move(from)) {}
  inline AudioWithEmotion& operator=(const AudioWithEmotion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioWithEmotion& operator=(AudioWithEmotion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioWithEmotion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioWithEmotion* internal_default_instance() {
    return reinterpret_cast<const AudioWithEmotion*>(
        &_AudioWithEmotion_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(AudioWithEmotion& a, AudioWithEmotion& b) { a.Swap(&b); }
  inline void Swap(AudioWithEmotion* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioWithEmotion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioWithEmotion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AudioWithEmotion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioWithEmotion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioWithEmotion& from) { AudioWithEmotion::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioWithEmotion* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.AudioWithEmotion"; }

 protected:
  explicit AudioWithEmotion(::google::protobuf::Arena* arena);
  AudioWithEmotion(::google::protobuf::Arena* arena, const AudioWithEmotion& from);
  AudioWithEmotion(::google::protobuf::Arena* arena, AudioWithEmotion&& from) noexcept
      : AudioWithEmotion(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEmotionsFieldNumber = 2,
    kAudioBufferFieldNumber = 1,
  };
  // repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
  int emotions_size() const;
  private:
  int _internal_emotions_size() const;

  public:
  void clear_emotions() ;
  ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* mutable_emotions(int index);
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>* mutable_emotions();

  private:
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>& _internal_emotions() const;
  ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>* _internal_mutable_emotions();
  public:
  const ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode& emotions(int index) const;
  ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* add_emotions();
  const ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>& emotions() const;
  // bytes audio_buffer = 1;
  void clear_audio_buffer() ;
  const std::string& audio_buffer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_audio_buffer(Arg_&& arg, Args_... args);
  std::string* mutable_audio_buffer();
  PROTOBUF_NODISCARD std::string* release_audio_buffer();
  void set_allocated_audio_buffer(std::string* value);

  private:
  const std::string& _internal_audio_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_buffer(
      const std::string& value);
  std::string* _internal_mutable_audio_buffer();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.AudioWithEmotion)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode > emotions_;
    ::google::protobuf::internal::ArenaStringPtr audio_buffer_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.AudioStreamHeader) */ {
 public:
  inline AudioStreamHeader() : AudioStreamHeader(nullptr) {}
  ~AudioStreamHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioStreamHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioStreamHeader(const AudioStreamHeader& from) : AudioStreamHeader(nullptr, from) {}
  inline AudioStreamHeader(AudioStreamHeader&& from) noexcept
      : AudioStreamHeader(nullptr, std::move(from)) {}
  inline AudioStreamHeader& operator=(const AudioStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamHeader& operator=(AudioStreamHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioStreamHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AudioStreamHeader*>(
        &_AudioStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AudioStreamHeader& a, AudioStreamHeader& b) { a.Swap(&b); }
  inline void Swap(AudioStreamHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioStreamHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AudioStreamHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioStreamHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioStreamHeader& from) { AudioStreamHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioStreamHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.AudioStreamHeader"; }

 protected:
  explicit AudioStreamHeader(::google::protobuf::Arena* arena);
  AudioStreamHeader(::google::protobuf::Arena* arena, const AudioStreamHeader& from);
  AudioStreamHeader(::google::protobuf::Arena* arena, AudioStreamHeader&& from) noexcept
      : AudioStreamHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAnimationIdsFieldNumber = 1,
    kAudioHeaderFieldNumber = 2,
    kFaceParamsFieldNumber = 3,
    kEmotionPostProcessingParamsFieldNumber = 4,
    kBlendshapeParamsFieldNumber = 5,
  };
  // .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
  bool has_animation_ids() const;
  void clear_animation_ids() ;
  const ::nvidia_ace::animation_id::v1::AnimationIds& animation_ids() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_id::v1::AnimationIds* release_animation_ids();
  ::nvidia_ace::animation_id::v1::AnimationIds* mutable_animation_ids();
  void set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  void unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value);
  ::nvidia_ace::animation_id::v1::AnimationIds* unsafe_arena_release_animation_ids();

  private:
  const ::nvidia_ace::animation_id::v1::AnimationIds& _internal_animation_ids() const;
  ::nvidia_ace::animation_id::v1::AnimationIds* _internal_mutable_animation_ids();

  public:
  // .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
  bool has_audio_header() const;
  void clear_audio_header() ;
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  void unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();

  public:
  // .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
  bool has_face_params() const;
  void clear_face_params() ;
  const ::nvidia_ace::a2f::v1::FaceParameters& face_params() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::FaceParameters* release_face_params();
  ::nvidia_ace::a2f::v1::FaceParameters* mutable_face_params();
  void set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value);
  void unsafe_arena_set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value);
  ::nvidia_ace::a2f::v1::FaceParameters* unsafe_arena_release_face_params();

  private:
  const ::nvidia_ace::a2f::v1::FaceParameters& _internal_face_params() const;
  ::nvidia_ace::a2f::v1::FaceParameters* _internal_mutable_face_params();

  public:
  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
  bool has_emotion_post_processing_params() const;
  void clear_emotion_post_processing_params() ;
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& emotion_post_processing_params() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* release_emotion_post_processing_params();
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* mutable_emotion_post_processing_params();
  void set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value);
  void unsafe_arena_set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value);
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* unsafe_arena_release_emotion_post_processing_params();

  private:
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& _internal_emotion_post_processing_params() const;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* _internal_mutable_emotion_post_processing_params();

  public:
  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
  bool has_blendshape_params() const;
  void clear_blendshape_params() ;
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& blendshape_params() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::BlendShapeParameters* release_blendshape_params();
  ::nvidia_ace::a2f::v1::BlendShapeParameters* mutable_blendshape_params();
  void set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value);
  void unsafe_arena_set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value);
  ::nvidia_ace::a2f::v1::BlendShapeParameters* unsafe_arena_release_blendshape_params();

  private:
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& _internal_blendshape_params() const;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* _internal_mutable_blendshape_params();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.AudioStreamHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::nvidia_ace::animation_id::v1::AnimationIds* animation_ids_;
    ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
    ::nvidia_ace::a2f::v1::FaceParameters* face_params_;
    ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params_;
    ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStream final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.a2f.v1.AudioStream) */ {
 public:
  inline AudioStream() : AudioStream(nullptr) {}
  ~AudioStream() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioStream(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioStream(const AudioStream& from) : AudioStream(nullptr, from) {}
  inline AudioStream(AudioStream&& from) noexcept
      : AudioStream(nullptr, std::move(from)) {}
  inline AudioStream& operator=(const AudioStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStream& operator=(AudioStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioStream& default_instance() {
    return *internal_default_instance();
  }
  enum StreamPartCase {
    kAudioStreamHeader = 1,
    kAudioWithEmotion = 2,
    STREAM_PART_NOT_SET = 0,
  };
  static inline const AudioStream* internal_default_instance() {
    return reinterpret_cast<const AudioStream*>(
        &_AudioStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AudioStream& a, AudioStream& b) { a.Swap(&b); }
  inline void Swap(AudioStream* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioStream* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AudioStream>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioStream& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioStream& from) { AudioStream::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioStream* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.a2f.v1.AudioStream"; }

 protected:
  explicit AudioStream(::google::protobuf::Arena* arena);
  AudioStream(::google::protobuf::Arena* arena, const AudioStream& from);
  AudioStream(::google::protobuf::Arena* arena, AudioStream&& from) noexcept
      : AudioStream(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioStreamHeaderFieldNumber = 1,
    kAudioWithEmotionFieldNumber = 2,
  };
  // .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
  bool has_audio_stream_header() const;
  private:
  bool _internal_has_audio_stream_header() const;

  public:
  void clear_audio_stream_header() ;
  const ::nvidia_ace::a2f::v1::AudioStreamHeader& audio_stream_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::AudioStreamHeader* release_audio_stream_header();
  ::nvidia_ace::a2f::v1::AudioStreamHeader* mutable_audio_stream_header();
  void set_allocated_audio_stream_header(::nvidia_ace::a2f::v1::AudioStreamHeader* value);
  void unsafe_arena_set_allocated_audio_stream_header(::nvidia_ace::a2f::v1::AudioStreamHeader* value);
  ::nvidia_ace::a2f::v1::AudioStreamHeader* unsafe_arena_release_audio_stream_header();

  private:
  const ::nvidia_ace::a2f::v1::AudioStreamHeader& _internal_audio_stream_header() const;
  ::nvidia_ace::a2f::v1::AudioStreamHeader* _internal_mutable_audio_stream_header();

  public:
  // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
  bool has_audio_with_emotion() const;
  private:
  bool _internal_has_audio_with_emotion() const;

  public:
  void clear_audio_with_emotion() ;
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& audio_with_emotion() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::AudioWithEmotion* release_audio_with_emotion();
  ::nvidia_ace::a2f::v1::AudioWithEmotion* mutable_audio_with_emotion();
  void set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* value);
  void unsafe_arena_set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* value);
  ::nvidia_ace::a2f::v1::AudioWithEmotion* unsafe_arena_release_audio_with_emotion();

  private:
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& _internal_audio_with_emotion() const;
  ::nvidia_ace::a2f::v1::AudioWithEmotion* _internal_mutable_audio_with_emotion();

  public:
  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.a2f.v1.AudioStream)
 private:
  class _Internal;
  void set_has_audio_stream_header();
  void set_has_audio_with_emotion();
  inline bool has_stream_part() const;
  inline void clear_has_stream_part();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union StreamPartUnion {
      constexpr StreamPartUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::nvidia_ace::a2f::v1::AudioStreamHeader* audio_stream_header_;
      ::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion_;
    } stream_part_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2ea2f_2ev1_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioStream

// .nvidia_ace.a2f.v1.AudioStreamHeader audio_stream_header = 1;
inline bool AudioStream::has_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader;
}
inline bool AudioStream::_internal_has_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader;
}
inline void AudioStream::set_has_audio_stream_header() {
  _impl_._oneof_case_[0] = kAudioStreamHeader;
}
inline void AudioStream::clear_audio_stream_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAudioStreamHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.audio_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::release_audio_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  if (stream_part_case() == kAudioStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::a2f::v1::AudioStreamHeader& AudioStream::_internal_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader ? *_impl_.stream_part_.audio_stream_header_ : reinterpret_cast<::nvidia_ace::a2f::v1::AudioStreamHeader&>(::nvidia_ace::a2f::v1::_AudioStreamHeader_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::AudioStreamHeader& AudioStream::audio_stream_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  return _internal_audio_stream_header();
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::unsafe_arena_release_audio_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  if (stream_part_case() == kAudioStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_stream_header_;
    _impl_.stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_stream_header(::nvidia_ace::a2f::v1::AudioStreamHeader* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_audio_stream_header();
    _impl_.stream_part_.audio_stream_header_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::_internal_mutable_audio_stream_header() {
  if (stream_part_case() != kAudioStreamHeader) {
    clear_stream_part();
    set_has_audio_stream_header();
    _impl_.stream_part_.audio_stream_header_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::AudioStreamHeader>(GetArena());
  }
  return _impl_.stream_part_.audio_stream_header_;
}
inline ::nvidia_ace::a2f::v1::AudioStreamHeader* AudioStream::mutable_audio_stream_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::a2f::v1::AudioStreamHeader* _msg = _internal_mutable_audio_stream_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStream.audio_stream_header)
  return _msg;
}

// .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
inline bool AudioStream::has_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion;
}
inline bool AudioStream::_internal_has_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion;
}
inline void AudioStream::set_has_audio_with_emotion() {
  _impl_._oneof_case_[0] = kAudioWithEmotion;
}
inline void AudioStream::clear_audio_with_emotion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAudioWithEmotion) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.audio_with_emotion_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::release_audio_with_emotion() {
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  if (stream_part_case() == kAudioWithEmotion) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_with_emotion_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::_internal_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion ? *_impl_.stream_part_.audio_with_emotion_ : reinterpret_cast<::nvidia_ace::a2f::v1::AudioWithEmotion&>(::nvidia_ace::a2f::v1::_AudioWithEmotion_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::audio_with_emotion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  return _internal_audio_with_emotion();
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::unsafe_arena_release_audio_with_emotion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  if (stream_part_case() == kAudioWithEmotion) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_with_emotion_;
    _impl_.stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_audio_with_emotion();
    _impl_.stream_part_.audio_with_emotion_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::_internal_mutable_audio_with_emotion() {
  if (stream_part_case() != kAudioWithEmotion) {
    clear_stream_part();
    set_has_audio_with_emotion();
    _impl_.stream_part_.audio_with_emotion_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::AudioWithEmotion>(GetArena());
  }
  return _impl_.stream_part_.audio_with_emotion_;
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::mutable_audio_with_emotion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::a2f::v1::AudioWithEmotion* _msg = _internal_mutable_audio_with_emotion();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStream.audio_with_emotion)
  return _msg;
}

inline bool AudioStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AudioStream::clear_has_stream_part() {
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AudioStream::StreamPartCase AudioStream::stream_part_case() const {
  return AudioStream::StreamPartCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioStreamHeader

// .nvidia_ace.animation_id.v1.AnimationIds animation_ids = 1;
inline bool AudioStreamHeader::has_animation_ids() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animation_ids_ != nullptr);
  return value;
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AudioStreamHeader::_internal_animation_ids() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_id::v1::AnimationIds* p = _impl_.animation_ids_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_id::v1::AnimationIds&>(::nvidia_ace::animation_id::v1::_AnimationIds_default_instance_);
}
inline const ::nvidia_ace::animation_id::v1::AnimationIds& AudioStreamHeader::animation_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
  return _internal_animation_ids();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.animation_ids_);
  }
  _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::release_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_id::v1::AnimationIds* released = _impl_.animation_ids_;
  _impl_.animation_ids_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::unsafe_arena_release_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::animation_id::v1::AnimationIds* temp = _impl_.animation_ids_;
  _impl_.animation_ids_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::_internal_mutable_animation_ids() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.animation_ids_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_id::v1::AnimationIds>(GetArena());
    _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(p);
  }
  return _impl_.animation_ids_;
}
inline ::nvidia_ace::animation_id::v1::AnimationIds* AudioStreamHeader::mutable_animation_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::animation_id::v1::AnimationIds* _msg = _internal_mutable_animation_ids();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_animation_ids(::nvidia_ace::animation_id::v1::AnimationIds* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.animation_ids_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.animation_ids_ = reinterpret_cast<::nvidia_ace::animation_id::v1::AnimationIds*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.animation_ids)
}

// .nvidia_ace.audio.v1.AudioHeader audio_header = 2;
inline bool AudioStreamHeader::has_audio_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_header_ != nullptr);
  return value;
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::_internal_audio_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::audio::v1::AudioHeader* p = _impl_.audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::audio_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }
  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::audio::v1::AudioHeader* released = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::unsafe_arena_release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::_internal_mutable_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(p);
  }
  return _impl_.audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::mutable_audio_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nvidia_ace::audio::v1::AudioHeader* _msg = _internal_mutable_audio_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.audio_header)
}

// .nvidia_ace.a2f.v1.FaceParameters face_params = 3;
inline bool AudioStreamHeader::has_face_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.face_params_ != nullptr);
  return value;
}
inline void AudioStreamHeader::clear_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.face_params_ != nullptr) _impl_.face_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::_internal_face_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::a2f::v1::FaceParameters* p = _impl_.face_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::FaceParameters&>(::nvidia_ace::a2f::v1::_FaceParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::face_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
  return _internal_face_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.face_params_);
  }
  _impl_.face_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::FaceParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::release_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::a2f::v1::FaceParameters* released = _impl_.face_params_;
  _impl_.face_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::unsafe_arena_release_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::a2f::v1::FaceParameters* temp = _impl_.face_params_;
  _impl_.face_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::_internal_mutable_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.face_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::FaceParameters>(GetArena());
    _impl_.face_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::FaceParameters*>(p);
  }
  return _impl_.face_params_;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::mutable_face_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::nvidia_ace::a2f::v1::FaceParameters* _msg = _internal_mutable_face_params();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.face_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.face_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::FaceParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.face_params)
}

// .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 4;
inline bool AudioStreamHeader::has_emotion_post_processing_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emotion_post_processing_params_ != nullptr);
  return value;
}
inline void AudioStreamHeader::clear_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.emotion_post_processing_params_ != nullptr) _impl_.emotion_post_processing_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::_internal_emotion_post_processing_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* p = _impl_.emotion_post_processing_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters&>(::nvidia_ace::a2f::v1::_EmotionPostProcessingParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::emotion_post_processing_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
  return _internal_emotion_post_processing_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emotion_post_processing_params_);
  }
  _impl_.emotion_post_processing_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::release_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* released = _impl_.emotion_post_processing_params_;
  _impl_.emotion_post_processing_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::unsafe_arena_release_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* temp = _impl_.emotion_post_processing_params_;
  _impl_.emotion_post_processing_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::_internal_mutable_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.emotion_post_processing_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(GetArena());
    _impl_.emotion_post_processing_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters*>(p);
  }
  return _impl_.emotion_post_processing_params_;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::mutable_emotion_post_processing_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* _msg = _internal_mutable_emotion_post_processing_params();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.emotion_post_processing_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.emotion_post_processing_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.emotion_post_processing_params)
}

// .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 5;
inline bool AudioStreamHeader::has_blendshape_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blendshape_params_ != nullptr);
  return value;
}
inline void AudioStreamHeader::clear_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.blendshape_params_ != nullptr) _impl_.blendshape_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::_internal_blendshape_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::a2f::v1::BlendShapeParameters* p = _impl_.blendshape_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::BlendShapeParameters&>(::nvidia_ace::a2f::v1::_BlendShapeParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::blendshape_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
  return _internal_blendshape_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blendshape_params_);
  }
  _impl_.blendshape_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::BlendShapeParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::release_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* released = _impl_.blendshape_params_;
  _impl_.blendshape_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::unsafe_arena_release_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* temp = _impl_.blendshape_params_;
  _impl_.blendshape_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::_internal_mutable_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.blendshape_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::BlendShapeParameters>(GetArena());
    _impl_.blendshape_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::BlendShapeParameters*>(p);
  }
  return _impl_.blendshape_params_;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::mutable_blendshape_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* _msg = _internal_mutable_blendshape_params();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.blendshape_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.blendshape_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::BlendShapeParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioStreamHeader.blendshape_params)
}

// -------------------------------------------------------------------

// FloatArray

// repeated float values = 1;
inline int FloatArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int FloatArray::values_size() const {
  return _internal_values_size();
}
inline void FloatArray::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline float FloatArray::values(int index) const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.FloatArray.values)
  return _internal_values().Get(index);
}
inline void FloatArray::set_values(int index, float value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.FloatArray.values)
}
inline void FloatArray::add_values(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:nvidia_ace.a2f.v1.FloatArray.values)
}
inline const ::google::protobuf::RepeatedField<float>& FloatArray::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.a2f.v1.FloatArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<float>* FloatArray::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.a2f.v1.FloatArray.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<float>&
FloatArray::_internal_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<float>* FloatArray::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FaceParameters

// map<string, float> float_params = 1;
inline int FaceParameters::_internal_float_params_size() const {
  return _internal_float_params().size();
}
inline int FaceParameters::float_params_size() const {
  return _internal_float_params_size();
}
inline void FaceParameters::clear_float_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.float_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, float>& FaceParameters::_internal_float_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.float_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, float>& FaceParameters::float_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.FaceParameters.float_params)
  return _internal_float_params();
}
inline ::google::protobuf::Map<std::string, float>* FaceParameters::_internal_mutable_float_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.float_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, float>* FaceParameters::mutable_float_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.FaceParameters.float_params)
  return _internal_mutable_float_params();
}

// map<string, int32> integer_params = 2;
inline int FaceParameters::_internal_integer_params_size() const {
  return _internal_integer_params().size();
}
inline int FaceParameters::integer_params_size() const {
  return _internal_integer_params_size();
}
inline void FaceParameters::clear_integer_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.integer_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& FaceParameters::_internal_integer_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.integer_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& FaceParameters::integer_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.FaceParameters.integer_params)
  return _internal_integer_params();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* FaceParameters::_internal_mutable_integer_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.integer_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* FaceParameters::mutable_integer_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.FaceParameters.integer_params)
  return _internal_mutable_integer_params();
}

// map<string, .nvidia_ace.a2f.v1.FloatArray> float_array_params = 3;
inline int FaceParameters::_internal_float_array_params_size() const {
  return _internal_float_array_params().size();
}
inline int FaceParameters::float_array_params_size() const {
  return _internal_float_array_params_size();
}
inline void FaceParameters::clear_float_array_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.float_array_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>& FaceParameters::_internal_float_array_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.float_array_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>& FaceParameters::float_array_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.FaceParameters.float_array_params)
  return _internal_float_array_params();
}
inline ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>* FaceParameters::_internal_mutable_float_array_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.float_array_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::nvidia_ace::a2f::v1::FloatArray>* FaceParameters::mutable_float_array_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.FaceParameters.float_array_params)
  return _internal_mutable_float_array_params();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BlendShapeParameters

// map<string, float> bs_weight_multipliers = 1;
inline int BlendShapeParameters::_internal_bs_weight_multipliers_size() const {
  return _internal_bs_weight_multipliers().size();
}
inline int BlendShapeParameters::bs_weight_multipliers_size() const {
  return _internal_bs_weight_multipliers_size();
}
inline void BlendShapeParameters::clear_bs_weight_multipliers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bs_weight_multipliers_.Clear();
}
inline const ::google::protobuf::Map<std::string, float>& BlendShapeParameters::_internal_bs_weight_multipliers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bs_weight_multipliers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, float>& BlendShapeParameters::bs_weight_multipliers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_multipliers)
  return _internal_bs_weight_multipliers();
}
inline ::google::protobuf::Map<std::string, float>* BlendShapeParameters::_internal_mutable_bs_weight_multipliers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.bs_weight_multipliers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, float>* BlendShapeParameters::mutable_bs_weight_multipliers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_multipliers)
  return _internal_mutable_bs_weight_multipliers();
}

// map<string, float> bs_weight_offsets = 2;
inline int BlendShapeParameters::_internal_bs_weight_offsets_size() const {
  return _internal_bs_weight_offsets().size();
}
inline int BlendShapeParameters::bs_weight_offsets_size() const {
  return _internal_bs_weight_offsets_size();
}
inline void BlendShapeParameters::clear_bs_weight_offsets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bs_weight_offsets_.Clear();
}
inline const ::google::protobuf::Map<std::string, float>& BlendShapeParameters::_internal_bs_weight_offsets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bs_weight_offsets_.GetMap();
}
inline const ::google::protobuf::Map<std::string, float>& BlendShapeParameters::bs_weight_offsets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_offsets)
  return _internal_bs_weight_offsets();
}
inline ::google::protobuf::Map<std::string, float>* BlendShapeParameters::_internal_mutable_bs_weight_offsets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.bs_weight_offsets_.MutableMap();
}
inline ::google::protobuf::Map<std::string, float>* BlendShapeParameters::mutable_bs_weight_offsets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:nvidia_ace.a2f.v1.BlendShapeParameters.bs_weight_offsets)
  return _internal_mutable_bs_weight_offsets();
}

// -------------------------------------------------------------------

// EmotionPostProcessingParameters

// optional float emotion_contrast = 1;
inline bool EmotionPostProcessingParameters::has_emotion_contrast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EmotionPostProcessingParameters::clear_emotion_contrast() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotion_contrast_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float EmotionPostProcessingParameters::emotion_contrast() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_contrast)
  return _internal_emotion_contrast();
}
inline void EmotionPostProcessingParameters::set_emotion_contrast(float value) {
  _internal_set_emotion_contrast(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_contrast)
}
inline float EmotionPostProcessingParameters::_internal_emotion_contrast() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotion_contrast_;
}
inline void EmotionPostProcessingParameters::_internal_set_emotion_contrast(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotion_contrast_ = value;
}

// optional float live_blend_coef = 2;
inline bool EmotionPostProcessingParameters::has_live_blend_coef() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EmotionPostProcessingParameters::clear_live_blend_coef() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.live_blend_coef_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float EmotionPostProcessingParameters::live_blend_coef() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.live_blend_coef)
  return _internal_live_blend_coef();
}
inline void EmotionPostProcessingParameters::set_live_blend_coef(float value) {
  _internal_set_live_blend_coef(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.live_blend_coef)
}
inline float EmotionPostProcessingParameters::_internal_live_blend_coef() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.live_blend_coef_;
}
inline void EmotionPostProcessingParameters::_internal_set_live_blend_coef(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.live_blend_coef_ = value;
}

// optional bool enable_preferred_emotion = 3;
inline bool EmotionPostProcessingParameters::has_enable_preferred_emotion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EmotionPostProcessingParameters::clear_enable_preferred_emotion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enable_preferred_emotion_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool EmotionPostProcessingParameters::enable_preferred_emotion() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.enable_preferred_emotion)
  return _internal_enable_preferred_emotion();
}
inline void EmotionPostProcessingParameters::set_enable_preferred_emotion(bool value) {
  _internal_set_enable_preferred_emotion(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.enable_preferred_emotion)
}
inline bool EmotionPostProcessingParameters::_internal_enable_preferred_emotion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_preferred_emotion_;
}
inline void EmotionPostProcessingParameters::_internal_set_enable_preferred_emotion(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enable_preferred_emotion_ = value;
}

// optional float preferred_emotion_strength = 4;
inline bool EmotionPostProcessingParameters::has_preferred_emotion_strength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EmotionPostProcessingParameters::clear_preferred_emotion_strength() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preferred_emotion_strength_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float EmotionPostProcessingParameters::preferred_emotion_strength() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.preferred_emotion_strength)
  return _internal_preferred_emotion_strength();
}
inline void EmotionPostProcessingParameters::set_preferred_emotion_strength(float value) {
  _internal_set_preferred_emotion_strength(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.preferred_emotion_strength)
}
inline float EmotionPostProcessingParameters::_internal_preferred_emotion_strength() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preferred_emotion_strength_;
}
inline void EmotionPostProcessingParameters::_internal_set_preferred_emotion_strength(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preferred_emotion_strength_ = value;
}

// optional float emotion_strength = 5;
inline bool EmotionPostProcessingParameters::has_emotion_strength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EmotionPostProcessingParameters::clear_emotion_strength() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotion_strength_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float EmotionPostProcessingParameters::emotion_strength() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_strength)
  return _internal_emotion_strength();
}
inline void EmotionPostProcessingParameters::set_emotion_strength(float value) {
  _internal_set_emotion_strength(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.emotion_strength)
}
inline float EmotionPostProcessingParameters::_internal_emotion_strength() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotion_strength_;
}
inline void EmotionPostProcessingParameters::_internal_set_emotion_strength(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emotion_strength_ = value;
}

// optional int32 max_emotions = 6;
inline bool EmotionPostProcessingParameters::has_max_emotions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void EmotionPostProcessingParameters::clear_max_emotions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_emotions_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t EmotionPostProcessingParameters::max_emotions() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.max_emotions)
  return _internal_max_emotions();
}
inline void EmotionPostProcessingParameters::set_max_emotions(::int32_t value) {
  _internal_set_max_emotions(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.EmotionPostProcessingParameters.max_emotions)
}
inline ::int32_t EmotionPostProcessingParameters::_internal_max_emotions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_emotions_;
}
inline void EmotionPostProcessingParameters::_internal_set_max_emotions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_emotions_ = value;
}

// -------------------------------------------------------------------

// AudioWithEmotion

// bytes audio_buffer = 1;
inline void AudioWithEmotion::clear_audio_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.ClearToEmpty();
}
inline const std::string& AudioWithEmotion::audio_buffer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
  return _internal_audio_buffer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AudioWithEmotion::set_audio_buffer(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}
inline std::string* AudioWithEmotion::mutable_audio_buffer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_audio_buffer();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
  return _s;
}
inline const std::string& AudioWithEmotion::_internal_audio_buffer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audio_buffer_.Get();
}
inline void AudioWithEmotion::_internal_set_audio_buffer(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.Set(value, GetArena());
}
inline std::string* AudioWithEmotion::_internal_mutable_audio_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.audio_buffer_.Mutable( GetArena());
}
inline std::string* AudioWithEmotion::release_audio_buffer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
  return _impl_.audio_buffer_.Release();
}
inline void AudioWithEmotion::set_allocated_audio_buffer(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audio_buffer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.audio_buffer_.IsDefault()) {
          _impl_.audio_buffer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.a2f.v1.AudioWithEmotion.audio_buffer)
}

// repeated .nvidia_ace.emotion_with_timecode.v1.EmotionWithTimeCode emotions = 2;
inline int AudioWithEmotion::_internal_emotions_size() const {
  return _internal_emotions().size();
}
inline int AudioWithEmotion::emotions_size() const {
  return _internal_emotions_size();
}
inline ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* AudioWithEmotion::mutable_emotions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return _internal_mutable_emotions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>* AudioWithEmotion::mutable_emotions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_emotions();
}
inline const ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode& AudioWithEmotion::emotions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return _internal_emotions().Get(index);
}
inline ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* AudioWithEmotion::add_emotions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode* _add = _internal_mutable_emotions()->Add();
  // @@protoc_insertion_point(field_add:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>& AudioWithEmotion::emotions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nvidia_ace.a2f.v1.AudioWithEmotion.emotions)
  return _internal_emotions();
}
inline const ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>&
AudioWithEmotion::_internal_emotions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.emotions_;
}
inline ::google::protobuf::RepeatedPtrField<::nvidia_ace::emotion_with_timecode::v1::EmotionWithTimeCode>*
AudioWithEmotion::_internal_mutable_emotions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.emotions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace a2f
}  // namespace nvidia_ace


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2ea2f_2ev1_2eproto_2epb_2eh
