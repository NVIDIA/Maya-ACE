// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.controller.v1.proto
// Protobuf C++ Version: 5.26.0

#include "nvidia_ace.controller.v1.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nvidia_ace {
namespace controller {
namespace v1 {
      template <typename>
PROTOBUF_CONSTEXPR AudioStream_EndOfAudio::AudioStream_EndOfAudio(::_pbi::ConstantInitialized) {}
struct AudioStream_EndOfAudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioStream_EndOfAudioDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioStream_EndOfAudioDefaultTypeInternal() {}
  union {
    AudioStream_EndOfAudio _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioStream_EndOfAudioDefaultTypeInternal _AudioStream_EndOfAudio_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metadata_{nullptr},
        event_type_{static_cast< ::nvidia_ace::controller::v1::EventType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;

inline constexpr AnimationDataStreamHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_header_{nullptr},
        skel_animation_header_{nullptr},
        start_time_code_since_epoch_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationDataStreamHeader::AnimationDataStreamHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnimationDataStreamHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationDataStreamHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationDataStreamHeaderDefaultTypeInternal() {}
  union {
    AnimationDataStreamHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationDataStreamHeaderDefaultTypeInternal _AnimationDataStreamHeader_default_instance_;

inline constexpr AudioStreamHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        audio_header_{nullptr},
        face_params_{nullptr},
        emotion_post_processing_params_{nullptr},
        blendshape_params_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AudioStreamHeader::AudioStreamHeader(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioStreamHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioStreamHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioStreamHeaderDefaultTypeInternal() {}
  union {
    AudioStreamHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioStreamHeaderDefaultTypeInternal _AudioStreamHeader_default_instance_;

inline constexpr AudioStream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AudioStream::AudioStream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AudioStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioStreamDefaultTypeInternal() {}
  union {
    AudioStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioStreamDefaultTypeInternal _AudioStream_default_instance_;

inline constexpr AnimationDataStream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AnimationDataStream::AnimationDataStream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnimationDataStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnimationDataStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnimationDataStreamDefaultTypeInternal() {}
  union {
    AnimationDataStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnimationDataStreamDefaultTypeInternal _AnimationDataStream_default_instance_;
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace
static ::_pb::Metadata file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nvidia_5face_2econtroller_2ev1_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_nvidia_5face_2econtroller_2ev1_2eproto = nullptr;
const ::uint32_t
    TableStruct_nvidia_5face_2econtroller_2ev1_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream_EndOfAudio, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, _impl_.stream_part_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _impl_.audio_header_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _impl_.face_params_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _impl_.emotion_post_processing_params_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStreamHeader, _impl_.blendshape_params_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, _impl_.event_type_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::Event, _impl_.metadata_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _impl_.audio_header_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _impl_.skel_animation_header_),
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_),
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, _impl_.stream_part_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::nvidia_ace::controller::v1::AudioStream_EndOfAudio)},
        {8, -1, -1, sizeof(::nvidia_ace::controller::v1::AudioStream)},
        {20, 32, -1, sizeof(::nvidia_ace::controller::v1::AudioStreamHeader)},
        {36, 46, -1, sizeof(::nvidia_ace::controller::v1::Event)},
        {48, 59, -1, sizeof(::nvidia_ace::controller::v1::AnimationDataStreamHeader)},
        {62, -1, -1, sizeof(::nvidia_ace::controller::v1::AnimationDataStream)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::nvidia_ace::controller::v1::_AudioStream_EndOfAudio_default_instance_._instance,
    &::nvidia_ace::controller::v1::_AudioStream_default_instance_._instance,
    &::nvidia_ace::controller::v1::_AudioStreamHeader_default_instance_._instance,
    &::nvidia_ace::controller::v1::_Event_default_instance_._instance,
    &::nvidia_ace::controller::v1::_AnimationDataStreamHeader_default_instance_._instance,
    &::nvidia_ace::controller::v1::_AnimationDataStream_default_instance_._instance,
};
const char descriptor_table_protodef_nvidia_5face_2econtroller_2ev1_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\036nvidia_ace.controller.v1.proto\022\030nvidia"
    "_ace.controller.v1\032\027nvidia_ace.a2f.v1.pr"
    "oto\032\"nvidia_ace.animation_data.v1.proto\032"
    "\031nvidia_ace.audio.v1.proto\032\032nvidia_ace.s"
    "tatus.v1.proto\032\031google/protobuf/any.prot"
    "o\"\203\002\n\013AudioStream\022J\n\023audio_stream_header"
    "\030\001 \001(\0132+.nvidia_ace.controller.v1.AudioS"
    "treamHeaderH\000\022A\n\022audio_with_emotion\030\002 \001("
    "\0132#.nvidia_ace.a2f.v1.AudioWithEmotionH\000"
    "\022H\n\014end_of_audio\030\003 \001(\01320.nvidia_ace.cont"
    "roller.v1.AudioStream.EndOfAudioH\000\032\014\n\nEn"
    "dOfAudioB\r\n\013stream_part\"\243\002\n\021AudioStreamH"
    "eader\0226\n\014audio_header\030\001 \001(\0132 .nvidia_ace"
    ".audio.v1.AudioHeader\0226\n\013face_params\030\002 \001"
    "(\0132!.nvidia_ace.a2f.v1.FaceParameters\022Z\n"
    "\036emotion_post_processing_params\030\003 \001(\01322."
    "nvidia_ace.a2f.v1.EmotionPostProcessingP"
    "arameters\022B\n\021blendshape_params\030\004 \001(\0132\'.n"
    "vidia_ace.a2f.v1.BlendShapeParameters\"z\n"
    "\005Event\0227\n\nevent_type\030\001 \001(\0162#.nvidia_ace."
    "controller.v1.EventType\022+\n\010metadata\030\002 \001("
    "\0132\024.google.protobuf.AnyH\000\210\001\001B\013\n\t_metadat"
    "a\"\377\001\n\031AnimationDataStreamHeader\022;\n\014audio"
    "_header\030\001 \001(\0132 .nvidia_ace.audio.v1.Audi"
    "oHeaderH\000\210\001\001\022U\n\025skel_animation_header\030\002 "
    "\001(\01321.nvidia_ace.animation_data.v1.SkelA"
    "nimationHeaderH\001\210\001\001\022#\n\033start_time_code_s"
    "ince_epoch\030\003 \001(\001B\017\n\r_audio_headerB\030\n\026_sk"
    "el_animation_header\"\252\002\n\023AnimationDataStr"
    "eam\022[\n\034animation_data_stream_header\030\001 \001("
    "\01323.nvidia_ace.controller.v1.AnimationDa"
    "taStreamHeaderH\000\022E\n\016animation_data\030\002 \001(\013"
    "2+.nvidia_ace.animation_data.v1.Animatio"
    "nDataH\000\0220\n\005event\030\003 \001(\0132\037.nvidia_ace.cont"
    "roller.v1.EventH\000\022.\n\006status\030\004 \001(\0132\034.nvid"
    "ia_ace.status.v1.StatusH\000B\r\n\013stream_part"
    "*,\n\tEventType\022\037\n\033END_OF_A2F_AUDIO_PROCES"
    "SING\020\000b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_deps[5] =
    {
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_nvidia_5face_2ea2f_2ev1_2eproto,
        &::descriptor_table_nvidia_5face_2eanimation_5fdata_2ev1_2eproto,
        &::descriptor_table_nvidia_5face_2eaudio_2ev1_2eproto,
        &::descriptor_table_nvidia_5face_2estatus_2ev1_2eproto,
};
static ::absl::once_flag descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto = {
    false,
    false,
    1494,
    descriptor_table_protodef_nvidia_5face_2econtroller_2ev1_2eproto,
    "nvidia_ace.controller.v1.proto",
    &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
    descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_deps,
    5,
    6,
    schemas,
    file_default_instances,
    TableStruct_nvidia_5face_2econtroller_2ev1_2eproto::offsets,
    file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto,
    file_level_enum_descriptors_nvidia_5face_2econtroller_2ev1_2eproto,
    file_level_service_descriptors_nvidia_5face_2econtroller_2ev1_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter() {
  return &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto;
}
namespace nvidia_ace {
namespace controller {
namespace v1 {
const ::google::protobuf::EnumDescriptor* EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto);
  return file_level_enum_descriptors_nvidia_5face_2econtroller_2ev1_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EventType_internal_data_[] = {
    65536u, 0u, };
bool EventType_IsValid(int value) {
  return 0 <= value && value <= 0;
}
// ===================================================================

class AudioStream_EndOfAudio::_Internal {
 public:
};

AudioStream_EndOfAudio::AudioStream_EndOfAudio(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
}
AudioStream_EndOfAudio::AudioStream_EndOfAudio(
    ::google::protobuf::Arena* arena,
    const AudioStream_EndOfAudio& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  AudioStream_EndOfAudio* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
}









::google::protobuf::Metadata AudioStream_EndOfAudio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[0]);
}
// ===================================================================

class AudioStream::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AudioStream, _impl_._oneof_case_);
};

void AudioStream::set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (audio_stream_header) {
    ::google::protobuf::Arena* submessage_arena = audio_stream_header->GetArena();
    if (message_arena != submessage_arena) {
      audio_stream_header = ::google::protobuf::internal::GetOwnedMessage(message_arena, audio_stream_header, submessage_arena);
    }
    set_has_audio_stream_header();
    _impl_.stream_part_.audio_stream_header_ = audio_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
}
void AudioStream::set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (audio_with_emotion) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(audio_with_emotion)->GetArena();
    if (message_arena != submessage_arena) {
      audio_with_emotion = ::google::protobuf::internal::GetOwnedMessage(message_arena, audio_with_emotion, submessage_arena);
    }
    set_has_audio_with_emotion();
    _impl_.stream_part_.audio_with_emotion_ = audio_with_emotion;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
}
void AudioStream::clear_audio_with_emotion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAudioWithEmotion) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.audio_with_emotion_;
    }
    clear_has_stream_part();
  }
}
void AudioStream::set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (end_of_audio) {
    ::google::protobuf::Arena* submessage_arena = end_of_audio->GetArena();
    if (message_arena != submessage_arena) {
      end_of_audio = ::google::protobuf::internal::GetOwnedMessage(message_arena, end_of_audio, submessage_arena);
    }
    set_has_end_of_audio();
    _impl_.stream_part_.end_of_audio_ = end_of_audio;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStream.end_of_audio)
}
AudioStream::AudioStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AudioStream)
}
inline PROTOBUF_NDEBUG_INLINE AudioStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AudioStream::AudioStream(
    ::google::protobuf::Arena* arena,
    const AudioStream& from)
    : ::google::protobuf::Message(arena) {
  AudioStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (stream_part_case()) {
    case STREAM_PART_NOT_SET:
      break;
      case kAudioStreamHeader:
        _impl_.stream_part_.audio_stream_header_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::AudioStreamHeader>(arena, *from._impl_.stream_part_.audio_stream_header_);
        break;
      case kAudioWithEmotion:
        _impl_.stream_part_.audio_with_emotion_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::AudioWithEmotion>(arena, *from._impl_.stream_part_.audio_with_emotion_);
        break;
      case kEndOfAudio:
        _impl_.stream_part_.end_of_audio_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::AudioStream_EndOfAudio>(arena, *from._impl_.stream_part_.end_of_audio_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AudioStream)
}
inline PROTOBUF_NDEBUG_INLINE AudioStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AudioStream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AudioStream::~AudioStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AudioStream)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioStream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
  _impl_.~Impl_();
}

void AudioStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.controller.v1.AudioStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (stream_part_case()) {
    case kAudioStreamHeader: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.audio_stream_header_;
      }
      break;
    }
    case kAudioWithEmotion: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.audio_with_emotion_;
      }
      break;
    }
    case kEndOfAudio: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.end_of_audio_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
AudioStream::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AudioStream, _impl_._cached_size_),
              false,
          },
          &AudioStream::MergeImpl,
          &AudioStream::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AudioStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AudioStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AudioStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> AudioStream::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AudioStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::AudioStream>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
    {PROTOBUF_FIELD_OFFSET(AudioStream, _impl_.stream_part_.audio_stream_header_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
    {PROTOBUF_FIELD_OFFSET(AudioStream, _impl_.stream_part_.audio_with_emotion_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
    {PROTOBUF_FIELD_OFFSET(AudioStream, _impl_.stream_part_.end_of_audio_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::AudioStreamHeader>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::a2f::v1::AudioWithEmotion>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::nvidia_ace::controller::v1::_AudioStream_EndOfAudio_default_instance_},
  }}, {{
  }},
};

::uint8_t* AudioStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AudioStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (stream_part_case()) {
    case kAudioStreamHeader: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.stream_part_.audio_stream_header_, _impl_.stream_part_.audio_stream_header_->GetCachedSize(), target, stream);
      break;
    }
    case kAudioWithEmotion: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.stream_part_.audio_with_emotion_, _impl_.stream_part_.audio_with_emotion_->GetCachedSize(), target, stream);
      break;
    }
    case kEndOfAudio: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.stream_part_.end_of_audio_, _impl_.stream_part_.end_of_audio_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AudioStream)
  return target;
}

::size_t AudioStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AudioStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
    case kAudioStreamHeader: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.audio_stream_header_);
      break;
    }
    // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
    case kAudioWithEmotion: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.audio_with_emotion_);
      break;
    }
    // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
    case kEndOfAudio: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.end_of_audio_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AudioStream::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioStream*>(&to_msg);
  auto& from = static_cast<const AudioStream&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AudioStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_stream_part();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAudioStreamHeader: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.audio_stream_header_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::AudioStreamHeader>(arena, *from._impl_.stream_part_.audio_stream_header_);
        } else {
          _this->_impl_.stream_part_.audio_stream_header_->MergeFrom(from._internal_audio_stream_header());
        }
        break;
      }
      case kAudioWithEmotion: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.audio_with_emotion_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::AudioWithEmotion>(arena, *from._impl_.stream_part_.audio_with_emotion_);
        } else {
          _this->_impl_.stream_part_.audio_with_emotion_->MergeFrom(from._internal_audio_with_emotion());
        }
        break;
      }
      case kEndOfAudio: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.end_of_audio_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::AudioStream_EndOfAudio>(arena, *from._impl_.stream_part_.end_of_audio_);
        } else {
          _this->_impl_.stream_part_.end_of_audio_->MergeFrom(from._internal_end_of_audio());
        }
        break;
      }
      case STREAM_PART_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioStream::CopyFrom(const AudioStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AudioStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioStream::IsInitialized() const {
  return true;
}

void AudioStream::InternalSwap(AudioStream* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stream_part_, other->_impl_.stream_part_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AudioStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[1]);
}
// ===================================================================

class AudioStreamHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioStreamHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_._has_bits_);
};

void AudioStreamHeader::clear_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ != nullptr) _impl_.audio_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AudioStreamHeader::clear_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.face_params_ != nullptr) _impl_.face_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AudioStreamHeader::clear_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.emotion_post_processing_params_ != nullptr) _impl_.emotion_post_processing_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AudioStreamHeader::clear_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.blendshape_params_ != nullptr) _impl_.blendshape_params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
AudioStreamHeader::AudioStreamHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AudioStreamHeader)
}
inline PROTOBUF_NDEBUG_INLINE AudioStreamHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AudioStreamHeader::AudioStreamHeader(
    ::google::protobuf::Arena* arena,
    const AudioStreamHeader& from)
    : ::google::protobuf::Message(arena) {
  AudioStreamHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::audio::v1::AudioHeader>(
                              arena, *from._impl_.audio_header_)
                        : nullptr;
  _impl_.face_params_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::FaceParameters>(
                              arena, *from._impl_.face_params_)
                        : nullptr;
  _impl_.emotion_post_processing_params_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(
                              arena, *from._impl_.emotion_post_processing_params_)
                        : nullptr;
  _impl_.blendshape_params_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::BlendShapeParameters>(
                              arena, *from._impl_.blendshape_params_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AudioStreamHeader)
}
inline PROTOBUF_NDEBUG_INLINE AudioStreamHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AudioStreamHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_header_),
           0,
           offsetof(Impl_, blendshape_params_) -
               offsetof(Impl_, audio_header_) +
               sizeof(Impl_::blendshape_params_));
}
AudioStreamHeader::~AudioStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AudioStreamHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AudioStreamHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.audio_header_;
  delete _impl_.face_params_;
  delete _impl_.emotion_post_processing_params_;
  delete _impl_.blendshape_params_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AudioStreamHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_._cached_size_),
              false,
          },
          &AudioStreamHeader::MergeImpl,
          &AudioStreamHeader::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AudioStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AudioStreamHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.audio_header_ != nullptr);
      _impl_.audio_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.face_params_ != nullptr);
      _impl_.face_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.emotion_post_processing_params_ != nullptr);
      _impl_.emotion_post_processing_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.blendshape_params_ != nullptr);
      _impl_.blendshape_params_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AudioStreamHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> AudioStreamHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AudioStreamHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::AudioStreamHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.blendshape_params_)}},
    // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.audio_header_)}},
    // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.face_params_)}},
    // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.emotion_post_processing_params_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    {PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.audio_header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
    {PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.face_params_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
    {PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.emotion_post_processing_params_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
    {PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.blendshape_params_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::audio::v1::AudioHeader>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::a2f::v1::FaceParameters>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::a2f::v1::BlendShapeParameters>()},
  }}, {{
  }},
};

::uint8_t* AudioStreamHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AudioStreamHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.audio_header_, _impl_.audio_header_->GetCachedSize(), target, stream);
  }

  // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.face_params_, _impl_.face_params_->GetCachedSize(), target, stream);
  }

  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *_impl_.emotion_post_processing_params_, _impl_.emotion_post_processing_params_->GetCachedSize(), target, stream);
  }

  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *_impl_.blendshape_params_, _impl_.blendshape_params_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AudioStreamHeader)
  return target;
}

::size_t AudioStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AudioStreamHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.audio_header_);
    }

    // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.face_params_);
    }

    // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.emotion_post_processing_params_);
    }

    // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.blendshape_params_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AudioStreamHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AudioStreamHeader*>(&to_msg);
  auto& from = static_cast<const AudioStreamHeader&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AudioStreamHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.audio_header_ != nullptr);
      if (_this->_impl_.audio_header_ == nullptr) {
        _this->_impl_.audio_header_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::audio::v1::AudioHeader>(arena, *from._impl_.audio_header_);
      } else {
        _this->_impl_.audio_header_->MergeFrom(*from._impl_.audio_header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.face_params_ != nullptr);
      if (_this->_impl_.face_params_ == nullptr) {
        _this->_impl_.face_params_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::FaceParameters>(arena, *from._impl_.face_params_);
      } else {
        _this->_impl_.face_params_->MergeFrom(*from._impl_.face_params_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.emotion_post_processing_params_ != nullptr);
      if (_this->_impl_.emotion_post_processing_params_ == nullptr) {
        _this->_impl_.emotion_post_processing_params_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(arena, *from._impl_.emotion_post_processing_params_);
      } else {
        _this->_impl_.emotion_post_processing_params_->MergeFrom(*from._impl_.emotion_post_processing_params_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.blendshape_params_ != nullptr);
      if (_this->_impl_.blendshape_params_ == nullptr) {
        _this->_impl_.blendshape_params_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::a2f::v1::BlendShapeParameters>(arena, *from._impl_.blendshape_params_);
      } else {
        _this->_impl_.blendshape_params_->MergeFrom(*from._impl_.blendshape_params_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AudioStreamHeader::CopyFrom(const AudioStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AudioStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AudioStreamHeader::IsInitialized() const {
  return true;
}

void AudioStreamHeader::InternalSwap(AudioStreamHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.blendshape_params_)
      + sizeof(AudioStreamHeader::_impl_.blendshape_params_)
      - PROTOBUF_FIELD_OFFSET(AudioStreamHeader, _impl_.audio_header_)>(
          reinterpret_cast<char*>(&_impl_.audio_header_),
          reinterpret_cast<char*>(&other->_impl_.audio_header_));
}

::google::protobuf::Metadata AudioStreamHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[2]);
}
// ===================================================================

class Event::_Internal {
 public:
  using HasBits = decltype(std::declval<Event>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_);
};

void Event::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ != nullptr) _impl_.metadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
    : ::google::protobuf::Message(arena) {
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.metadata_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(
                              arena, *from._impl_.metadata_)
                        : nullptr;
  _impl_.event_type_ = from._impl_.event_type_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, metadata_),
           0,
           offsetof(Impl_, event_type_) -
               offsetof(Impl_, metadata_) +
               sizeof(Impl_::event_type_));
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.Event)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.metadata_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
Event::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(Event, _impl_._cached_size_),
              false,
          },
          &Event::MergeImpl,
          &Event::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.metadata_ != nullptr);
    _impl_.metadata_->Clear();
  }
  _impl_.event_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> Event::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Event, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::Event>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .google.protobuf.Any metadata = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.metadata_)}},
    // .nvidia_ace.controller.v1.EventType event_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Event, _impl_.event_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Event, _impl_.event_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.controller.v1.EventType event_type = 1;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional .google.protobuf.Any metadata = 2;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.metadata_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Any>()},
  }}, {{
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .nvidia_ace.controller.v1.EventType event_type = 1;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_event_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .google.protobuf.Any metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.metadata_, _impl_.metadata_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .google.protobuf.Any metadata = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.metadata_);
  }

  // .nvidia_ace.controller.v1.EventType event_type = 1;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void Event::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.metadata_ != nullptr);
    if (_this->_impl_.metadata_ == nullptr) {
      _this->_impl_.metadata_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Any>(arena, *from._impl_.metadata_);
    } else {
      _this->_impl_.metadata_->MergeFrom(*from._impl_.metadata_);
    }
  }
  if (from._internal_event_type() != 0) {
    _this->_impl_.event_type_ = from._impl_.event_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.event_type_)
      + sizeof(Event::_impl_.event_type_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[3]);
}
// ===================================================================

class AnimationDataStreamHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationDataStreamHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_._has_bits_);
};

void AnimationDataStreamHeader::clear_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ != nullptr) _impl_.audio_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AnimationDataStreamHeader::clear_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.skel_animation_header_ != nullptr) _impl_.skel_animation_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AnimationDataStreamHeader::AnimationDataStreamHeader(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AnimationDataStreamHeader)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStreamHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AnimationDataStreamHeader::AnimationDataStreamHeader(
    ::google::protobuf::Arena* arena,
    const AnimationDataStreamHeader& from)
    : ::google::protobuf::Message(arena) {
  AnimationDataStreamHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.audio_header_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::audio::v1::AudioHeader>(
                              arena, *from._impl_.audio_header_)
                        : nullptr;
  _impl_.skel_animation_header_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(
                              arena, *from._impl_.skel_animation_header_)
                        : nullptr;
  _impl_.start_time_code_since_epoch_ = from._impl_.start_time_code_since_epoch_;

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AnimationDataStreamHeader)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStreamHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AnimationDataStreamHeader::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, audio_header_),
           0,
           offsetof(Impl_, start_time_code_since_epoch_) -
               offsetof(Impl_, audio_header_) +
               sizeof(Impl_::start_time_code_since_epoch_));
}
AnimationDataStreamHeader::~AnimationDataStreamHeader() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnimationDataStreamHeader::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.audio_header_;
  delete _impl_.skel_animation_header_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
AnimationDataStreamHeader::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_._cached_size_),
              false,
          },
          &AnimationDataStreamHeader::MergeImpl,
          &AnimationDataStreamHeader::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AnimationDataStreamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.audio_header_ != nullptr);
      _impl_.audio_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.skel_animation_header_ != nullptr);
      _impl_.skel_animation_header_->Clear();
    }
  }
  _impl_.start_time_code_since_epoch_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnimationDataStreamHeader::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> AnimationDataStreamHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnimationDataStreamHeader_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::AnimationDataStreamHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.audio_header_)}},
    // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.skel_animation_header_)}},
    // double start_time_code_since_epoch = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.audio_header_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.skel_animation_header_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double start_time_code_since_epoch = 3;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::audio::v1::AudioHeader>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::SkelAnimationHeader>()},
  }}, {{
  }},
};

::uint8_t* AnimationDataStreamHeader::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.audio_header_, _impl_.audio_header_->GetCachedSize(), target, stream);
  }

  // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *_impl_.skel_animation_header_, _impl_.skel_animation_header_->GetCachedSize(), target, stream);
  }

  // double start_time_code_since_epoch = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time_code_since_epoch = this->_internal_start_time_code_since_epoch();
  ::uint64_t raw_start_time_code_since_epoch;
  memcpy(&raw_start_time_code_since_epoch, &tmp_start_time_code_since_epoch, sizeof(tmp_start_time_code_since_epoch));
  if (raw_start_time_code_since_epoch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_start_time_code_since_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  return target;
}

::size_t AnimationDataStreamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.audio_header_);
    }

    // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.skel_animation_header_);
    }

  }
  // double start_time_code_since_epoch = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time_code_since_epoch = this->_internal_start_time_code_since_epoch();
  ::uint64_t raw_start_time_code_since_epoch;
  memcpy(&raw_start_time_code_since_epoch, &tmp_start_time_code_since_epoch, sizeof(tmp_start_time_code_since_epoch));
  if (raw_start_time_code_since_epoch != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AnimationDataStreamHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationDataStreamHeader*>(&to_msg);
  auto& from = static_cast<const AnimationDataStreamHeader&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.audio_header_ != nullptr);
      if (_this->_impl_.audio_header_ == nullptr) {
        _this->_impl_.audio_header_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::audio::v1::AudioHeader>(arena, *from._impl_.audio_header_);
      } else {
        _this->_impl_.audio_header_->MergeFrom(*from._impl_.audio_header_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.skel_animation_header_ != nullptr);
      if (_this->_impl_.skel_animation_header_ == nullptr) {
        _this->_impl_.skel_animation_header_ =
            ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(arena, *from._impl_.skel_animation_header_);
      } else {
        _this->_impl_.skel_animation_header_->MergeFrom(*from._impl_.skel_animation_header_);
      }
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_start_time_code_since_epoch = from._internal_start_time_code_since_epoch();
  ::uint64_t raw_start_time_code_since_epoch;
  memcpy(&raw_start_time_code_since_epoch, &tmp_start_time_code_since_epoch, sizeof(tmp_start_time_code_since_epoch));
  if (raw_start_time_code_since_epoch != 0) {
    _this->_impl_.start_time_code_since_epoch_ = from._impl_.start_time_code_since_epoch_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationDataStreamHeader::CopyFrom(const AnimationDataStreamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AnimationDataStreamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnimationDataStreamHeader::IsInitialized() const {
  return true;
}

void AnimationDataStreamHeader::InternalSwap(AnimationDataStreamHeader* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.start_time_code_since_epoch_)
      + sizeof(AnimationDataStreamHeader::_impl_.start_time_code_since_epoch_)
      - PROTOBUF_FIELD_OFFSET(AnimationDataStreamHeader, _impl_.audio_header_)>(
          reinterpret_cast<char*>(&_impl_.audio_header_),
          reinterpret_cast<char*>(&other->_impl_.audio_header_));
}

::google::protobuf::Metadata AnimationDataStreamHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[4]);
}
// ===================================================================

class AnimationDataStream::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::nvidia_ace::controller::v1::AnimationDataStream, _impl_._oneof_case_);
};

void AnimationDataStream::set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data_stream_header) {
    ::google::protobuf::Arena* submessage_arena = animation_data_stream_header->GetArena();
    if (message_arena != submessage_arena) {
      animation_data_stream_header = ::google::protobuf::internal::GetOwnedMessage(message_arena, animation_data_stream_header, submessage_arena);
    }
    set_has_animation_data_stream_header();
    _impl_.stream_part_.animation_data_stream_header_ = animation_data_stream_header;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
}
void AnimationDataStream::set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* animation_data) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (animation_data) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(animation_data)->GetArena();
    if (message_arena != submessage_arena) {
      animation_data = ::google::protobuf::internal::GetOwnedMessage(message_arena, animation_data, submessage_arena);
    }
    set_has_animation_data();
    _impl_.stream_part_.animation_data_ = animation_data;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
}
void AnimationDataStream::clear_animation_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAnimationData) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.animation_data_;
    }
    clear_has_stream_part();
  }
}
void AnimationDataStream::set_allocated_event(::nvidia_ace::controller::v1::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = event->GetArena();
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.stream_part_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.event)
}
void AnimationDataStream::set_allocated_status(::nvidia_ace::status::v1::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_stream_part();
  if (status) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(message_arena, status, submessage_arena);
    }
    set_has_status();
    _impl_.stream_part_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.status)
}
void AnimationDataStream::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.status_;
    }
    clear_has_stream_part();
  }
}
AnimationDataStream::AnimationDataStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nvidia_ace.controller.v1.AnimationDataStream)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AnimationDataStream::AnimationDataStream(
    ::google::protobuf::Arena* arena,
    const AnimationDataStream& from)
    : ::google::protobuf::Message(arena) {
  AnimationDataStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (stream_part_case()) {
    case STREAM_PART_NOT_SET:
      break;
      case kAnimationDataStreamHeader:
        _impl_.stream_part_.animation_data_stream_header_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::AnimationDataStreamHeader>(arena, *from._impl_.stream_part_.animation_data_stream_header_);
        break;
      case kAnimationData:
        _impl_.stream_part_.animation_data_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AnimationData>(arena, *from._impl_.stream_part_.animation_data_);
        break;
      case kEvent:
        _impl_.stream_part_.event_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::Event>(arena, *from._impl_.stream_part_.event_);
        break;
      case kStatus:
        _impl_.stream_part_.status_ = ::google::protobuf::Message::CopyConstruct<::nvidia_ace::status::v1::Status>(arena, *from._impl_.stream_part_.status_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:nvidia_ace.controller.v1.AnimationDataStream)
}
inline PROTOBUF_NDEBUG_INLINE AnimationDataStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : stream_part_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AnimationDataStream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AnimationDataStream::~AnimationDataStream() {
  // @@protoc_insertion_point(destructor:nvidia_ace.controller.v1.AnimationDataStream)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnimationDataStream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_stream_part()) {
    clear_stream_part();
  }
  _impl_.~Impl_();
}

void AnimationDataStream::clear_stream_part() {
// @@protoc_insertion_point(one_of_clear_start:nvidia_ace.controller.v1.AnimationDataStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (stream_part_case()) {
    case kAnimationDataStreamHeader: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.animation_data_stream_header_;
      }
      break;
    }
    case kAnimationData: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.animation_data_;
      }
      break;
    }
    case kEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.event_;
      }
      break;
    }
    case kStatus: {
      if (GetArena() == nullptr) {
        delete _impl_.stream_part_.status_;
      }
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}


const ::google::protobuf::MessageLite::ClassData*
AnimationDataStream::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_._cached_size_),
              false,
          },
          &AnimationDataStream::MergeImpl,
          &AnimationDataStream::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void AnimationDataStream::Clear() {
// @@protoc_insertion_point(message_clear_start:nvidia_ace.controller.v1.AnimationDataStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_stream_part();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnimationDataStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 4, 4, 0, 2> AnimationDataStream::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnimationDataStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::AnimationDataStream>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.animation_data_stream_header_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.animation_data_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.controller.v1.Event event = 3;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.event_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nvidia_ace.status.v1.Status status = 4;
    {PROTOBUF_FIELD_OFFSET(AnimationDataStream, _impl_.stream_part_.status_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::AnimationDataStreamHeader>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::animation_data::v1::AnimationData>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::controller::v1::Event>()},
    {::_pbi::TcParser::GetTable<::nvidia_ace::status::v1::Status>()},
  }}, {{
  }},
};

::uint8_t* AnimationDataStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nvidia_ace.controller.v1.AnimationDataStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (stream_part_case()) {
    case kAnimationDataStreamHeader: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, *_impl_.stream_part_.animation_data_stream_header_, _impl_.stream_part_.animation_data_stream_header_->GetCachedSize(), target, stream);
      break;
    }
    case kAnimationData: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, *_impl_.stream_part_.animation_data_, _impl_.stream_part_.animation_data_->GetCachedSize(), target, stream);
      break;
    }
    case kEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *_impl_.stream_part_.event_, _impl_.stream_part_.event_->GetCachedSize(), target, stream);
      break;
    }
    case kStatus: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *_impl_.stream_part_.status_, _impl_.stream_part_.status_->GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nvidia_ace.controller.v1.AnimationDataStream)
  return target;
}

::size_t AnimationDataStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nvidia_ace.controller.v1.AnimationDataStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (stream_part_case()) {
    // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
    case kAnimationDataStreamHeader: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.animation_data_stream_header_);
      break;
    }
    // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
    case kAnimationData: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.animation_data_);
      break;
    }
    // .nvidia_ace.controller.v1.Event event = 3;
    case kEvent: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.event_);
      break;
    }
    // .nvidia_ace.status.v1.Status status = 4;
    case kStatus: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stream_part_.status_);
      break;
    }
    case STREAM_PART_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void AnimationDataStream::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AnimationDataStream*>(&to_msg);
  auto& from = static_cast<const AnimationDataStream&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nvidia_ace.controller.v1.AnimationDataStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_stream_part();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAnimationDataStreamHeader: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.animation_data_stream_header_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::AnimationDataStreamHeader>(arena, *from._impl_.stream_part_.animation_data_stream_header_);
        } else {
          _this->_impl_.stream_part_.animation_data_stream_header_->MergeFrom(from._internal_animation_data_stream_header());
        }
        break;
      }
      case kAnimationData: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.animation_data_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::animation_data::v1::AnimationData>(arena, *from._impl_.stream_part_.animation_data_);
        } else {
          _this->_impl_.stream_part_.animation_data_->MergeFrom(from._internal_animation_data());
        }
        break;
      }
      case kEvent: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.event_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::controller::v1::Event>(arena, *from._impl_.stream_part_.event_);
        } else {
          _this->_impl_.stream_part_.event_->MergeFrom(from._internal_event());
        }
        break;
      }
      case kStatus: {
        if (oneof_needs_init) {
          _this->_impl_.stream_part_.status_ =
              ::google::protobuf::Message::CopyConstruct<::nvidia_ace::status::v1::Status>(arena, *from._impl_.stream_part_.status_);
        } else {
          _this->_impl_.stream_part_.status_->MergeFrom(from._internal_status());
        }
        break;
      }
      case STREAM_PART_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnimationDataStream::CopyFrom(const AnimationDataStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nvidia_ace.controller.v1.AnimationDataStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnimationDataStream::IsInitialized() const {
  return true;
}

void AnimationDataStream::InternalSwap(AnimationDataStream* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stream_part_, other->_impl_.stream_part_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AnimationDataStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_getter,
                                   &descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto_once,
                                   file_level_metadata_nvidia_5face_2econtroller_2ev1_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
