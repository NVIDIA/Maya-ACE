// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvidia_ace.controller.v1.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2econtroller_2ev1_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2econtroller_2ev1_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "nvidia_ace.a2f.v1.pb.h"
#include "nvidia_ace.animation_data.v1.pb.h"
#include "nvidia_ace.audio.v1.pb.h"
#include "nvidia_ace.status.v1.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nvidia_5face_2econtroller_2ev1_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nvidia_5face_2econtroller_2ev1_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nvidia_5face_2econtroller_2ev1_2eproto;
namespace nvidia_ace {
namespace controller {
namespace v1 {
class AnimationDataStream;
struct AnimationDataStreamDefaultTypeInternal;
extern AnimationDataStreamDefaultTypeInternal _AnimationDataStream_default_instance_;
class AnimationDataStreamHeader;
struct AnimationDataStreamHeaderDefaultTypeInternal;
extern AnimationDataStreamHeaderDefaultTypeInternal _AnimationDataStreamHeader_default_instance_;
class AudioStream;
struct AudioStreamDefaultTypeInternal;
extern AudioStreamDefaultTypeInternal _AudioStream_default_instance_;
class AudioStreamHeader;
struct AudioStreamHeaderDefaultTypeInternal;
extern AudioStreamHeaderDefaultTypeInternal _AudioStreamHeader_default_instance_;
class AudioStream_EndOfAudio;
struct AudioStream_EndOfAudioDefaultTypeInternal;
extern AudioStream_EndOfAudioDefaultTypeInternal _AudioStream_EndOfAudio_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nvidia_ace {
namespace controller {
namespace v1 {
enum EventType : int {
  END_OF_A2F_AUDIO_PROCESSING = 0,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EventType_IsValid(int value);
extern const uint32_t EventType_internal_data_[];
constexpr EventType EventType_MIN = static_cast<EventType>(0);
constexpr EventType EventType_MAX = static_cast<EventType>(0);
constexpr int EventType_ARRAYSIZE = 0 + 1;
const ::google::protobuf::EnumDescriptor*
EventType_descriptor();
template <typename T>
const std::string& EventType_Name(T value) {
  static_assert(std::is_same<T, EventType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EventType_Name().");
  return EventType_Name(static_cast<EventType>(value));
}
template <>
inline const std::string& EventType_Name(EventType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EventType_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool EventType_Parse(absl::string_view name, EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventType>(
      EventType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class AudioStream_EndOfAudio final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AudioStream.EndOfAudio) */ {
 public:
  inline AudioStream_EndOfAudio() : AudioStream_EndOfAudio(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioStream_EndOfAudio(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioStream_EndOfAudio(const AudioStream_EndOfAudio& from) : AudioStream_EndOfAudio(nullptr, from) {}
  inline AudioStream_EndOfAudio(AudioStream_EndOfAudio&& from) noexcept
      : AudioStream_EndOfAudio(nullptr, std::move(from)) {}
  inline AudioStream_EndOfAudio& operator=(const AudioStream_EndOfAudio& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStream_EndOfAudio& operator=(AudioStream_EndOfAudio&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioStream_EndOfAudio& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioStream_EndOfAudio* internal_default_instance() {
    return reinterpret_cast<const AudioStream_EndOfAudio*>(
        &_AudioStream_EndOfAudio_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AudioStream_EndOfAudio& a, AudioStream_EndOfAudio& b) { a.Swap(&b); }
  inline void Swap(AudioStream_EndOfAudio* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStream_EndOfAudio* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioStream_EndOfAudio* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<AudioStream_EndOfAudio>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AudioStream_EndOfAudio& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AudioStream_EndOfAudio& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.controller.v1.AudioStream.EndOfAudio"; }

 protected:
  explicit AudioStream_EndOfAudio(::google::protobuf::Arena* arena);
  AudioStream_EndOfAudio(::google::protobuf::Arena* arena, const AudioStream_EndOfAudio& from);
  AudioStream_EndOfAudio(::google::protobuf::Arena* arena, AudioStream_EndOfAudio&& from) noexcept
      : AudioStream_EndOfAudio(arena) {
    *this = ::std::move(from);
  }

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AudioStream.EndOfAudio)
 private:
  class _Internal;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_nvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class Event final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Event(
      ::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from) : Event(nullptr, from) {}
  inline Event(Event&& from) noexcept
      : Event(nullptr, std::move(from)) {}
  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
        &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Event& a, Event& b) { a.Swap(&b); }
  inline void Swap(Event* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Event& from) { Event::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Event* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.controller.v1.Event"; }

 protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  Event(::google::protobuf::Arena* arena, Event&& from) noexcept
      : Event(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMetadataFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // optional .google.protobuf.Any metadata = 2;
  bool has_metadata() const;
  void clear_metadata() ;
  const ::google::protobuf::Any& metadata() const;
  PROTOBUF_NODISCARD ::google::protobuf::Any* release_metadata();
  ::google::protobuf::Any* mutable_metadata();
  void set_allocated_metadata(::google::protobuf::Any* value);
  void unsafe_arena_set_allocated_metadata(::google::protobuf::Any* value);
  ::google::protobuf::Any* unsafe_arena_release_metadata();

  private:
  const ::google::protobuf::Any& _internal_metadata() const;
  ::google::protobuf::Any* _internal_mutable_metadata();

  public:
  // .nvidia_ace.controller.v1.EventType event_type = 1;
  void clear_event_type() ;
  ::nvidia_ace::controller::v1::EventType event_type() const;
  void set_event_type(::nvidia_ace::controller::v1::EventType value);

  private:
  ::nvidia_ace::controller::v1::EventType _internal_event_type() const;
  void _internal_set_event_type(::nvidia_ace::controller::v1::EventType value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.Event)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Any* metadata_;
    int event_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStreamHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AnimationDataStreamHeader) */ {
 public:
  inline AnimationDataStreamHeader() : AnimationDataStreamHeader(nullptr) {}
  ~AnimationDataStreamHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationDataStreamHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationDataStreamHeader(const AnimationDataStreamHeader& from) : AnimationDataStreamHeader(nullptr, from) {}
  inline AnimationDataStreamHeader(AnimationDataStreamHeader&& from) noexcept
      : AnimationDataStreamHeader(nullptr, std::move(from)) {}
  inline AnimationDataStreamHeader& operator=(const AnimationDataStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStreamHeader& operator=(AnimationDataStreamHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationDataStreamHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnimationDataStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStreamHeader*>(
        &_AnimationDataStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AnimationDataStreamHeader& a, AnimationDataStreamHeader& b) { a.Swap(&b); }
  inline void Swap(AnimationDataStreamHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStreamHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationDataStreamHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationDataStreamHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationDataStreamHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationDataStreamHeader& from) { AnimationDataStreamHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationDataStreamHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.controller.v1.AnimationDataStreamHeader"; }

 protected:
  explicit AnimationDataStreamHeader(::google::protobuf::Arena* arena);
  AnimationDataStreamHeader(::google::protobuf::Arena* arena, const AnimationDataStreamHeader& from);
  AnimationDataStreamHeader(::google::protobuf::Arena* arena, AnimationDataStreamHeader&& from) noexcept
      : AnimationDataStreamHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioHeaderFieldNumber = 1,
    kSkelAnimationHeaderFieldNumber = 2,
    kStartTimeCodeSinceEpochFieldNumber = 3,
  };
  // optional .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  bool has_audio_header() const;
  void clear_audio_header() ;
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  void unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();

  public:
  // optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
  bool has_skel_animation_header() const;
  void clear_skel_animation_header() ;
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& skel_animation_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::SkelAnimationHeader* release_skel_animation_header();
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* mutable_skel_animation_header();
  void set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value);
  void unsafe_arena_set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value);
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* unsafe_arena_release_skel_animation_header();

  private:
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& _internal_skel_animation_header() const;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* _internal_mutable_skel_animation_header();

  public:
  // double start_time_code_since_epoch = 3;
  void clear_start_time_code_since_epoch() ;
  double start_time_code_since_epoch() const;
  void set_start_time_code_since_epoch(double value);

  private:
  double _internal_start_time_code_since_epoch() const;
  void _internal_set_start_time_code_since_epoch(double value);

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AnimationDataStreamHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
    ::nvidia_ace::animation_data::v1::SkelAnimationHeader* skel_animation_header_;
    double start_time_code_since_epoch_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStreamHeader final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AudioStreamHeader) */ {
 public:
  inline AudioStreamHeader() : AudioStreamHeader(nullptr) {}
  ~AudioStreamHeader() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioStreamHeader(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioStreamHeader(const AudioStreamHeader& from) : AudioStreamHeader(nullptr, from) {}
  inline AudioStreamHeader(AudioStreamHeader&& from) noexcept
      : AudioStreamHeader(nullptr, std::move(from)) {}
  inline AudioStreamHeader& operator=(const AudioStreamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStreamHeader& operator=(AudioStreamHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioStreamHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioStreamHeader* internal_default_instance() {
    return reinterpret_cast<const AudioStreamHeader*>(
        &_AudioStreamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AudioStreamHeader& a, AudioStreamHeader& b) { a.Swap(&b); }
  inline void Swap(AudioStreamHeader* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStreamHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioStreamHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AudioStreamHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioStreamHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioStreamHeader& from) { AudioStreamHeader::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioStreamHeader* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.controller.v1.AudioStreamHeader"; }

 protected:
  explicit AudioStreamHeader(::google::protobuf::Arena* arena);
  AudioStreamHeader(::google::protobuf::Arena* arena, const AudioStreamHeader& from);
  AudioStreamHeader(::google::protobuf::Arena* arena, AudioStreamHeader&& from) noexcept
      : AudioStreamHeader(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAudioHeaderFieldNumber = 1,
    kFaceParamsFieldNumber = 2,
    kEmotionPostProcessingParamsFieldNumber = 3,
    kBlendshapeParamsFieldNumber = 4,
  };
  // .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
  bool has_audio_header() const;
  void clear_audio_header() ;
  const ::nvidia_ace::audio::v1::AudioHeader& audio_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::audio::v1::AudioHeader* release_audio_header();
  ::nvidia_ace::audio::v1::AudioHeader* mutable_audio_header();
  void set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  void unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value);
  ::nvidia_ace::audio::v1::AudioHeader* unsafe_arena_release_audio_header();

  private:
  const ::nvidia_ace::audio::v1::AudioHeader& _internal_audio_header() const;
  ::nvidia_ace::audio::v1::AudioHeader* _internal_mutable_audio_header();

  public:
  // .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
  bool has_face_params() const;
  void clear_face_params() ;
  const ::nvidia_ace::a2f::v1::FaceParameters& face_params() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::FaceParameters* release_face_params();
  ::nvidia_ace::a2f::v1::FaceParameters* mutable_face_params();
  void set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value);
  void unsafe_arena_set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value);
  ::nvidia_ace::a2f::v1::FaceParameters* unsafe_arena_release_face_params();

  private:
  const ::nvidia_ace::a2f::v1::FaceParameters& _internal_face_params() const;
  ::nvidia_ace::a2f::v1::FaceParameters* _internal_mutable_face_params();

  public:
  // .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
  bool has_emotion_post_processing_params() const;
  void clear_emotion_post_processing_params() ;
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& emotion_post_processing_params() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* release_emotion_post_processing_params();
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* mutable_emotion_post_processing_params();
  void set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value);
  void unsafe_arena_set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value);
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* unsafe_arena_release_emotion_post_processing_params();

  private:
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& _internal_emotion_post_processing_params() const;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* _internal_mutable_emotion_post_processing_params();

  public:
  // .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
  bool has_blendshape_params() const;
  void clear_blendshape_params() ;
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& blendshape_params() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::BlendShapeParameters* release_blendshape_params();
  ::nvidia_ace::a2f::v1::BlendShapeParameters* mutable_blendshape_params();
  void set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value);
  void unsafe_arena_set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value);
  ::nvidia_ace::a2f::v1::BlendShapeParameters* unsafe_arena_release_blendshape_params();

  private:
  const ::nvidia_ace::a2f::v1::BlendShapeParameters& _internal_blendshape_params() const;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* _internal_mutable_blendshape_params();

  public:
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AudioStreamHeader)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::nvidia_ace::audio::v1::AudioHeader* audio_header_;
    ::nvidia_ace::a2f::v1::FaceParameters* face_params_;
    ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* emotion_post_processing_params_;
    ::nvidia_ace::a2f::v1::BlendShapeParameters* blendshape_params_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AudioStream final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AudioStream) */ {
 public:
  inline AudioStream() : AudioStream(nullptr) {}
  ~AudioStream() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AudioStream(
      ::google::protobuf::internal::ConstantInitialized);

  inline AudioStream(const AudioStream& from) : AudioStream(nullptr, from) {}
  inline AudioStream(AudioStream&& from) noexcept
      : AudioStream(nullptr, std::move(from)) {}
  inline AudioStream& operator=(const AudioStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioStream& operator=(AudioStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioStream& default_instance() {
    return *internal_default_instance();
  }
  enum StreamPartCase {
    kAudioStreamHeader = 1,
    kAudioWithEmotion = 2,
    kEndOfAudio = 3,
    STREAM_PART_NOT_SET = 0,
  };
  static inline const AudioStream* internal_default_instance() {
    return reinterpret_cast<const AudioStream*>(
        &_AudioStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AudioStream& a, AudioStream& b) { a.Swap(&b); }
  inline void Swap(AudioStream* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioStream* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AudioStream>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AudioStream& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AudioStream& from) { AudioStream::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AudioStream* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.controller.v1.AudioStream"; }

 protected:
  explicit AudioStream(::google::protobuf::Arena* arena);
  AudioStream(::google::protobuf::Arena* arena, const AudioStream& from);
  AudioStream(::google::protobuf::Arena* arena, AudioStream&& from) noexcept
      : AudioStream(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using EndOfAudio = AudioStream_EndOfAudio;

  // accessors -------------------------------------------------------
  enum : int {
    kAudioStreamHeaderFieldNumber = 1,
    kAudioWithEmotionFieldNumber = 2,
    kEndOfAudioFieldNumber = 3,
  };
  // .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
  bool has_audio_stream_header() const;
  private:
  bool _internal_has_audio_stream_header() const;

  public:
  void clear_audio_stream_header() ;
  const ::nvidia_ace::controller::v1::AudioStreamHeader& audio_stream_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::controller::v1::AudioStreamHeader* release_audio_stream_header();
  ::nvidia_ace::controller::v1::AudioStreamHeader* mutable_audio_stream_header();
  void set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* value);
  void unsafe_arena_set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* value);
  ::nvidia_ace::controller::v1::AudioStreamHeader* unsafe_arena_release_audio_stream_header();

  private:
  const ::nvidia_ace::controller::v1::AudioStreamHeader& _internal_audio_stream_header() const;
  ::nvidia_ace::controller::v1::AudioStreamHeader* _internal_mutable_audio_stream_header();

  public:
  // .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
  bool has_audio_with_emotion() const;
  private:
  bool _internal_has_audio_with_emotion() const;

  public:
  void clear_audio_with_emotion() ;
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& audio_with_emotion() const;
  PROTOBUF_NODISCARD ::nvidia_ace::a2f::v1::AudioWithEmotion* release_audio_with_emotion();
  ::nvidia_ace::a2f::v1::AudioWithEmotion* mutable_audio_with_emotion();
  void set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* value);
  void unsafe_arena_set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* value);
  ::nvidia_ace::a2f::v1::AudioWithEmotion* unsafe_arena_release_audio_with_emotion();

  private:
  const ::nvidia_ace::a2f::v1::AudioWithEmotion& _internal_audio_with_emotion() const;
  ::nvidia_ace::a2f::v1::AudioWithEmotion* _internal_mutable_audio_with_emotion();

  public:
  // .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
  bool has_end_of_audio() const;
  private:
  bool _internal_has_end_of_audio() const;

  public:
  void clear_end_of_audio() ;
  const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& end_of_audio() const;
  PROTOBUF_NODISCARD ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* release_end_of_audio();
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* mutable_end_of_audio();
  void set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* value);
  void unsafe_arena_set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* value);
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* unsafe_arena_release_end_of_audio();

  private:
  const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& _internal_end_of_audio() const;
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* _internal_mutable_end_of_audio();

  public:
  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AudioStream)
 private:
  class _Internal;
  void set_has_audio_stream_header();
  void set_has_audio_with_emotion();
  void set_has_end_of_audio();
  inline bool has_stream_part() const;
  inline void clear_has_stream_part();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union StreamPartUnion {
      constexpr StreamPartUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::nvidia_ace::controller::v1::AudioStreamHeader* audio_stream_header_;
      ::nvidia_ace::a2f::v1::AudioWithEmotion* audio_with_emotion_;
      ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* end_of_audio_;
    } stream_part_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2econtroller_2ev1_2eproto;
};
// -------------------------------------------------------------------

class AnimationDataStream final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nvidia_ace.controller.v1.AnimationDataStream) */ {
 public:
  inline AnimationDataStream() : AnimationDataStream(nullptr) {}
  ~AnimationDataStream() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AnimationDataStream(
      ::google::protobuf::internal::ConstantInitialized);

  inline AnimationDataStream(const AnimationDataStream& from) : AnimationDataStream(nullptr, from) {}
  inline AnimationDataStream(AnimationDataStream&& from) noexcept
      : AnimationDataStream(nullptr, std::move(from)) {}
  inline AnimationDataStream& operator=(const AnimationDataStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationDataStream& operator=(AnimationDataStream&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationDataStream& default_instance() {
    return *internal_default_instance();
  }
  enum StreamPartCase {
    kAnimationDataStreamHeader = 1,
    kAnimationData = 2,
    kEvent = 3,
    kStatus = 4,
    STREAM_PART_NOT_SET = 0,
  };
  static inline const AnimationDataStream* internal_default_instance() {
    return reinterpret_cast<const AnimationDataStream*>(
        &_AnimationDataStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AnimationDataStream& a, AnimationDataStream& b) { a.Swap(&b); }
  inline void Swap(AnimationDataStream* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationDataStream* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationDataStream* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AnimationDataStream>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnimationDataStream& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AnimationDataStream& from) { AnimationDataStream::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnimationDataStream* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "nvidia_ace.controller.v1.AnimationDataStream"; }

 protected:
  explicit AnimationDataStream(::google::protobuf::Arena* arena);
  AnimationDataStream(::google::protobuf::Arena* arena, const AnimationDataStream& from);
  AnimationDataStream(::google::protobuf::Arena* arena, AnimationDataStream&& from) noexcept
      : AnimationDataStream(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAnimationDataStreamHeaderFieldNumber = 1,
    kAnimationDataFieldNumber = 2,
    kEventFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
  bool has_animation_data_stream_header() const;
  private:
  bool _internal_has_animation_data_stream_header() const;

  public:
  void clear_animation_data_stream_header() ;
  const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& animation_data_stream_header() const;
  PROTOBUF_NODISCARD ::nvidia_ace::controller::v1::AnimationDataStreamHeader* release_animation_data_stream_header();
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* mutable_animation_data_stream_header();
  void set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* value);
  void unsafe_arena_set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* value);
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* unsafe_arena_release_animation_data_stream_header();

  private:
  const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& _internal_animation_data_stream_header() const;
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* _internal_mutable_animation_data_stream_header();

  public:
  // .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
  bool has_animation_data() const;
  private:
  bool _internal_has_animation_data() const;

  public:
  void clear_animation_data() ;
  const ::nvidia_ace::animation_data::v1::AnimationData& animation_data() const;
  PROTOBUF_NODISCARD ::nvidia_ace::animation_data::v1::AnimationData* release_animation_data();
  ::nvidia_ace::animation_data::v1::AnimationData* mutable_animation_data();
  void set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* value);
  void unsafe_arena_set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* value);
  ::nvidia_ace::animation_data::v1::AnimationData* unsafe_arena_release_animation_data();

  private:
  const ::nvidia_ace::animation_data::v1::AnimationData& _internal_animation_data() const;
  ::nvidia_ace::animation_data::v1::AnimationData* _internal_mutable_animation_data();

  public:
  // .nvidia_ace.controller.v1.Event event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;

  public:
  void clear_event() ;
  const ::nvidia_ace::controller::v1::Event& event() const;
  PROTOBUF_NODISCARD ::nvidia_ace::controller::v1::Event* release_event();
  ::nvidia_ace::controller::v1::Event* mutable_event();
  void set_allocated_event(::nvidia_ace::controller::v1::Event* value);
  void unsafe_arena_set_allocated_event(::nvidia_ace::controller::v1::Event* value);
  ::nvidia_ace::controller::v1::Event* unsafe_arena_release_event();

  private:
  const ::nvidia_ace::controller::v1::Event& _internal_event() const;
  ::nvidia_ace::controller::v1::Event* _internal_mutable_event();

  public:
  // .nvidia_ace.status.v1.Status status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;

  public:
  void clear_status() ;
  const ::nvidia_ace::status::v1::Status& status() const;
  PROTOBUF_NODISCARD ::nvidia_ace::status::v1::Status* release_status();
  ::nvidia_ace::status::v1::Status* mutable_status();
  void set_allocated_status(::nvidia_ace::status::v1::Status* value);
  void unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* value);
  ::nvidia_ace::status::v1::Status* unsafe_arena_release_status();

  private:
  const ::nvidia_ace::status::v1::Status& _internal_status() const;
  ::nvidia_ace::status::v1::Status* _internal_mutable_status();

  public:
  void clear_stream_part();
  StreamPartCase stream_part_case() const;
  // @@protoc_insertion_point(class_scope:nvidia_ace.controller.v1.AnimationDataStream)
 private:
  class _Internal;
  void set_has_animation_data_stream_header();
  void set_has_animation_data();
  void set_has_event();
  void set_has_status();
  inline bool has_stream_part() const;
  inline void clear_has_stream_part();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 4, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    union StreamPartUnion {
      constexpr StreamPartUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::nvidia_ace::controller::v1::AnimationDataStreamHeader* animation_data_stream_header_;
      ::nvidia_ace::animation_data::v1::AnimationData* animation_data_;
      ::nvidia_ace::controller::v1::Event* event_;
      ::nvidia_ace::status::v1::Status* status_;
    } stream_part_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nvidia_5face_2econtroller_2ev1_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AudioStream_EndOfAudio

// -------------------------------------------------------------------

// AudioStream

// .nvidia_ace.controller.v1.AudioStreamHeader audio_stream_header = 1;
inline bool AudioStream::has_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader;
}
inline bool AudioStream::_internal_has_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader;
}
inline void AudioStream::set_has_audio_stream_header() {
  _impl_._oneof_case_[0] = kAudioStreamHeader;
}
inline void AudioStream::clear_audio_stream_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAudioStreamHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.audio_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::release_audio_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  if (stream_part_case() == kAudioStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::AudioStreamHeader& AudioStream::_internal_audio_stream_header() const {
  return stream_part_case() == kAudioStreamHeader ? *_impl_.stream_part_.audio_stream_header_ : reinterpret_cast<::nvidia_ace::controller::v1::AudioStreamHeader&>(::nvidia_ace::controller::v1::_AudioStreamHeader_default_instance_);
}
inline const ::nvidia_ace::controller::v1::AudioStreamHeader& AudioStream::audio_stream_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  return _internal_audio_stream_header();
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::unsafe_arena_release_audio_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  if (stream_part_case() == kAudioStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_stream_header_;
    _impl_.stream_part_.audio_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_stream_header(::nvidia_ace::controller::v1::AudioStreamHeader* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_audio_stream_header();
    _impl_.stream_part_.audio_stream_header_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::_internal_mutable_audio_stream_header() {
  if (stream_part_case() != kAudioStreamHeader) {
    clear_stream_part();
    set_has_audio_stream_header();
    _impl_.stream_part_.audio_stream_header_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::controller::v1::AudioStreamHeader>(GetArena());
  }
  return _impl_.stream_part_.audio_stream_header_;
}
inline ::nvidia_ace::controller::v1::AudioStreamHeader* AudioStream::mutable_audio_stream_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::controller::v1::AudioStreamHeader* _msg = _internal_mutable_audio_stream_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStream.audio_stream_header)
  return _msg;
}

// .nvidia_ace.a2f.v1.AudioWithEmotion audio_with_emotion = 2;
inline bool AudioStream::has_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion;
}
inline bool AudioStream::_internal_has_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion;
}
inline void AudioStream::set_has_audio_with_emotion() {
  _impl_._oneof_case_[0] = kAudioWithEmotion;
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::release_audio_with_emotion() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  if (stream_part_case() == kAudioWithEmotion) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_with_emotion_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::_internal_audio_with_emotion() const {
  return stream_part_case() == kAudioWithEmotion ? *_impl_.stream_part_.audio_with_emotion_ : reinterpret_cast<::nvidia_ace::a2f::v1::AudioWithEmotion&>(::nvidia_ace::a2f::v1::_AudioWithEmotion_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::AudioWithEmotion& AudioStream::audio_with_emotion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  return _internal_audio_with_emotion();
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::unsafe_arena_release_audio_with_emotion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  if (stream_part_case() == kAudioWithEmotion) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.audio_with_emotion_;
    _impl_.stream_part_.audio_with_emotion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_audio_with_emotion(::nvidia_ace::a2f::v1::AudioWithEmotion* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_audio_with_emotion();
    _impl_.stream_part_.audio_with_emotion_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::_internal_mutable_audio_with_emotion() {
  if (stream_part_case() != kAudioWithEmotion) {
    clear_stream_part();
    set_has_audio_with_emotion();
    _impl_.stream_part_.audio_with_emotion_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::AudioWithEmotion>(GetArena());
  }
  return _impl_.stream_part_.audio_with_emotion_;
}
inline ::nvidia_ace::a2f::v1::AudioWithEmotion* AudioStream::mutable_audio_with_emotion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::a2f::v1::AudioWithEmotion* _msg = _internal_mutable_audio_with_emotion();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStream.audio_with_emotion)
  return _msg;
}

// .nvidia_ace.controller.v1.AudioStream.EndOfAudio end_of_audio = 3;
inline bool AudioStream::has_end_of_audio() const {
  return stream_part_case() == kEndOfAudio;
}
inline bool AudioStream::_internal_has_end_of_audio() const {
  return stream_part_case() == kEndOfAudio;
}
inline void AudioStream::set_has_end_of_audio() {
  _impl_._oneof_case_[0] = kEndOfAudio;
}
inline void AudioStream::clear_end_of_audio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kEndOfAudio) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.end_of_audio_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::release_end_of_audio() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  if (stream_part_case() == kEndOfAudio) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.end_of_audio_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.end_of_audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& AudioStream::_internal_end_of_audio() const {
  return stream_part_case() == kEndOfAudio ? *_impl_.stream_part_.end_of_audio_ : reinterpret_cast<::nvidia_ace::controller::v1::AudioStream_EndOfAudio&>(::nvidia_ace::controller::v1::_AudioStream_EndOfAudio_default_instance_);
}
inline const ::nvidia_ace::controller::v1::AudioStream_EndOfAudio& AudioStream::end_of_audio() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  return _internal_end_of_audio();
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::unsafe_arena_release_end_of_audio() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  if (stream_part_case() == kEndOfAudio) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.end_of_audio_;
    _impl_.stream_part_.end_of_audio_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AudioStream::unsafe_arena_set_allocated_end_of_audio(::nvidia_ace::controller::v1::AudioStream_EndOfAudio* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_end_of_audio();
    _impl_.stream_part_.end_of_audio_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStream.end_of_audio)
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::_internal_mutable_end_of_audio() {
  if (stream_part_case() != kEndOfAudio) {
    clear_stream_part();
    set_has_end_of_audio();
    _impl_.stream_part_.end_of_audio_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::controller::v1::AudioStream_EndOfAudio>(GetArena());
  }
  return _impl_.stream_part_.end_of_audio_;
}
inline ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* AudioStream::mutable_end_of_audio() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::controller::v1::AudioStream_EndOfAudio* _msg = _internal_mutable_end_of_audio();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStream.end_of_audio)
  return _msg;
}

inline bool AudioStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AudioStream::clear_has_stream_part() {
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AudioStream::StreamPartCase AudioStream::stream_part_case() const {
  return AudioStream::StreamPartCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AudioStreamHeader

// .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
inline bool AudioStreamHeader::has_audio_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_header_ != nullptr);
  return value;
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::_internal_audio_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::audio::v1::AudioHeader* p = _impl_.audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AudioStreamHeader::audio_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }
  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* released = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::unsafe_arena_release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::_internal_mutable_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(p);
  }
  return _impl_.audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AudioStreamHeader::mutable_audio_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* _msg = _internal_mutable_audio_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.audio_header)
}

// .nvidia_ace.a2f.v1.FaceParameters face_params = 2;
inline bool AudioStreamHeader::has_face_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.face_params_ != nullptr);
  return value;
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::_internal_face_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::a2f::v1::FaceParameters* p = _impl_.face_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::FaceParameters&>(::nvidia_ace::a2f::v1::_FaceParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::FaceParameters& AudioStreamHeader::face_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
  return _internal_face_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.face_params_);
  }
  _impl_.face_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::FaceParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::release_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::a2f::v1::FaceParameters* released = _impl_.face_params_;
  _impl_.face_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::unsafe_arena_release_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.face_params)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::a2f::v1::FaceParameters* temp = _impl_.face_params_;
  _impl_.face_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::_internal_mutable_face_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.face_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::FaceParameters>(GetArena());
    _impl_.face_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::FaceParameters*>(p);
  }
  return _impl_.face_params_;
}
inline ::nvidia_ace::a2f::v1::FaceParameters* AudioStreamHeader::mutable_face_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nvidia_ace::a2f::v1::FaceParameters* _msg = _internal_mutable_face_params();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_face_params(::nvidia_ace::a2f::v1::FaceParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.face_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.face_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::FaceParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.face_params)
}

// .nvidia_ace.a2f.v1.EmotionPostProcessingParameters emotion_post_processing_params = 3;
inline bool AudioStreamHeader::has_emotion_post_processing_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.emotion_post_processing_params_ != nullptr);
  return value;
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::_internal_emotion_post_processing_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* p = _impl_.emotion_post_processing_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters&>(::nvidia_ace::a2f::v1::_EmotionPostProcessingParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters& AudioStreamHeader::emotion_post_processing_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
  return _internal_emotion_post_processing_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emotion_post_processing_params_);
  }
  _impl_.emotion_post_processing_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::release_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* released = _impl_.emotion_post_processing_params_;
  _impl_.emotion_post_processing_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::unsafe_arena_release_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* temp = _impl_.emotion_post_processing_params_;
  _impl_.emotion_post_processing_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::_internal_mutable_emotion_post_processing_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.emotion_post_processing_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters>(GetArena());
    _impl_.emotion_post_processing_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters*>(p);
  }
  return _impl_.emotion_post_processing_params_;
}
inline ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* AudioStreamHeader::mutable_emotion_post_processing_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* _msg = _internal_mutable_emotion_post_processing_params();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_emotion_post_processing_params(::nvidia_ace::a2f::v1::EmotionPostProcessingParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.emotion_post_processing_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.emotion_post_processing_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::EmotionPostProcessingParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.emotion_post_processing_params)
}

// .nvidia_ace.a2f.v1.BlendShapeParameters blendshape_params = 4;
inline bool AudioStreamHeader::has_blendshape_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blendshape_params_ != nullptr);
  return value;
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::_internal_blendshape_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::a2f::v1::BlendShapeParameters* p = _impl_.blendshape_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::a2f::v1::BlendShapeParameters&>(::nvidia_ace::a2f::v1::_BlendShapeParameters_default_instance_);
}
inline const ::nvidia_ace::a2f::v1::BlendShapeParameters& AudioStreamHeader::blendshape_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
  return _internal_blendshape_params();
}
inline void AudioStreamHeader::unsafe_arena_set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blendshape_params_);
  }
  _impl_.blendshape_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::BlendShapeParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::release_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* released = _impl_.blendshape_params_;
  _impl_.blendshape_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::unsafe_arena_release_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* temp = _impl_.blendshape_params_;
  _impl_.blendshape_params_ = nullptr;
  return temp;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::_internal_mutable_blendshape_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.blendshape_params_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::a2f::v1::BlendShapeParameters>(GetArena());
    _impl_.blendshape_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::BlendShapeParameters*>(p);
  }
  return _impl_.blendshape_params_;
}
inline ::nvidia_ace::a2f::v1::BlendShapeParameters* AudioStreamHeader::mutable_blendshape_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::nvidia_ace::a2f::v1::BlendShapeParameters* _msg = _internal_mutable_blendshape_params();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
  return _msg;
}
inline void AudioStreamHeader::set_allocated_blendshape_params(::nvidia_ace::a2f::v1::BlendShapeParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blendshape_params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.blendshape_params_ = reinterpret_cast<::nvidia_ace::a2f::v1::BlendShapeParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AudioStreamHeader.blendshape_params)
}

// -------------------------------------------------------------------

// Event

// .nvidia_ace.controller.v1.EventType event_type = 1;
inline void Event::clear_event_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.event_type_ = 0;
}
inline ::nvidia_ace::controller::v1::EventType Event::event_type() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.Event.event_type)
  return _internal_event_type();
}
inline void Event::set_event_type(::nvidia_ace::controller::v1::EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.controller.v1.Event.event_type)
}
inline ::nvidia_ace::controller::v1::EventType Event::_internal_event_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::nvidia_ace::controller::v1::EventType>(_impl_.event_type_);
}
inline void Event::_internal_set_event_type(::nvidia_ace::controller::v1::EventType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.event_type_ = value;
}

// optional .google.protobuf.Any metadata = 2;
inline bool Event::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::google::protobuf::Any& Event::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Any* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Any&>(::google::protobuf::_Any_default_instance_);
}
inline const ::google::protobuf::Any& Event::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.Event.metadata)
  return _internal_metadata();
}
inline void Event::unsafe_arena_set_allocated_metadata(::google::protobuf::Any* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::google::protobuf::Any*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.Event.metadata)
}
inline ::google::protobuf::Any* Event::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Any* Event::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.Event.metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Any* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::protobuf::Any* Event::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.metadata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Any>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::google::protobuf::Any*>(p);
  }
  return _impl_.metadata_;
}
inline ::google::protobuf::Any* Event::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Any* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.Event.metadata)
  return _msg;
}
inline void Event::set_allocated_metadata(::google::protobuf::Any* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.metadata_ = reinterpret_cast<::google::protobuf::Any*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.Event.metadata)
}

// -------------------------------------------------------------------

// AnimationDataStreamHeader

// optional .nvidia_ace.audio.v1.AudioHeader audio_header = 1;
inline bool AnimationDataStreamHeader::has_audio_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.audio_header_ != nullptr);
  return value;
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::_internal_audio_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::audio::v1::AudioHeader* p = _impl_.audio_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::audio::v1::AudioHeader&>(::nvidia_ace::audio::v1::_AudioHeader_default_instance_);
}
inline const ::nvidia_ace::audio::v1::AudioHeader& AnimationDataStreamHeader::audio_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
  return _internal_audio_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }
  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* released = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::unsafe_arena_release_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* temp = _impl_.audio_header_;
  _impl_.audio_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::_internal_mutable_audio_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.audio_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::audio::v1::AudioHeader>(GetArena());
    _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(p);
  }
  return _impl_.audio_header_;
}
inline ::nvidia_ace::audio::v1::AudioHeader* AnimationDataStreamHeader::mutable_audio_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nvidia_ace::audio::v1::AudioHeader* _msg = _internal_mutable_audio_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
  return _msg;
}
inline void AnimationDataStreamHeader::set_allocated_audio_header(::nvidia_ace::audio::v1::AudioHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.audio_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.audio_header_ = reinterpret_cast<::nvidia_ace::audio::v1::AudioHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.audio_header)
}

// optional .nvidia_ace.animation_data.v1.SkelAnimationHeader skel_animation_header = 2;
inline bool AnimationDataStreamHeader::has_skel_animation_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skel_animation_header_ != nullptr);
  return value;
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::_internal_skel_animation_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::nvidia_ace::animation_data::v1::SkelAnimationHeader* p = _impl_.skel_animation_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::nvidia_ace::animation_data::v1::SkelAnimationHeader&>(::nvidia_ace::animation_data::v1::_SkelAnimationHeader_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::SkelAnimationHeader& AnimationDataStreamHeader::skel_animation_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
  return _internal_skel_animation_header();
}
inline void AnimationDataStreamHeader::unsafe_arena_set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.skel_animation_header_);
  }
  _impl_.skel_animation_header_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimationHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::release_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* released = _impl_.skel_animation_header_;
  _impl_.skel_animation_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::unsafe_arena_release_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* temp = _impl_.skel_animation_header_;
  _impl_.skel_animation_header_ = nullptr;
  return temp;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::_internal_mutable_skel_animation_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.skel_animation_header_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::SkelAnimationHeader>(GetArena());
    _impl_.skel_animation_header_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimationHeader*>(p);
  }
  return _impl_.skel_animation_header_;
}
inline ::nvidia_ace::animation_data::v1::SkelAnimationHeader* AnimationDataStreamHeader::mutable_skel_animation_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nvidia_ace::animation_data::v1::SkelAnimationHeader* _msg = _internal_mutable_skel_animation_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
  return _msg;
}
inline void AnimationDataStreamHeader::set_allocated_skel_animation_header(::nvidia_ace::animation_data::v1::SkelAnimationHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.skel_animation_header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.skel_animation_header_ = reinterpret_cast<::nvidia_ace::animation_data::v1::SkelAnimationHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:nvidia_ace.controller.v1.AnimationDataStreamHeader.skel_animation_header)
}

// double start_time_code_since_epoch = 3;
inline void AnimationDataStreamHeader::clear_start_time_code_since_epoch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_code_since_epoch_ = 0;
}
inline double AnimationDataStreamHeader::start_time_code_since_epoch() const {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
  return _internal_start_time_code_since_epoch();
}
inline void AnimationDataStreamHeader::set_start_time_code_since_epoch(double value) {
  _internal_set_start_time_code_since_epoch(value);
  // @@protoc_insertion_point(field_set:nvidia_ace.controller.v1.AnimationDataStreamHeader.start_time_code_since_epoch)
}
inline double AnimationDataStreamHeader::_internal_start_time_code_since_epoch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_code_since_epoch_;
}
inline void AnimationDataStreamHeader::_internal_set_start_time_code_since_epoch(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_code_since_epoch_ = value;
}

// -------------------------------------------------------------------

// AnimationDataStream

// .nvidia_ace.controller.v1.AnimationDataStreamHeader animation_data_stream_header = 1;
inline bool AnimationDataStream::has_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader;
}
inline bool AnimationDataStream::_internal_has_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader;
}
inline void AnimationDataStream::set_has_animation_data_stream_header() {
  _impl_._oneof_case_[0] = kAnimationDataStreamHeader;
}
inline void AnimationDataStream::clear_animation_data_stream_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kAnimationDataStreamHeader) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.animation_data_stream_header_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  if (stream_part_case() == kAnimationDataStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_stream_header_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& AnimationDataStream::_internal_animation_data_stream_header() const {
  return stream_part_case() == kAnimationDataStreamHeader ? *_impl_.stream_part_.animation_data_stream_header_ : reinterpret_cast<::nvidia_ace::controller::v1::AnimationDataStreamHeader&>(::nvidia_ace::controller::v1::_AnimationDataStreamHeader_default_instance_);
}
inline const ::nvidia_ace::controller::v1::AnimationDataStreamHeader& AnimationDataStream::animation_data_stream_header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  return _internal_animation_data_stream_header();
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::unsafe_arena_release_animation_data_stream_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  if (stream_part_case() == kAnimationDataStreamHeader) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_stream_header_;
    _impl_.stream_part_.animation_data_stream_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data_stream_header(::nvidia_ace::controller::v1::AnimationDataStreamHeader* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_animation_data_stream_header();
    _impl_.stream_part_.animation_data_stream_header_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::_internal_mutable_animation_data_stream_header() {
  if (stream_part_case() != kAnimationDataStreamHeader) {
    clear_stream_part();
    set_has_animation_data_stream_header();
    _impl_.stream_part_.animation_data_stream_header_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::controller::v1::AnimationDataStreamHeader>(GetArena());
  }
  return _impl_.stream_part_.animation_data_stream_header_;
}
inline ::nvidia_ace::controller::v1::AnimationDataStreamHeader* AnimationDataStream::mutable_animation_data_stream_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::controller::v1::AnimationDataStreamHeader* _msg = _internal_mutable_animation_data_stream_header();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.animation_data_stream_header)
  return _msg;
}

// .nvidia_ace.animation_data.v1.AnimationData animation_data = 2;
inline bool AnimationDataStream::has_animation_data() const {
  return stream_part_case() == kAnimationData;
}
inline bool AnimationDataStream::_internal_has_animation_data() const {
  return stream_part_case() == kAnimationData;
}
inline void AnimationDataStream::set_has_animation_data() {
  _impl_._oneof_case_[0] = kAnimationData;
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::release_animation_data() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  if (stream_part_case() == kAnimationData) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::_internal_animation_data() const {
  return stream_part_case() == kAnimationData ? *_impl_.stream_part_.animation_data_ : reinterpret_cast<::nvidia_ace::animation_data::v1::AnimationData&>(::nvidia_ace::animation_data::v1::_AnimationData_default_instance_);
}
inline const ::nvidia_ace::animation_data::v1::AnimationData& AnimationDataStream::animation_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  return _internal_animation_data();
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::unsafe_arena_release_animation_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  if (stream_part_case() == kAnimationData) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.animation_data_;
    _impl_.stream_part_.animation_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_animation_data(::nvidia_ace::animation_data::v1::AnimationData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_animation_data();
    _impl_.stream_part_.animation_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::_internal_mutable_animation_data() {
  if (stream_part_case() != kAnimationData) {
    clear_stream_part();
    set_has_animation_data();
    _impl_.stream_part_.animation_data_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::animation_data::v1::AnimationData>(GetArena());
  }
  return _impl_.stream_part_.animation_data_;
}
inline ::nvidia_ace::animation_data::v1::AnimationData* AnimationDataStream::mutable_animation_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::animation_data::v1::AnimationData* _msg = _internal_mutable_animation_data();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.animation_data)
  return _msg;
}

// .nvidia_ace.controller.v1.Event event = 3;
inline bool AnimationDataStream::has_event() const {
  return stream_part_case() == kEvent;
}
inline bool AnimationDataStream::_internal_has_event() const {
  return stream_part_case() == kEvent;
}
inline void AnimationDataStream::set_has_event() {
  _impl_._oneof_case_[0] = kEvent;
}
inline void AnimationDataStream::clear_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (stream_part_case() == kEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.stream_part_.event_;
    }
    clear_has_stream_part();
  }
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::release_event() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.event)
  if (stream_part_case() == kEvent) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::controller::v1::Event& AnimationDataStream::_internal_event() const {
  return stream_part_case() == kEvent ? *_impl_.stream_part_.event_ : reinterpret_cast<::nvidia_ace::controller::v1::Event&>(::nvidia_ace::controller::v1::_Event_default_instance_);
}
inline const ::nvidia_ace::controller::v1::Event& AnimationDataStream::event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.event)
  return _internal_event();
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.event)
  if (stream_part_case() == kEvent) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.event_;
    _impl_.stream_part_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_event(::nvidia_ace::controller::v1::Event* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_event();
    _impl_.stream_part_.event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.event)
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::_internal_mutable_event() {
  if (stream_part_case() != kEvent) {
    clear_stream_part();
    set_has_event();
    _impl_.stream_part_.event_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::controller::v1::Event>(GetArena());
  }
  return _impl_.stream_part_.event_;
}
inline ::nvidia_ace::controller::v1::Event* AnimationDataStream::mutable_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::controller::v1::Event* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.event)
  return _msg;
}

// .nvidia_ace.status.v1.Status status = 4;
inline bool AnimationDataStream::has_status() const {
  return stream_part_case() == kStatus;
}
inline bool AnimationDataStream::_internal_has_status() const {
  return stream_part_case() == kStatus;
}
inline void AnimationDataStream::set_has_status() {
  _impl_._oneof_case_[0] = kStatus;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::release_status() {
  // @@protoc_insertion_point(field_release:nvidia_ace.controller.v1.AnimationDataStream.status)
  if (stream_part_case() == kStatus) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::_internal_status() const {
  return stream_part_case() == kStatus ? *_impl_.stream_part_.status_ : reinterpret_cast<::nvidia_ace::status::v1::Status&>(::nvidia_ace::status::v1::_Status_default_instance_);
}
inline const ::nvidia_ace::status::v1::Status& AnimationDataStream::status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nvidia_ace.controller.v1.AnimationDataStream.status)
  return _internal_status();
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:nvidia_ace.controller.v1.AnimationDataStream.status)
  if (stream_part_case() == kStatus) {
    clear_has_stream_part();
    auto* temp = _impl_.stream_part_.status_;
    _impl_.stream_part_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AnimationDataStream::unsafe_arena_set_allocated_status(::nvidia_ace::status::v1::Status* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_stream_part();
  if (value) {
    set_has_status();
    _impl_.stream_part_.status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nvidia_ace.controller.v1.AnimationDataStream.status)
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::_internal_mutable_status() {
  if (stream_part_case() != kStatus) {
    clear_stream_part();
    set_has_status();
    _impl_.stream_part_.status_ =
        ::google::protobuf::Message::DefaultConstruct<::nvidia_ace::status::v1::Status>(GetArena());
  }
  return _impl_.stream_part_.status_;
}
inline ::nvidia_ace::status::v1::Status* AnimationDataStream::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::nvidia_ace::status::v1::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:nvidia_ace.controller.v1.AnimationDataStream.status)
  return _msg;
}

inline bool AnimationDataStream::has_stream_part() const {
  return stream_part_case() != STREAM_PART_NOT_SET;
}
inline void AnimationDataStream::clear_has_stream_part() {
  _impl_._oneof_case_[0] = STREAM_PART_NOT_SET;
}
inline AnimationDataStream::StreamPartCase AnimationDataStream::stream_part_case() const {
  return AnimationDataStream::StreamPartCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace controller
}  // namespace nvidia_ace


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::nvidia_ace::controller::v1::EventType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nvidia_ace::controller::v1::EventType>() {
  return ::nvidia_ace::controller::v1::EventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_nvidia_5face_2econtroller_2ev1_2eproto_2epb_2eh
