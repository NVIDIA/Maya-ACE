// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nvidia_ace.services.a2f_controller.v1.proto

#include "nvidia_ace.services.a2f_controller.v1.pb.h"
#include "nvidia_ace.services.a2f_controller.v1.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace nvidia_ace {
namespace services {
namespace a2f_controller {
namespace v1 {

static const char* A2FControllerService_method_names[] = {
  "/nvidia_ace.services.a2f_controller.v1.A2FControllerService/ProcessAudioStream",
};

std::unique_ptr< A2FControllerService::Stub> A2FControllerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< A2FControllerService::Stub> stub(new A2FControllerService::Stub(channel, options));
  return stub;
}

A2FControllerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ProcessAudioStream_(A2FControllerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>* A2FControllerService::Stub::ProcessAudioStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>::Create(channel_.get(), rpcmethod_ProcessAudioStream_, context);
}

void A2FControllerService::Stub::async::ProcessAudioStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nvidia_ace::controller::v1::AudioStream,::nvidia_ace::controller::v1::AnimationDataStream>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::nvidia_ace::controller::v1::AudioStream,::nvidia_ace::controller::v1::AnimationDataStream>::Create(stub_->channel_.get(), stub_->rpcmethod_ProcessAudioStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>* A2FControllerService::Stub::AsyncProcessAudioStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>::Create(channel_.get(), cq, rpcmethod_ProcessAudioStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>* A2FControllerService::Stub::PrepareAsyncProcessAudioStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>::Create(channel_.get(), cq, rpcmethod_ProcessAudioStream_, context, false, nullptr);
}

A2FControllerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      A2FControllerService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< A2FControllerService::Service, ::nvidia_ace::controller::v1::AudioStream, ::nvidia_ace::controller::v1::AnimationDataStream>(
          [](A2FControllerService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::nvidia_ace::controller::v1::AnimationDataStream,
             ::nvidia_ace::controller::v1::AudioStream>* stream) {
               return service->ProcessAudioStream(ctx, stream);
             }, this)));
}

A2FControllerService::Service::~Service() {
}

::grpc::Status A2FControllerService::Service::ProcessAudioStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nvidia_ace::controller::v1::AnimationDataStream, ::nvidia_ace::controller::v1::AudioStream>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvidia_ace
}  // namespace services
}  // namespace a2f_controller
}  // namespace v1

